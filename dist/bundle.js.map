{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/app.ts","src/boss.monster.ts","src/drop.ts","src/dungeon.ts","src/hero.ts","src/input.ts","src/inventory.ts","src/level.ts","src/monster.ts","src/render.ts","src/rng.ts","src/scene.ts","src/tilemap.ts","src/tiny.monster.ts"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","input_1","tilemap_1","scene_1","rng_1","render_1","dungeon_1","registry","TileRegistry","load","render","Render","rng","RNG","joystick","Joystick","controller","SceneController","setScene","DungeonScene","renderFrame","window","requestAnimationFrame","monster_1","mossMonsterNames","BossMonster","[object Object]","level","x","y","name","time","this","new_x","new_y","is_left","healthMax","Math","floor","health","damage","luck","speed","wrapper","MovingMonsterWrapper","setAnimation","MonsterState","Idle","state","tile","get","frame","start","Run","numOfFrames","monsters","max_distance","scan_x_min","max","scan_y_min","scan_x_max","min","w","scan_y_max","h","hero","dead","dist_x","abs","dist_y","move_x","move","console","log","move_y","nextFloat","hitDamage","random_move_percent","nextRange","d_x","d_y","test_x","test_y","m","push","boss","randomDrop","Coins","coins","addCoins","HealthFlask","inventory","add","item","cell","hill","count","HealthBigFlask","weaponNames","WeaponConfig","tileName","distance","Weapon","configs","prev","weapon","hero_1","level_1","drop_1","Date","getTime","hero_weapon","create","HeroMonster","Level","animate","renderLevel","renderHUD","c_w","canvas","width","c_h","height","buffer","ctx","save","fillStyle","fillRect","b_ctx","globalCompositeOperation","renderLight","t_x","t_y","maxTime","delta","scale","l_x","l_y","renderTile","drop","wall","m_y","renderMonster","restore","globalAlpha","drawImage","radius","diameter","box_x","box_y","grd","createRadialGradient","addColorStop","renderHealth","renderLevelTitle","renderYouDead","renderInventory","h_m","translate","border","font","fillText","toString","textAlign","max_width","point_w","b_w","h_w","slice","cells","grid_w","inv_w","grid_spacing","g_x","c_x","c_y","cell_size","sx","sy","sw","sh","isAnim","sf","d_scale","dw","dh","c_offset_x","tileSet","textBaseline","monster","dx","dy","tile_offset_y","offset_x","offset_y","w_dw","w_dh","w_dy","w_dx","Hit","angle","rotate","PI","inventory_1","heroMonsterNames","baseDamage","Inventory","action","scanDrop","scanHit","d","digit","processed","use","dropWeapon","hit","triggered","exit","moveUp","moveDown","moveLeft","moveRight","left_x","right_x","min_y","max_y","b_y","scan_x","scan_y","s_x","j","s_y","dist_r","pickedUp","KeyBindState","KeyBind","Await","preventDefault","Pressed","digit1","digit2","digit3","digit4","digit5","digit6","digit7","digit8","digit9","digit0","init","num","addEventListener","keydown","bind","keyup","InventoryCell","stack","set","maxInStack","same","tiny_monster_1","boss_monster_1","Rect","b","scene","l","rooms","corridorsV","corridorsH","createBuffer","monsterList","generate","fill","replace","defaultValue","rows","row","rooms_total","monsters_total","drop_total","is_boss","generateRoom","max_room","room","choice","tinyMonsterNames","TinyMonster","hero_x","hero_y","setLevel","resetPosition","retry","room_w","room_h","isOverlap","expand","connected","max_x","min_x_w","rect","expandV","min_y_h","expandH","some","rnd","weight_coins","available","filter","forEach","fillRoom","fillCorridorH","fillCorridorV","r_y","r_x","replaceFloorRandomly","replaceLadder","replaceWallRandomly","replacements","last","ladder_x","ladder_y","wall_mid_top_replaces","wall_mid_bottom_replaces","replacement","id","document","getElementById","getContext","imageSmoothingEnabled","createElement","seed","random","nextInt","end","rangeSize","randomUnder1","array","tileMap","Promise","resolve","img","Image","onload","ev","src","loadTileSet","response","fetch","text","split","line","match","parseInt","Tile","s"],"mappings":"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","file":"bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","import {Joystick} from \"./input\";\nimport {TileRegistry} from \"./tilemap\";\nimport {Scene, SceneController} from \"./scene\";\nimport {RNG} from \"./rng\";\nimport {Render} from \"./render\";\nimport {DungeonScene} from \"./dungeon\";\n\n\n(async function () {\n  const registry = new TileRegistry();\n  await registry.load();\n\n  const render = new Render();\n\n  const rng = new RNG();\n  const joystick = new Joystick();\n  const controller = new SceneController();\n  controller.setScene(new DungeonScene(rng, joystick, registry, controller));\n\n  function renderFrame() {\n    controller.render(render);\n    window.requestAnimationFrame(renderFrame);\n  }\n  renderFrame();\n})();","import {RNG} from \"./rng\";\nimport {Tile, TileRegistry} from \"./tilemap\";\nimport {Level} from \"./level\";\nimport {Monster, MonsterState, MovingMonsterWrapper} from \"./monster\";\nimport {Weapon} from \"./drop\";\n\nexport const mossMonsterNames = [\n  \"ogre\",\n  \"big_zombie\",\n  \"big_demon\",\n];\n\nexport class BossMonster implements Monster {\n  private readonly rng: RNG;\n  private readonly registry: TileRegistry;\n  private readonly level: Level;\n  x: number;\n  y: number;\n  new_x: number;\n  new_y: number;\n  is_left: boolean;\n  readonly name: string;\n  readonly healthMax: number;\n  health: number;\n  private readonly damage: number;\n  private readonly luck: number;\n  readonly speed: number;\n  state: MonsterState;\n  tile: Tile;\n  frame: number;\n  start: number;\n  weapon: Weapon;\n  private readonly wrapper: MovingMonsterWrapper;\n\n  constructor(rng: RNG, registry: TileRegistry, level: Level, x: number, y: number, name: string, time: number) {\n    this.rng = rng;\n    this.registry = registry;\n    this.level = level;\n    this.x = x;\n    this.y = y;\n    this.new_x = x;\n    this.new_y = y;\n    this.is_left = false;\n    this.name = name;\n    this.healthMax = 50 + Math.floor(level.level * 10);\n    this.health = this.healthMax;\n    this.damage = 7;\n    this.luck = 0.5;\n    this.speed = 100;\n    this.wrapper = new MovingMonsterWrapper(this);\n    this.setAnimation(MonsterState.Idle, time);\n  }\n\n  setAnimation(state: MonsterState, time: number) {\n    switch (state) {\n      case MonsterState.Idle:\n        this.state = state;\n        this.tile = this.registry.get(this.name + \"_idle_anim\");\n        this.frame = 0;\n        this.start = time;\n        break;\n      case MonsterState.Run:\n        this.state = state;\n        this.tile = this.registry.get(this.name + \"_run_anim\");\n        this.frame = 0;\n        this.start = time;\n        break;\n    }\n  };\n\n  animate(time: number) {\n    this.frame = Math.floor((time - this.start) / this.speed);\n    if (this.frame >= this.tile.numOfFrames) {\n      if (this.state === MonsterState.Run) {\n        // console.log(\"finish run animation\");\n        // clear prev\n        this.level.monsters[this.y][this.x] = null;\n        this.level.monsters[this.y][this.x + 1] = null;\n        this.level.monsters[this.y - 1][this.x] = null;\n        this.level.monsters[this.y - 1][this.x + 1] = null;\n\n        // mark new\n        this.level.monsters[this.new_y][this.new_x] = this;\n        this.level.monsters[this.new_y][this.new_x + 1] = this.wrapper;\n        this.level.monsters[this.new_y - 1][this.new_x] = this.wrapper;\n        this.level.monsters[this.new_y - 1][this.new_x + 1] = this.wrapper;\n\n        this.x = this.new_x;\n        this.y = this.new_y;\n      }\n\n      this.setAnimation(MonsterState.Idle, time);\n\n      // search hero near\n      const max_distance = 5;\n      const scan_x_min = Math.max(0, this.x - max_distance);\n      const scan_y_min = Math.max(0, this.y - max_distance);\n      const scan_x_max = Math.min(this.level.w, this.x + max_distance);\n      const scan_y_max = Math.min(this.level.h, this.y + max_distance);\n\n      const is_hero_near = !this.level.hero.dead\n        && this.level.hero.x >= scan_x_min && this.level.hero.x <= scan_x_max\n        && this.level.hero.y >= scan_y_min && this.level.hero.y <= scan_y_max;\n\n      // console.log(\"hero is near\", scan_x_min, scan_x_max, scan_y_min, scan_y_max);\n\n      if (is_hero_near) {\n        const dist_x = Math.abs(this.x - this.level.hero.x);\n        const dist_y = Math.abs(this.y - this.level.hero.y);\n\n        if (dist_x > 1) {\n          const move_x = Math.max(-1, Math.min(1, this.level.hero.x - this.x));\n          if (this.move(move_x, 0, time)) {\n            console.log(\"move to hero x\");\n            return;\n          }\n        }\n        if (dist_y > 0) {\n          const move_y = Math.max(-1, Math.min(1, this.level.hero.y - this.y));\n          if (this.move(0, move_y, time)) {\n            console.log(\"move to hero y\");\n            return;\n          }\n        }\n\n        if (dist_x <= 1 && dist_y <= 1 && this.rng.nextFloat() < this.luck) {\n          this.level.hero.hitDamage(this.damage, this.name, time);\n          return;\n        }\n      }\n\n      // random move ?\n      const random_move_percent = 0.5;\n      if (this.rng.nextFloat() < random_move_percent) {\n        const move_x = this.rng.nextRange(-1, 2);\n        const move_y = this.rng.nextRange(-1, 2);\n        console.log(\"random move\", move_x, move_y);\n        if (this.move(move_x, move_y, time)) {\n          return;\n        }\n      }\n    }\n  };\n\n  move(d_x: number, d_y: number, time: number) {\n    this.is_left = d_x < 0;\n    if (this.state === MonsterState.Idle) {\n      // monster use space [x..x+1; y..y-1]\n\n      const new_x = this.x + d_x;\n      const new_y = this.y + d_y;\n\n      for (let test_x = new_x; test_x <= new_x + 1; test_x++) {\n        for (let test_y = new_y - 1; test_y <= new_y; test_y++) {\n          // check is floor exists\n          if (!this.level.floor[test_y][test_x]) {\n            return false;\n          }\n          // check is no monster\n          const m = this.level.monsters[test_y][test_x];\n          if (m && m !== this && m !== this.wrapper) {\n            return false;\n          }\n        }\n      }\n\n      // start move animation\n      // mark as used\n      this.level.monsters[new_y][new_x] = this.wrapper;\n      this.level.monsters[new_y][new_x + 1] = this.wrapper;\n      this.level.monsters[new_y - 1][new_x] = this.wrapper;\n      this.level.monsters[new_y - 1][new_x + 1] = this.wrapper;\n      // reuse current level, because prev mark can override it\n      this.level.monsters[this.y][this.x] = this;\n      this.new_x = new_x;\n      this.new_y = new_y;\n      this.setAnimation(MonsterState.Run, time);\n      return true;\n    }\n    return false;\n  };\n\n  hitDamage(damage: number, name: string, time: number) {\n    this.level.log.push(`${this.name} damaged ${damage} by ${name}`);\n    this.health = Math.max(0, this.health - damage);\n    if (this.health <= 0) {\n      this.level.log.push(`${this.name} killed by ${name}`);\n\n      this.level.monsters[this.y][this.x] = null;\n      this.level.monsters[this.y][this.x + 1] = null;\n      this.level.monsters[this.y - 1][this.x] = null;\n      this.level.monsters[this.y - 1][this.x + 1] = null;\n\n\n      this.level.monsters[this.new_y][this.new_x] = null;\n      this.level.monsters[this.new_y][this.new_x + 1] = null;\n      this.level.monsters[this.new_y - 1][this.new_x] = null;\n      this.level.monsters[this.new_y - 1][this.new_x + 1] = null;\n\n      this.level.boss = null;\n      if (this.rng.nextFloat() < this.luck) {\n        this.level.randomDrop(this.x, this.y);\n      }\n    }\n  };\n}","import {RNG} from \"./rng\";\nimport {HeroMonster} from \"./hero\";\nimport {Tile, TileRegistry} from \"./tilemap\";\nimport {InventoryCell} from \"./inventory\";\n\nexport interface Drop {\n  readonly tile: Tile\n  pickedUp(hero: HeroMonster): boolean;\n}\n\nexport interface UsableDrop extends Drop {\n  same(item: UsableDrop): boolean;\n  use(cell: InventoryCell, hero: HeroMonster): void;\n}\n\nexport class Coins implements Drop {\n  readonly tile: Tile;\n  private readonly coins: number;\n\n  constructor(rng: RNG, registry: TileRegistry) {\n    this.tile = registry.get(\"coin_anim\");\n    this.coins = rng.nextRange(1, 30)\n  }\n\n  pickedUp(hero: HeroMonster): boolean {\n    hero.addCoins(this.coins);\n    return true;\n  };\n}\n\nexport class HealthFlask implements UsableDrop {\n  readonly tile: Tile;\n  private readonly health: number;\n\n  constructor(registry: TileRegistry) {\n    this.tile = registry.get(\"flask_red\");\n    this.health = 2;\n  }\n\n  pickedUp(hero: HeroMonster): boolean {\n    return hero.inventory.add(this);\n\n  };\n\n  same(item: UsableDrop): boolean {\n    return item instanceof HealthFlask;\n  };\n\n  use(cell: InventoryCell, hero: HeroMonster) {\n    hero.hill(this.health);\n    cell.count--;\n    if (cell.count <= 0) {\n      cell.item = null;\n      cell.count = 0;\n    }\n  };\n}\n\nexport class HealthBigFlask implements UsableDrop {\n  readonly tile: Tile;\n  private readonly health: number;\n\n  constructor(registry: TileRegistry) {\n    this.tile = registry.get(\"flask_big_red\");\n    this.health = 5;\n  }\n\n  pickedUp(hero: HeroMonster): boolean {\n    return hero.inventory.add(this);\n  };\n\n  same(item: UsableDrop): boolean {\n    return item instanceof HealthBigFlask;\n  };\n\n  use(cell: InventoryCell, hero: HeroMonster) {\n    hero.hill(this.health);\n    cell.count--;\n    if (cell.count <= 0) {\n      cell.item = null;\n      cell.count = 0;\n    }\n  };\n}\n\nexport const weaponNames = [\n  \"weapon_knife\",\n  \"weapon_rusty_sword\",\n  \"weapon_regular_sword\",\n  \"weapon_red_gem_sword\",\n  \"weapon_big_hammer\",\n  \"weapon_hammer\",\n  \"weapon_baton_with_spikes\",\n  \"weapon_mace\",\n  \"weapon_katana\",\n  \"weapon_saw_sword\",\n  \"weapon_anime_sword\",\n  \"weapon_axe\",\n  \"weapon_machete\",\n  \"weapon_cleaver\",\n  \"weapon_duel_sword\",\n  \"weapon_knight_sword\",\n  \"weapon_golden_sword\",\n  \"weapon_lavish_sword\",\n  \"weapon_red_magic_staff\",\n  \"weapon_green_magic_staff\",\n];\n\nexport class WeaponConfig {\n  readonly tileName: string;\n  readonly speed: number;\n  readonly distance: number;\n  readonly damage: number;\n  readonly level: number;\n\n  constructor(tileName: string, speed: number, distance: number, damage: number, level: number) {\n    this.tileName = tileName;\n    this.speed = speed;\n    this.distance = distance;\n    this.damage = damage;\n    this.level = level;\n  }\n\n  create(registry: TileRegistry): Weapon {\n    return new Weapon(registry.get(this.tileName), this.speed, this.distance, this.damage);\n  }\n\n  static configs: WeaponConfig[] = [\n    new WeaponConfig(\"weapon_knife\", 100, 1, 3, 1),\n    new WeaponConfig(\"weapon_rusty_sword\", 100, 1, 4, 1),\n    new WeaponConfig(\"weapon_regular_sword\", 100, 1, 5, 3),\n    new WeaponConfig(\"weapon_red_gem_sword\", 100, 1, 6, 3),\n\n    new WeaponConfig(\"weapon_big_hammer\", 300, 2, 10, 5),\n    new WeaponConfig(\"weapon_hammer\", 200, 1, 7, 5),\n    new WeaponConfig(\"weapon_baton_with_spikes\", 200, 1, 7, 5),\n    new WeaponConfig(\"weapon_mace\", 200, 1, 7, 5),\n\n    new WeaponConfig(\"weapon_katana\", 100, 1, 8, 7),\n    new WeaponConfig(\"weapon_saw_sword\", 200, 1, 9, 7),\n    new WeaponConfig(\"weapon_anime_sword\", 200, 1, 12, 7),\n    new WeaponConfig(\"weapon_axe\", 200, 1, 12, 7),\n\n    new WeaponConfig(\"weapon_machete\", 100, 1, 11, 9),\n    new WeaponConfig(\"weapon_cleaver\", 100, 1, 12, 9),\n    new WeaponConfig(\"weapon_duel_sword\", 100, 1, 13, 9),\n    new WeaponConfig(\"weapon_knight_sword\", 100, 1, 14, 9),\n\n    new WeaponConfig(\"weapon_golden_sword\", 100, 1, 15, 11),\n    new WeaponConfig(\"weapon_lavish_sword\", 100, 1, 16, 11),\n  ];\n}\n\nexport class Weapon implements UsableDrop {\n  readonly tile: Tile;\n  frame: number;\n  readonly numOfFrames: number;\n  readonly speed: number;\n  readonly distance: number;\n  readonly damage: number;\n\n  constructor(tile: Tile, speed: number, distance: number, damage: number) {\n    this.tile = tile;\n    this.frame = 0;\n    this.numOfFrames = 4;\n    this.speed = speed;\n    this.distance = distance;\n    this.damage = damage;\n  }\n\n  pickedUp(hero: HeroMonster): boolean {\n    return hero.inventory.add(this);\n  }\n\n  same(item: UsableDrop): boolean {\n    return false;\n  }\n\n  use(cell: InventoryCell, hero: HeroMonster): void {\n    const prev = hero.weapon;\n    hero.weapon = this;\n    if (prev) {\n      cell.item = prev;\n      cell.count = 1;\n    } else {\n      cell.item = null;\n      cell.count = 0;\n    }\n  }\n}","import {Joystick} from \"./input\";\nimport {Tile, TileRegistry} from \"./tilemap\";\nimport {HeroMonster} from \"./hero\";\nimport {Level} from \"./level\";\nimport {RNG} from \"./rng\";\nimport {Monster, MonsterState, MovingMonsterWrapper} from \"./monster\";\nimport {WeaponConfig} from \"./drop\";\nimport {Render} from \"./render\";\nimport {Scene, SceneController} from \"./scene\";\n\nconst scale = 2;\n\nexport class DungeonScene implements Scene {\n  private level: Level;\n  private controller: SceneController;\n\n  constructor(rng: RNG, joystick: Joystick, registry: TileRegistry, controller: SceneController) {\n    this.controller = controller;\n    const start = new Date().getTime();\n    const hero_weapon = WeaponConfig.configs[0].create(registry);\n    const hero = new HeroMonster(registry, joystick, 0, 0, \"knight_f\", hero_weapon, start);\n    this.level = new Level(rng, registry, this, hero, 1, start);\n  }\n\n  setLevel(level: Level) {\n    this.level = level;\n  }\n\n  render(render: Render) {\n    const time = new Date().getTime();\n    this.level.animate(time);\n    this.renderLevel(render, time);\n    this.renderHUD(render, time);\n  }\n\n  renderLevel(render: Render, time: number) {\n    const c_w = render.canvas.width;\n    const c_h = render.canvas.height;\n    render.buffer.width = c_w;\n    render.buffer.height = c_h;\n\n    render.ctx.save();\n    render.ctx.fillStyle = \"rgb(34,34,34)\";\n    render.ctx.fillRect(0, 0, c_w, c_h);\n\n    render.b_ctx.save();\n    render.b_ctx.fillStyle = \"black\";\n    render.b_ctx.fillRect(0, 0, c_w, c_h);\n    render.b_ctx.globalCompositeOperation = \"lighter\";\n\n    // render hero light\n    this.renderLight(render, c_w >> 1, c_h >> 1, 16 * scale * 6);\n\n    let t_x = this.level.hero.x * 16 * scale + 8 - c_w / 2;\n    let t_y = this.level.hero.y * 16 * scale + 8 - c_h / 2;\n\n    // translate level to hero position\n    if (this.level.hero.state === MonsterState.Run) {\n      const start = this.level.hero.start;\n      const speed = this.level.hero.speed;\n      const numOfFrames = this.level.hero.tile.numOfFrames;\n      const maxTime = speed * numOfFrames;\n      const delta = Math.min(maxTime, time - start) / maxTime;\n\n      const t_offset_x = scale * 16 * (this.level.hero.new_x - this.level.hero.x) * delta;\n      const t_offset_y = scale * 16 * (this.level.hero.new_y - this.level.hero.y) * delta;\n\n      t_x = t_x + t_offset_x;\n      t_y = t_y + t_offset_y;\n    }\n\n    // render floor, drop\n    for (let l_x = 0; l_x < this.level.w; l_x++) {\n      for (let l_y = 0; l_y < this.level.h; l_y++) {\n        const d_x = -t_x + l_x * 16 * scale;\n        const d_y = -t_y + l_y * 16 * scale;\n        this.renderTile(render, this.level.floor[l_y][l_x], d_x, d_y, time);\n        if (this.level.drop[l_y][l_x]) {\n          this.renderTile(render, this.level.drop[l_y][l_x].tile, d_x, d_y, time);\n        }\n      }\n    }\n    // render wall, monsters\n    for (let l_y = 0; l_y < this.level.h; l_y++) {\n      for (let l_x = 0; l_x < this.level.w; l_x++) {\n        const d_x = -t_x + l_x * 16 * scale;\n        const d_y = -t_y + l_y * 16 * scale;\n        const tile = this.level.wall[l_y][l_x];\n        if (tile) {\n          this.renderTile(render, tile, d_x, d_y, time);\n          if (tile.name === \"wall_fountain_mid_red_anim\" || tile.name === \"wall_fountain_mid_blue_anim\") {\n            this.renderLight(render, d_x + 8 * scale, d_y + 8 * scale, 16 * scale * 4);\n          }\n        }\n      }\n      if (l_y < this.level.h - 1) {\n        for (let l_x = 0; l_x < this.level.w; l_x++) {\n          const m_y = l_y + 1;\n          const d_x = -t_x + l_x * 16 * scale;\n          const d_y = -t_y + m_y * 16 * scale;\n          this.renderMonster(render, this.level.monsters[m_y][l_x], d_x, d_y, time);\n        }\n      }\n    }\n\n    render.ctx.restore();\n\n    render.ctx.save();\n    render.ctx.globalAlpha = 0.8;\n    render.ctx.globalCompositeOperation = \"multiply\";\n    render.ctx.drawImage(render.buffer, 0, 0);\n    render.ctx.restore();\n  }\n\n  renderLight(render: Render, x: number, y: number, radius: number) {\n    const diameter = radius << 1;\n    const box_x = x - radius;\n    const box_y = y - radius;\n\n    const grd = render.b_ctx.createRadialGradient(x, y, 16, x, y, radius);\n    grd.addColorStop(0.5, \"rgb(255,255,255)\");\n    grd.addColorStop(1, \"transparent\");\n    render.b_ctx.fillStyle = grd;\n    render.b_ctx.fillRect(box_x, box_y, diameter, diameter);\n  }\n\n  renderHUD(render: Render, time: number) {\n    this.renderHealth(render, time);\n    this.renderLevelTitle(render, time);\n    this.renderYouDead(render, time);\n    this.renderInventory(render, time);\n  }\n\n  renderHealth(render: Render, time: number) {\n    const border = 4;\n    const height = 20;\n    const point_w = 10;\n    const h_m = this.level.hero.healthMax;\n    const h = this.level.hero.health;\n\n    // render HUD - hero health\n    render.ctx.save();\n    render.ctx.translate(40, 40);\n\n    // background\n    render.ctx.fillStyle = \"rgb(0,0,0)\";\n    render.ctx.fillRect(0, 0, border * 2 + point_w * h_m, border * 2 + height);\n\n    // health red line\n    render.ctx.fillStyle = \"rgb(255,0,0)\";\n    render.ctx.fillRect(border, border, point_w * h, height);\n\n    // health points text\n    render.ctx.fillStyle = \"rgb(255,255,255)\";\n    render.ctx.font = \"20px silkscreennormal\";\n    render.ctx.fillText(h.toString(), border * 2, border + 16);\n\n    // coins text\n    render.ctx.fillText(`$${this.level.hero.coins}`, 0, 50);\n\n    render.ctx.restore();\n  }\n\n  renderLevelTitle(render: Render, time: number) {\n    const c_w = render.canvas.width;\n    const c_h = render.canvas.height;\n\n    // render HUD - level\n    render.ctx.save();\n    render.ctx.translate(c_w / 2, 60);\n    render.ctx.fillStyle = \"rgb(255,255,255)\";\n    render.ctx.textAlign = \"center\";\n    render.ctx.font = \"20px silkscreennormal\";\n    render.ctx.fillText(`level ${this.level.level}`, 0, 0);\n    render.ctx.restore();\n\n    // render HUD - boss health\n    if (this.level.boss) {\n      render.ctx.save();\n      render.ctx.translate(c_w / 2, 100);\n\n      const border = 4;\n      const height = 20;\n      const max_width = 500;\n\n      const h_m = this.level.boss.healthMax;\n      const h = this.level.boss.health;\n\n      const point_w = Math.min(10, Math.floor(max_width / h_m));\n\n      // background\n      const b_w = border * 2 + point_w * h_m;\n      render.ctx.fillStyle = \"rgb(0,0,0)\";\n      render.ctx.fillRect(-(b_w >> 1), 0, b_w, border * 2 + height);\n\n      // health red line\n      const h_w = point_w * h;\n      render.ctx.fillStyle = \"rgb(255,0,0)\";\n      render.ctx.fillRect(border - ((point_w * h_m) >> 1), border, h_w, height);\n\n      // health points text\n      render.ctx.fillStyle = \"rgb(255,255,255)\";\n      render.ctx.font = \"20px silkscreennormal\";\n      render.ctx.fillText(`${this.level.boss.name} - ${h}`, border * 2 - ((point_w * h_m) >> 1), border + 16);\n      render.ctx.restore();\n    }\n\n    // render HUD - log info\n    this.level.log = this.level.log.slice(-5);\n    render.ctx.save();\n    render.ctx.translate(40, c_h - 100);\n    for (let i = 0; i < this.level.log.length; i++) {\n      render.ctx.fillStyle = \"rgb(255,255,255)\";\n      render.ctx.font = \"20px silkscreennormal\";\n      render.ctx.fillText(this.level.log[i], 0, i * 20);\n    }\n    render.ctx.restore();\n  }\n\n  renderYouDead(render: Render, time: number) {\n    const c_w = render.canvas.width;\n    const c_h = render.canvas.height;\n\n    if (this.level.hero.dead) {\n      render.ctx.save();\n\n      render.ctx.fillStyle = \"rgba(0, 0, 0, 0.7)\";\n      render.ctx.fillRect(0, 0, c_w, c_h);\n\n      render.ctx.translate(c_w / 2, c_h / 2);\n\n      render.ctx.fillStyle = \"rgb(255,0,0)\";\n      render.ctx.textAlign = \"center\";\n      render.ctx.font = \"200px silkscreennormal\";\n      render.ctx.fillText(\"YOU DIED\", 0, 0);\n      render.ctx.restore();\n    }\n  }\n\n  renderInventory(render: Render, time: number) {\n    const c_w = render.canvas.width;\n    const c_h = render.canvas.height;\n\n    const cells = this.level.hero.inventory.cells;\n    const cell_size = 16;\n    const grid_w = cells.length;\n    const grid_spacing = 2;\n\n    const inv_w = scale * (grid_w * (cell_size + grid_spacing) + grid_spacing);\n    const inv_h = scale * (cell_size + grid_spacing + grid_spacing);\n\n    render.ctx.save();\n    render.ctx.translate((c_w >> 1) - (inv_w >> 1), c_h - inv_h - 40);\n\n    // background\n    render.ctx.fillStyle = \"rgb(100,100,100)\";\n    render.ctx.fillRect(0, 0, inv_w, inv_h);\n\n    render.ctx.translate(grid_spacing * scale, grid_spacing * scale); // grid spacing\n\n    for (let g_x = 0; g_x < grid_w; g_x++) {\n      const c_x = scale * (g_x * (cell_size + grid_spacing));\n      const c_y = 0;\n\n      render.ctx.fillStyle = \"rgb(70,70,70)\";\n      render.ctx.fillRect(c_x, 0, cell_size * scale, cell_size * scale);\n      const cell = cells[g_x];\n      if (cell.item) {\n        const tile = cell.item.tile;\n        let sx = tile.x;\n        const sy = tile.y;\n        const sw = tile.w;\n        const sh = tile.h;\n\n        if (tile.isAnim && tile.numOfFrames > 1) {\n          const sf = Math.floor(time / 100) % tile.numOfFrames;\n          sx = tile.x + sw * sf;\n        }\n\n        const d_scale = sh <= cell_size ? 1 : cell_size / sh;\n        const dw = sw * scale * d_scale;\n        const dh = sh * scale * d_scale;\n        const c_offset_x = ((cell_size * scale) >> 1) - (dw >> 1);\n\n        render.ctx.drawImage(tile.tileSet, sx, sy, sw, sh, c_x + c_offset_x, c_y, dw, dh);\n        render.ctx.textAlign = \"end\";\n        render.ctx.textBaseline = \"top\";\n        render.ctx.font = \"10px silkscreennormal\";\n        render.ctx.fillStyle = \"rgb(255,255,255)\";\n        render.ctx.fillText(cell.count.toString(), c_x + (cell_size * scale), 0, cell_size * scale);\n      }\n    }\n    render.ctx.restore();\n  }\n\n  renderMonster(render: Render, monster: Monster, dx: number, dy: number, time: number) {\n    if (monster && !(monster instanceof MovingMonsterWrapper)) {\n      const sw = monster.tile.w;\n      const sh = monster.tile.h;\n      const sx = monster.tile.x + sw * monster.frame;\n      const sy = monster.tile.y;\n      const dw = sw * scale;\n      const dh = sh * scale;\n\n      const tile_offset_y = dh - 14 * scale;\n\n      let offset_x = 0;\n      let offset_y = 0;\n\n      if (monster.state === MonsterState.Run) {\n        const start = monster.start;\n        const speed = monster.speed;\n        const numOfFrames = monster.tile.numOfFrames;\n        const maxTime = speed * numOfFrames;\n        const delta = Math.min(maxTime, time - start) / maxTime;\n\n        offset_x = scale * 16 * (monster.new_x - monster.x) * delta;\n        offset_y = scale * 16 * (monster.new_y - monster.y) * delta;\n      }\n\n      if (dx + offset_x + dw > 0 && dx + offset_x < render.canvas.width &&\n        dy + offset_y + dh > 0 && dy + offset_y < render.canvas.height) {\n\n\n        render.ctx.save();\n        render.ctx.translate(dx + offset_x, dy + offset_y);\n        if (monster.is_left) {\n          render.ctx.scale(-1, 1);\n          if (monster.weapon) {\n            render.ctx.save();\n            const w = monster.weapon.tile;\n            const w_dw = w.w * scale;\n            const w_dh = w.h * scale;\n\n            const w_dy = w_dh - 14 * scale;\n            const w_dx = 4 * scale;\n\n            render.ctx.translate(-w_dx, -w_dy);\n\n            if (monster.state === MonsterState.Hit) {\n              let angle = 90 * monster.weapon.frame / (monster.weapon.numOfFrames - 1);\n              render.ctx.translate(w_dw >> 1, w_dh); // to bottom center of tile\n              render.ctx.rotate(angle * Math.PI / 180); // 90 degree\n              render.ctx.drawImage(w.tileSet, w.x, w.y, w.w, w.h, -(w_dw >> 1), -w_dh, w_dw, w_dh);\n            } else {\n              render.ctx.drawImage(w.tileSet, w.x, w.y, w.w, w.h, 0, 0, w_dw, w_dh);\n            }\n            render.ctx.restore();\n          }\n          render.ctx.drawImage(monster.tile.tileSet, sx, sy, sw, sh, 0 - dw, -tile_offset_y, dw, dh);\n        } else {\n          if (monster.weapon) {\n            render.ctx.save();\n            const w = monster.weapon.tile;\n            const w_dw = w.w * scale;\n            const w_dh = w.h * scale;\n\n            const w_dy = w_dh - 14 * scale;\n            const w_dx = 12 * scale;\n\n            render.ctx.translate(w_dx, -w_dy);\n\n            if (monster.state === MonsterState.Hit) {\n              let angle = 90 * monster.weapon.frame / (monster.weapon.numOfFrames - 1);\n              render.ctx.translate(w_dw >> 1, w_dh); // to bottom center of tile\n              render.ctx.rotate(angle * Math.PI / 180); // 90 degree\n              render.ctx.drawImage(w.tileSet, w.x, w.y, w.w, w.h, -(w_dw >> 1), -w_dh, w_dw, w_dh);\n            } else {\n              render.ctx.drawImage(w.tileSet, w.x, w.y, w.w, w.h, 0, 0, w_dw, w_dh);\n            }\n            render.ctx.restore();\n          }\n          render.ctx.drawImage(monster.tile.tileSet, sx, sy, sw, sh, 0, -tile_offset_y, dw, dh);\n        }\n        render.ctx.restore();\n      }\n    }\n  }\n\n  renderTile(render: Render, tile: Tile, dx: number, dy: number, time: number) {\n    if (tile) {\n      const sw = tile.w;\n      const sh = tile.h;\n      const dw = sw * scale;\n      const dh = sh * scale;\n      const offset_y = dh - 16 * scale;\n      const offset_x = (16 * scale - dw) >> 1;\n\n      if (dx + dw > 0 && dx < render.ctx.canvas.width &&\n        dy - offset_y + dh > 0 && dy - offset_y < render.ctx.canvas.height) {\n        if (tile.isAnim && tile.numOfFrames > 1) {\n          const sf = Math.floor(time / 100) % tile.numOfFrames;\n          const sx = tile.x + sw * sf;\n          const sy = tile.y;\n          render.ctx.drawImage(tile.tileSet, sx, sy, sw, sh, dx + offset_x, dy - offset_y, dw, dh);\n        } else {\n          const sx = tile.x;\n          const sy = tile.y;\n          render.ctx.drawImage(tile.tileSet, sx, sy, sw, sh, dx + offset_x, dy - offset_y, dw, dh);\n        }\n      }\n    }\n  }\n}\n//\n// (async function () {\n//\n//   // https://0x72.itch.io/dungeontileset-ii\n//\n//   const registry = new TileRegistry();\n//   await registry.load();\n//\n//   const render = new Render();\n//   const canvas = render.canvas;\n//   const ctx = render.ctx;\n//\n//   const buffer = render.buffer;\n//   const b_ctx = render.b_ctx;\n//\n//   const start = new Date().getTime();\n//   const rng = new RNG();\n//   const joystick = new Joystick();\n//   const hero_weapon = WeaponConfig.configs[0].create(registry);\n//   const hero = new HeroMonster(registry, joystick, 0, 0, \"knight_f\", hero_weapon, start);\n//   const scene = new Scene();\n//   this.setLevel(new Level(rng, registry, scene, hero, 1, start));\n//\n//   const scale = 2;\n//\n//\n// })();","import {Inventory} from \"./inventory\";\nimport {Tile, TileRegistry} from \"./tilemap\";\nimport {Joystick} from \"./input\";\nimport {Monster, MonsterState, MovingMonsterWrapper} from \"./monster\";\nimport {Level} from \"./level\";\nimport {Weapon} from \"./drop\";\n\nexport const heroMonsterNames = [\n  \"elf_f\",\n  \"elf_m\",\n  \"knight_f\",\n  \"knight_m\",\n  \"wizard_f\",\n  \"wizard_m\",\n];\n\nexport class HeroMonster implements Monster {\n  private registry: TileRegistry;\n  private joystick: Joystick;\n  x: number;\n  y: number;\n  new_x: number;\n  new_y: number;\n  is_left: boolean;\n  readonly name: string;\n  readonly healthMax: number;\n  health: number;\n  coins: number;\n  private readonly baseDamage: number;\n  dead: boolean;\n  weapon: Weapon;\n  readonly speed: number;\n  readonly inventory: Inventory;\n  private level: Level;\n  state: MonsterState;\n  tile: Tile;\n  frame: number;\n  start: number;\n\n  constructor(registry: TileRegistry, joystick: Joystick, x: number, y: number, name: string, weapon: Weapon, time: number) {\n    this.registry = registry;\n    this.joystick = joystick;\n    this.x = x;\n    this.y = y;\n    this.new_x = x;\n    this.new_y = y;\n    this.is_left = false;\n    this.name = name;\n    this.healthMax = 30;\n    this.health = this.healthMax;\n    this.coins = 0;\n    this.baseDamage = 1;\n    this.dead = false;\n    this.weapon = weapon;\n    this.speed = 100;\n    this.inventory = new Inventory();\n    this.setAnimation(MonsterState.Idle, time);\n  }\n\n  get damage(): number {\n    return this.baseDamage + (this.weapon ? this.weapon.damage : 0);\n  }\n\n  setLevel(level: Level) {\n    this.level = level;\n  };\n\n  setAnimation(state: MonsterState, time: number) {\n    switch (state) {\n      case MonsterState.Idle:\n        this.state = state;\n        this.tile = this.registry.get(this.name + \"_idle_anim\");\n        this.frame = 0;\n        this.start = time;\n        break;\n      case MonsterState.Run:\n        if (!this.dead) {\n          this.state = state;\n          this.tile = this.registry.get(this.name + \"_run_anim\");\n          this.frame = 0;\n          this.start = time;\n        }\n        break;\n      case MonsterState.Hit:\n        if (!this.dead) {\n          this.state = state;\n          this.tile = this.registry.get(this.name + \"_hit_anim\");\n          this.frame = 0;\n          if (this.weapon) {\n            this.weapon.frame = 0;\n          }\n          this.start = time;\n        }\n        break;\n    }\n  }\n\n  animate(time: number) {\n    switch (this.state) {\n      case MonsterState.Idle:\n        this.frame = Math.floor((time - this.start) / this.speed);\n        if (!this.action(time)) {\n          if (this.frame >= this.tile.numOfFrames) {\n            this.setAnimation(MonsterState.Idle, time);\n          }\n        }\n        break;\n      case MonsterState.Run:\n        this.frame = Math.floor((time - this.start) / this.speed);\n        if (this.frame >= this.tile.numOfFrames) {\n          this.level.monsters[this.y][this.x] = null;\n          this.level.monsters[this.new_y][this.new_x] = this;\n          this.x = this.new_x;\n          this.y = this.new_y;\n          this.scanDrop();\n          if (!this.action(time)) {\n            this.setAnimation(MonsterState.Idle, time);\n          }\n        }\n        break;\n      case MonsterState.Hit:\n        if (this.weapon) {\n          this.weapon.frame = Math.floor((time - this.start) / this.weapon.speed);\n          if (this.weapon.frame >= this.weapon.numOfFrames) {\n            this.scanHit(time);\n            this.scanDrop();\n            if (!this.action(time)) {\n              this.setAnimation(MonsterState.Idle, time);\n            }\n          }\n        } else {\n          this.frame = Math.floor((time - this.start) / this.speed);\n          if (this.frame >= this.tile.numOfFrames) {\n            this.scanHit(time);\n            this.scanDrop();\n            if (!this.action(time)) {\n              this.setAnimation(MonsterState.Idle, time);\n            }\n          }\n        }\n        break;\n    }\n  };\n\n  action(time: number) {\n    if (!this.dead) {\n      this.scanDrop();\n      for (let d = 0; d < 10; d++) {\n        const digit = (d + 1) % 10;\n        if (!this.joystick.digit(digit).processed) {\n          this.joystick.digit(digit).processed = true;\n          this.inventory.cells[d].use(this);\n        }\n      }\n      if (!this.joystick.drop.processed) {\n        this.joystick.drop.processed = true;\n        this.dropWeapon();\n      }\n\n      if (this.joystick.hit.triggered && !this.joystick.hit.processed) {\n        if (this.level.floor[this.y][this.x].name === \"floor_ladder\") {\n          this.joystick.hit.processed = true;\n          this.level.exit(time);\n          return true;\n        } else {\n          this.setAnimation(MonsterState.Hit, time);\n          return true;\n        }\n      }\n      if (this.joystick.moveUp.triggered || !this.joystick.moveUp.processed) {\n        this.joystick.moveUp.processed = true;\n        if (this.move(0, -1, time)) {\n          return true;\n        }\n      }\n      if (this.joystick.moveDown.triggered || !this.joystick.moveDown.processed) {\n        this.joystick.moveDown.processed = true;\n        if (this.move(0, 1, time)) {\n          return true;\n        }\n      }\n      if (this.joystick.moveLeft.triggered || !this.joystick.moveLeft.processed) {\n        this.joystick.moveLeft.processed = true;\n        this.is_left = true;\n        if (this.move(-1, 0, time)) {\n          return true;\n        }\n      }\n      if (this.joystick.moveRight.triggered || !this.joystick.moveRight.processed) {\n        this.joystick.moveRight.processed = true;\n        this.is_left = false;\n        if (this.move(1, 0, time)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  };\n\n  dropWeapon() {\n    if (this.weapon) {\n      const max_distance = 5;\n      let left_x = this.x;\n      let right_x = this.x;\n      let min_y = this.y;\n      let max_y = this.y;\n      // find free floor cell;\n\n      // scan from center by x\n      for (let dist_x = 0; dist_x < max_distance; dist_x++) {\n        left_x--;\n        right_x++;\n        min_y--;\n        max_y++;\n\n        // scan from center by y\n        let t_y = this.y;\n        let b_y = this.y;\n        for (let dist_y = 0; dist_y <= dist_x; dist_y++) {\n          let scan_x = this.is_left ? [left_x, right_x] : [right_x, left_x];\n          let scan_y = [t_y, b_y];\n\n          for (let i = 0; i < 2; i++) {\n            let s_x = scan_x[i];\n            for (let j = 0; j < 2; j++) {\n              let s_y = scan_y[j];\n              if (s_x >= 0 && s_y >= 0) {\n                if (!this.level.drop[s_y][s_x] && this.level.floor[s_y][s_x]) {\n                  const drop = this.weapon;\n                  this.weapon = null;\n                  this.level.drop[s_y][s_x] = drop;\n                  return;\n                }\n              }\n            }\n          }\n\n          t_y--;\n          b_y++;\n        }\n\n        // after reach max y, scan to center by x\n        for (let dist_r = 0; dist_r < dist_x; dist_x++) {\n          left_x++;\n          right_x--;\n\n          let scan_x = this.is_left ? [left_x, right_x] : [right_x, left_x];\n          let scan_y = [t_y, b_y];\n\n          for (let i = 0; i < 2; i++) {\n            let s_x = scan_x[i];\n            for (let j = 0; j < 2; j++) {\n              let s_y = scan_y[j];\n              if (s_x >= 0 && s_y >= 0) {\n                if (!this.level.drop[s_y][s_x] && this.level.floor[s_y][s_x]) {\n                  const drop = this.weapon;\n                  this.weapon = null;\n                  this.level.drop[s_y][s_x] = drop;\n                  return;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  scanDrop() {\n    if (this.level.drop[this.y][this.x]) {\n      const drop = this.level.drop[this.y][this.x];\n      if (drop.pickedUp(this)) {\n        this.level.drop[this.y][this.x] = null;\n      }\n    }\n  };\n\n  scanHit(time: number) {\n    const max_distance = this.weapon ? this.weapon.distance : 1;\n    // search only left or right path\n    const scan_x_min = this.is_left ? Math.max(0, this.x - max_distance) : this.x;\n    const scan_x_max = this.is_left ? this.x : Math.min(this.level.w, this.x + max_distance);\n\n    const scan_y_min = Math.max(0, this.y - max_distance);\n    const scan_y_max = Math.min(this.level.h, this.y + max_distance);\n\n    for (let s_y = scan_y_min; s_y <= scan_y_max; s_y++) {\n      for (let s_x = scan_x_min; s_x <= scan_x_max; s_x++) {\n        // not self\n        if (!(s_x === this.x && s_y === this.y)) {\n          const monster = this.level.monsters[s_y][s_x];\n          if (monster) {\n            monster.hitDamage(this.damage, this.name, time);\n          }\n        }\n      }\n    }\n  };\n\n  move(d_x: number, d_y: number, time: number) {\n    if (!this.dead && this.state === MonsterState.Idle) {\n      const new_x = this.x + d_x;\n      const new_y = this.y + d_y;\n\n      // check is floor exists\n      if (!this.level.floor[new_y][new_x]) return false;\n\n      // check is no monster\n      if (this.level.monsters[new_y][new_x]) return false;\n\n      // start move animation\n      this.level.monsters[new_y][new_x] = new MovingMonsterWrapper(this); // mark as used\n      this.new_x = new_x;\n      this.new_y = new_y;\n      this.setAnimation(MonsterState.Run, time);\n      return true;\n    }\n    return false;\n  };\n\n  resetPosition(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n    this.new_x = x;\n    this.new_y = y;\n  };\n\n  hitDamage(damage: number, name: string, time: number) {\n    if (!this.dead) {\n      this.level.log.push(`${this.name} damaged ${damage} by ${name}`);\n      this.health = Math.max(0, this.health - damage);\n      if (this.health <= 0) {\n        this.level.log.push(`${this.name} killed by ${name}`);\n        this.setAnimation(MonsterState.Idle, time);\n        this.dead = true;\n      }\n    }\n  };\n\n  hill(health: number) {\n    this.health = Math.min(this.healthMax, this.health + health);\n  };\n\n  addCoins(coins: number) {\n    this.coins = this.coins + coins;\n  };\n}","enum KeyBindState {Await = 1, Pressed = 2}\n\nexport class KeyBind {\n  private readonly code: string;\n  private state: KeyBindState;\n  triggered: boolean;\n  processed: boolean;\n\n  constructor(code: string) {\n    this.code = code;\n    this.state = KeyBindState.Await;\n    this.triggered = false;\n    this.processed = true;\n  }\n\n  keydown(e: KeyboardEvent) {\n    if (e.code === this.code) {\n      e.preventDefault();\n      if (this.state === KeyBindState.Await) {\n        this.triggered = true;\n        this.processed = false;\n        this.state = KeyBindState.Pressed;\n      }\n    }\n  }\n\n  keyup(e: KeyboardEvent) {\n    if (e.code === this.code) {\n      e.preventDefault();\n      if (this.state === KeyBindState.Pressed) {\n        this.triggered = false;\n        this.state = KeyBindState.Await;\n      }\n    }\n  }\n}\n\nexport class Joystick {\n  readonly moveUp: KeyBind;\n  readonly moveLeft: KeyBind;\n  readonly moveDown: KeyBind;\n  readonly moveRight: KeyBind;\n  readonly hit: KeyBind;\n  readonly drop: KeyBind;\n  readonly digit1: KeyBind;\n  readonly digit2: KeyBind;\n  readonly digit3: KeyBind;\n  readonly digit4: KeyBind;\n  readonly digit5: KeyBind;\n  readonly digit6: KeyBind;\n  readonly digit7: KeyBind;\n  readonly digit8: KeyBind;\n  readonly digit9: KeyBind;\n  readonly digit0: KeyBind;\n\n  constructor() {\n    this.moveUp = new KeyBind('KeyW');\n    this.moveLeft = new KeyBind('KeyA');\n    this.moveDown = new KeyBind('KeyS');\n    this.moveRight = new KeyBind('KeyD');\n    this.hit = new KeyBind('KeyF');\n    this.drop = new KeyBind('KeyQ');\n\n    this.digit1 = new KeyBind('Digit1');\n    this.digit2 = new KeyBind('Digit2');\n    this.digit3 = new KeyBind('Digit3');\n    this.digit4 = new KeyBind('Digit4');\n    this.digit5 = new KeyBind('Digit5');\n    this.digit6 = new KeyBind('Digit6');\n    this.digit7 = new KeyBind('Digit7');\n    this.digit8 = new KeyBind('Digit8');\n    this.digit9 = new KeyBind('Digit9');\n    this.digit0 = new KeyBind('Digit0');\n    this.init();\n  }\n\n  digit(num: number): KeyBind {\n    switch (num) {\n      case 1: return this.digit1;\n      case 2: return this.digit2;\n      case 3: return this.digit3;\n      case 4: return this.digit4;\n      case 5: return this.digit5;\n      case 6: return this.digit6;\n      case 7: return this.digit7;\n      case 8: return this.digit8;\n      case 9: return this.digit9;\n      case 0: return this.digit0;\n    }\n  }\n\n  init() {\n    window.addEventListener(\"keydown\", this.keydown.bind(this));\n    window.addEventListener(\"keyup\", this.keyup.bind(this));\n  };\n\n  keydown(e: KeyboardEvent) {\n    this.moveUp.keydown(e);\n    this.moveLeft.keydown(e);\n    this.moveDown.keydown(e);\n    this.moveRight.keydown(e);\n    this.hit.keydown(e);\n    this.drop.keydown(e);\n    this.digit1.keydown(e);\n    this.digit2.keydown(e);\n    this.digit3.keydown(e);\n    this.digit4.keydown(e);\n    this.digit5.keydown(e);\n    this.digit6.keydown(e);\n    this.digit7.keydown(e);\n    this.digit8.keydown(e);\n    this.digit9.keydown(e);\n    this.digit0.keydown(e);\n  };\n\n  keyup(e: KeyboardEvent) {\n    this.moveUp.keyup(e);\n    this.moveLeft.keyup(e);\n    this.moveDown.keyup(e);\n    this.moveRight.keyup(e);\n    this.hit.keyup(e);\n    this.drop.keyup(e);\n    this.digit1.keyup(e);\n    this.digit2.keyup(e);\n    this.digit3.keyup(e);\n    this.digit4.keyup(e);\n    this.digit5.keyup(e);\n    this.digit6.keyup(e);\n    this.digit7.keyup(e);\n    this.digit8.keyup(e);\n    this.digit9.keyup(e);\n    this.digit0.keyup(e);\n  };\n}","import {UsableDrop} from \"./drop\";\nimport {HeroMonster} from \"./hero\";\n\nexport class Inventory {\n  readonly cells: InventoryCell[];\n\n  constructor() {\n    this.cells = [];\n    for (let i = 0; i < 10; i++) {\n      this.cells[i] = new InventoryCell();\n    }\n  }\n\n  add(item: UsableDrop) {\n    for (let i = 0; i < this.cells.length; i++) {\n      if (this.cells[i].stack(item)) {\n        return true;\n      }\n    }\n    for (let i = 0; i < this.cells.length; i++) {\n      if (this.cells[i].set(item)) {\n        return true;\n      }\n    }\n    return false;\n  };\n}\n\nexport class InventoryCell {\n  private readonly maxInStack: number;\n  item: UsableDrop;\n  count: number;\n\n  constructor() {\n    this.maxInStack = 3;\n    this.item = null;\n    this.count = 0;\n  }\n\n  stack(item: UsableDrop) {\n    if (this.item && this.item.same(item) && this.count < this.maxInStack) {\n      this.count++;\n      return true;\n    }\n    return false;\n  };\n\n  set(item: UsableDrop) {\n    if (!this.item) {\n      this.item = item;\n      this.count = 1;\n      return true;\n    }\n    return false;\n  };\n\n  use(hero: HeroMonster) {\n    if (this.item && this.count > 0) {\n      this.item.use(this, hero);\n      return true;\n    }\n    return false;\n  };\n}","import {TinyMonster, tinyMonsterNames} from \"./tiny.monster\";\nimport {Coins, Drop, HealthBigFlask, HealthFlask, WeaponConfig} from \"./drop\";\nimport {RNG} from \"./rng\";\nimport {Tile, TileRegistry} from \"./tilemap\";\nimport {HeroMonster} from \"./hero\";\nimport {Monster} from \"./monster\";\nimport {BossMonster, mossMonsterNames} from \"./boss.monster\";\nimport {DungeonScene} from \"./dungeon\";\n\nconst x_dist = 2;\nconst y_dist = 3;\n\nexport class Rect {\n  readonly x: number;\n  readonly y: number;\n  readonly w: number;\n  readonly h: number;\n\n  constructor(x: number, y: number, w: number, h: number) {\n    this.x = x;\n    this.y = y;\n    this.w = w;\n    this.h = h;\n  }\n\n  expand() {\n    const a = this;\n    return new Rect(\n      a.x - x_dist,\n      a.y - y_dist,\n      a.w + x_dist + x_dist,\n      a.h + y_dist + y_dist\n    );\n  }\n\n  expandV() {\n    const a = this;\n    return new Rect(\n      a.x - x_dist,\n      a.y,\n      a.w + x_dist + x_dist,\n      a.h\n    );\n  }\n\n  expandH() {\n    const a = this;\n    return new Rect(\n      a.x,\n      a.y - y_dist,\n      a.w,\n      a.h + y_dist + y_dist\n    );\n  }\n\n  isOverlap(b: Rect) {\n    const a = this;\n    return a.x < b.x + b.w\n      && a.x + a.w > b.x\n      && a.y < b.y + b.h\n      && a.y + a.h > b.y;\n  }\n}\n\nexport class Level {\n  private readonly rng: RNG;\n  private readonly registry: TileRegistry;\n  private readonly scene: DungeonScene;\n  readonly level: number;\n  readonly w: number;\n  readonly h: number;\n  log: string[];\n  private readonly rooms: Rect[];\n  private readonly corridorsV: Rect[];\n  private readonly corridorsH: Rect[];\n  readonly floor: Tile[][];\n  readonly drop: Drop[][];\n  readonly wall: Tile[][];\n\n  boss: BossMonster;\n  monsterList: TinyMonster[];\n  readonly hero: HeroMonster;\n  readonly monsters: Monster[][];\n\n  constructor(rng: RNG, registry: TileRegistry, scene: DungeonScene, hero: HeroMonster, l: number, time: number) {\n    this.rng = rng;\n    this.registry = registry;\n    this.scene = scene;\n    this.level = l;\n    this.w = 200;\n    this.h = 120;\n\n    this.log = [];\n    this.rooms = [];\n    this.corridorsV = [];\n    this.corridorsH = [];\n\n    this.floor = this.createBuffer(() => null);\n    this.drop = this.createBuffer(() => null);\n    this.wall = this.createBuffer(() => null);\n\n    this.monsterList = [];\n    this.hero = hero;\n    this.monsters = this.createBuffer(() => null);\n\n    this.generate(time);\n    this.fill();\n    this.replace();\n  }\n\n  createBuffer<T>(defaultValue: () => T): T[][] {\n    const rows: T[][] = [];\n    for (let y = 0; y < this.h; y++) {\n      const row: T[] = [];\n      rows.push(row);\n      for (let x = 0; x < this.w; x++) {\n        row.push(defaultValue());\n      }\n    }\n    return rows;\n  };\n\n  generate(time: number) {\n    const rooms_total = 1 + this.level;\n    const monsters_total = 3 + this.level;\n    const drop_total = 5 + this.level;\n    const is_boss = this.level % 5 === 0;\n\n    // create rooms\n    for (let r = 0; r < rooms_total; r++) {\n      this.generateRoom();\n    }\n\n    // create monsters\n    const max_room = this.rooms.length - (is_boss ? 1 : 0);\n    if (max_room > 1) {\n      for (let m = 0; m < monsters_total; m++) {\n        const r = this.rng.nextRange(1, max_room);\n        const room = this.rooms[r];\n        for (let t = 0; t < 10; t++) {\n          const x = room.x + this.rng.nextRange(0, room.w);\n          const y = room.y + this.rng.nextRange(0, room.h);\n          if (!this.monsters[y][x]) {\n            const name = this.rng.choice(tinyMonsterNames);\n            const monster = new TinyMonster(this.rng, this.registry, this, x, y, name, time);\n            this.monsterList.push(monster);\n            this.monsters[y][x] = monster;\n            break;\n          }\n        }\n      }\n    }\n\n    // generate boss\n    if (is_boss) {\n      const room = this.rooms[this.rooms.length - 1];\n      for (let t = 0; t < 10; t++) {\n        const x = room.x + this.rng.nextRange(1, room.w);\n        const y = room.y + this.rng.nextRange(1, room.h);\n        if (\n          !this.monsters[y][x] && !this.monsters[y][x + 1] &&\n          !this.monsters[y - 1][x] && !this.monsters[y - 1][x + 1]\n        ) {\n          const name = mossMonsterNames[Math.floor(this.level / 5) % mossMonsterNames.length];\n          const monster = new BossMonster(this.rng, this.registry, this, x, y, name, time);\n          this.boss = monster;\n          this.monsters[y][x] = monster;\n          break;\n        }\n      }\n    }\n\n    // create drop\n    for (let d = 0; d < drop_total; d++) {\n      const room = this.rng.choice(this.rooms);\n      for (let t = 0; t < 10; t++) {\n        const x = room.x + this.rng.nextRange(0, room.w);\n        const y = room.y + this.rng.nextRange(0, room.h);\n        if (!this.drop[y][x]) {\n          this.randomDrop(x, y);\n          break;\n        }\n      }\n    }\n\n    // position of hero\n    {\n      const room = this.rooms[0];\n      const hero_x = room.x + (room.w >> 1);\n      const hero_y = room.y + (room.h >> 1);\n      this.hero.setLevel(this);\n      this.hero.resetPosition(hero_x, hero_y);\n      this.monsters[hero_y][hero_x] = this.hero;\n    }\n  };\n\n  generateRoom() {\n    const room_min_w = 5;\n    const room_min_h = 3;\n    const room_max_w = 15;\n    const room_max_h = 10;\n    const room_min_x = 2;\n    const room_min_y = 2;\n\n    const max_corr_dist = 12;\n\n    for (let retry = 0; retry < 1000; retry++) {\n      const room_w = this.rng.nextRange(room_min_w, room_max_w);\n      const room_h = this.rng.nextRange(room_min_h, room_max_h);\n\n      const room = new Rect(\n        this.rng.nextRange(room_min_x, this.w - 2 - room_w),\n        this.rng.nextRange(room_min_y, this.h - 2 - room_h),\n        room_w,\n        room_h\n      );\n\n      if (!this.isOverlap(room.expand())) {\n        // free position found\n        if (this.rooms.length === 0) {\n          this.rooms.push(room);\n          break;\n        } else {\n          // find connection\n          const a = room;\n          let connected = false;\n\n          // find closest room\n          for (let i = 0; i < this.rooms.length; i++) {\n            let b = this.rooms[i];\n\n            // try calculate horizontal distance\n            const max_x = Math.max(a.x, b.x);\n            const min_x_w = Math.min(a.x + a.w, b.x + b.w);\n            if (max_x + 5 <= min_x_w) {\n              let rect;\n              if (a.y + a.h < b.y) {\n                rect = new Rect(\n                  max_x + 2,\n                  a.y + a.h,\n                  min_x_w - max_x - 4,\n                  b.y - a.y - a.h\n                );\n              } else {\n                rect = new Rect(\n                  max_x + 2,\n                  b.y + b.h,\n                  min_x_w - max_x - 4,\n                  a.y - b.y - b.h\n                );\n              }\n              if (rect.h < max_corr_dist && !this.isOverlap(rect.expandV())) {\n                this.corridorsV.push(rect);\n                connected = true;\n              }\n            }\n\n            // try calculate vertical distance\n            const max_y = Math.max(a.y, b.y);\n            const min_y_h = Math.min(a.y + a.h, b.y + b.h);\n            if (max_y + 3 <= min_y_h) {\n              let rect;\n              if (a.x + a.w < b.x) {\n                rect = new Rect(\n                  a.x + a.w,\n                  max_y + 1,\n                  b.x - a.x - a.w,\n                  min_y_h - max_y - 2\n                );\n              } else {\n                rect = new Rect(\n                  b.x + b.w,\n                  max_y + 1,\n                  a.x - b.x - b.w,\n                  min_y_h - max_y - 2,\n                );\n              }\n              if (rect.w < max_corr_dist && !this.isOverlap(rect.expandH())) {\n                this.corridorsH.push(rect);\n                connected = true;\n              }\n            }\n          }\n\n          if (connected) {\n            console.log(\"add room\", room);\n            this.rooms.push(room);\n            break;\n          }\n        }\n      }\n    }\n  }\n\n  isOverlap(a: Rect) {\n    const f = a.isOverlap.bind(a);\n    return this.rooms.some(f) ||\n      this.corridorsV.some(f) ||\n      this.corridorsH.some(f);\n  };\n\n  randomDrop(x: number, y: number) {\n    const weight_coins = 30;\n    const weight_health_flask = 10;\n    const weight_health_big_flask = 10;\n    const weight_weapon = 3;\n\n    const total = weight_coins + weight_health_flask + weight_health_big_flask + weight_weapon;\n    const rnd = this.rng.nextFloat() * total;\n\n    if (rnd < weight_weapon) {\n      const available = WeaponConfig.configs.filter(c => c.level <= this.level);\n      this.drop[y][x] = this.rng.choice(available).create(this.registry);\n    } else if (rnd < weight_health_big_flask) {\n      this.drop[y][x] = new HealthBigFlask(this.registry);\n    } else if (rnd < weight_health_flask) {\n      this.drop[y][x] = new HealthFlask(this.registry);\n    } else if (rnd < weight_coins) {\n      this.drop[y][x] = new Coins(this.rng, this.registry);\n    }\n  };\n\n  fill() {\n    this.rooms.forEach(r => this.fillRoom(r.x, r.y, r.w, r.h));\n    this.corridorsH.forEach(r => this.fillCorridorH(r.x, r.y, r.w, r.h));\n    this.corridorsV.forEach(r => this.fillCorridorV(r.x, r.y, r.w, r.h));\n  };\n\n  fillRoom(x: number, y: number, w: number, h: number) {\n    // fill floor\n    for (let r_y = y; r_y < y + h; r_y++) {\n      for (let r_x = x; r_x < x + w; r_x++) {\n        this.floor[r_y][r_x] = this.registry.get(\"floor_1\");\n      }\n    }\n    // fill top wall\n    this.wall[y - 2][x] = this.registry.get(\"wall_corner_top_left\");\n    this.wall[y - 1][x] = this.registry.get(\"wall_corner_left\");\n    if (w > 1) {\n      for (let r_x = x + 1; r_x < x + w - 1; r_x++) {\n        this.wall[y - 2][r_x] = this.registry.get(\"wall_top_mid\");\n        this.wall[y - 1][r_x] = this.registry.get(\"wall_mid\");\n      }\n      this.wall[y - 2][x + w - 1] = this.registry.get(\"wall_corner_top_right\");\n      this.wall[y - 1][x + w - 1] = this.registry.get(\"wall_corner_right\");\n    }\n    // fill bottom wall\n    this.wall[y + h - 1][x] = this.registry.get(\"wall_corner_bottom_left\");\n    this.wall[y + h][x] = this.registry.get(\"wall_left\");\n    if (w > 1) {\n      for (let r_x = x + 1; r_x < x + w - 1; r_x++) {\n        this.wall[y + h - 1][r_x] = this.registry.get(\"wall_top_mid\");\n        this.wall[y + h][r_x] = this.registry.get(\"wall_mid\");\n      }\n      this.wall[y + h - 1][x + w - 1] = this.registry.get(\"wall_corner_bottom_right\");\n      this.wall[y + h][x + w - 1] = this.registry.get(\"wall_right\");\n    }\n    // fill right wall\n    for (let r_y = y; r_y < y + h - 1; r_y++) {\n      this.wall[r_y][x] = this.registry.get(\"wall_side_mid_right\");\n    }\n    // fill left wall\n    for (let r_y = y; r_y < y + h - 1; r_y++) {\n      this.wall[r_y][x + w - 1] = this.registry.get(\"wall_side_mid_left\");\n    }\n  };\n\n  fillCorridorH(x: number, y: number, w: number, h: number) {\n    // fill floor\n    for (let r_y = y; r_y < y + h; r_y++) {\n      for (let r_x = x; r_x < x + w; r_x++) {\n        this.floor[r_y][r_x] = this.registry.get(\"floor_1\");\n      }\n    }\n\n    // connect with room top left\n    switch (this.wall[y - 2][x - 1].name) {\n      case \"wall_corner_top_right\":\n        this.wall[y - 2][x - 1] = this.registry.get(\"wall_top_mid\");\n        break;\n      case \"wall_side_mid_left\":\n        break;\n      default:\n        console.log(\"top left 2\", this.wall[y - 2][x - 1]);\n        break;\n    }\n    switch (this.wall[y - 1][x - 1].name) {\n      case \"wall_corner_right\":\n        this.wall[y - 1][x - 1] = this.registry.get(\"wall_mid\");\n        break;\n      case \"wall_side_mid_left\":\n        this.wall[y - 1][x - 1] = this.registry.get(\"wall_side_front_left\");\n        break;\n      default:\n        console.log(\"top left 1\", this.wall[y - 1][x - 1]);\n        break;\n    }\n\n    // connect with room mid left\n    if (h > 1) {\n      for (let l_y = y; l_y < y + h - 1; l_y++) {\n        switch (this.wall[l_y][x - 1].name) {\n          case \"wall_side_mid_left\":\n            this.wall[l_y][x - 1] = null;\n            break;\n          default:\n            console.log(\"mid left\", this.wall[l_y][x - 1]);\n            break;\n        }\n      }\n    }\n\n    // connect with room bottom left\n    switch (this.wall[y + h - 1][x - 1].name) {\n      case \"wall_side_mid_left\":\n        this.wall[y + h - 1][x - 1] = this.registry.get(\"wall_side_top_left\");\n        break;\n      case \"wall_corner_bottom_right\":\n        this.wall[y + h - 1][x - 1] = this.registry.get(\"wall_top_mid\");\n        break;\n      default:\n        console.log(\"bottom left 0\", this.wall[y + h - 1][x - 1]);\n        break;\n    }\n    switch (this.wall[y + h][x - 1].name) {\n      case \"wall_side_mid_left\":\n        break;\n      case \"wall_right\":\n        this.wall[y + h][x - 1] = this.registry.get(\"wall_mid\");\n        break;\n      default:\n        console.log(\"bottom left 1\", this.wall[y + h][x - 1]);\n        break;\n    }\n\n    // connect with room top right\n    switch (this.wall[y - 2][x + w].name) {\n      case \"wall_corner_top_left\":\n        this.wall[y - 2][x + w] = this.registry.get(\"wall_top_mid\");\n        break;\n      case \"wall_side_mid_right\":\n        break;\n      default:\n        console.log(\"top right 2\", this.wall[y - 2][x + w]);\n        break;\n    }\n    switch (this.wall[y - 1][x + w].name) {\n      case \"wall_corner_left\":\n        this.wall[y - 1][x + w] = this.registry.get(\"wall_mid\");\n        break;\n      case \"wall_side_mid_right\":\n        this.wall[y - 1][x + w] = this.registry.get(\"wall_side_front_right\");\n        break;\n      default:\n        console.log(\"top right 1\", this.wall[y - 1][x + w]);\n        break;\n    }\n\n    // connect with room mid right\n    if (h > 1) {\n      for (let l_y = y; l_y < y + h - 1; l_y++) {\n        switch (this.wall[l_y][x + w].name) {\n          case \"wall_side_mid_right\":\n            this.wall[l_y][x + w] = null;\n            break;\n          default:\n            console.log(\"mid right\", this.wall[l_y][x + w]);\n            break;\n        }\n      }\n    }\n\n    // connect with room bottom right\n    switch (this.wall[y + h - 1][x + w].name) {\n      case \"wall_side_mid_right\":\n        this.wall[y + h - 1][x + w] = this.registry.get(\"wall_side_top_right\");\n        break;\n      case \"wall_corner_bottom_left\":\n        this.wall[y + h - 1][x + w] = this.registry.get(\"wall_top_mid\");\n        break;\n      default:\n        console.log(\"bottom right 0\", this.wall[y + h - 1][x + w]);\n        break;\n    }\n    switch (this.wall[y + h][x + w].name) {\n      case \"wall_side_mid_right\":\n        break;\n      case \"wall_left\":\n        this.wall[y + h][x + w] = this.registry.get(\"wall_mid\");\n        break;\n      default:\n        console.log(\"bottom right +1\", this.wall[y + h][x + w]);\n        break;\n    }\n\n    // fill top wall\n    for (let r_x = x; r_x < x + w; r_x++) {\n      this.wall[y - 2][r_x] = this.registry.get(\"wall_top_mid\");\n      this.wall[y - 1][r_x] = this.registry.get(\"wall_mid\");\n    }\n\n    // fill bottom wall\n    for (let r_x = x; r_x < x + w; r_x++) {\n      this.wall[y + h - 1][r_x] = this.registry.get(\"wall_top_mid\");\n      this.wall[y + h][r_x] = this.registry.get(\"wall_mid\");\n    }\n  };\n\n  fillCorridorV(x: number, y: number, w: number, h: number) {\n    // fill floor\n    for (let r_y = y; r_y < y + h; r_y++) {\n      for (let r_x = x; r_x < x + w; r_x++) {\n        this.floor[r_y][r_x] = this.registry.get(\"floor_1\");\n      }\n    }\n\n    // connect with room top left\n    switch (this.wall[y - 1][x - 1].name) {\n      case \"wall_top_mid\":\n        this.wall[y - 1][x - 1] = this.registry.get(\"wall_corner_top_right\");\n        break;\n      default:\n        console.log(\"top left -1 -1\", this.wall[y - 1][x - 1]);\n        break;\n    }\n    switch (this.wall[y][x - 1].name) {\n      case \"wall_mid\":\n        this.wall[y][x - 1] = this.registry.get(\"wall_corner_right\");\n        break;\n      default:\n        console.log(\"top left 0 -1\", this.wall[y][x - 1]);\n        break;\n    }\n\n    // connect with room top mid\n    for (let r_x = x; r_x < x + w; r_x++) {\n      switch (this.wall[y - 1][r_x].name) {\n        case \"wall_top_mid\":\n          this.wall[y - 1][r_x] = null;\n          break;\n        default:\n          console.log(\"top mid -1\", this.wall[y - 1][r_x]);\n          break;\n      }\n      switch (this.wall[y][r_x].name) {\n        case \"wall_mid\":\n          this.wall[y][r_x] = null;\n          break;\n        default:\n          console.log(\"top mid 0\", this.wall[y][r_x]);\n          break;\n      }\n    }\n\n    // connect with room top right\n    switch (this.wall[y - 1][x + w].name) {\n      case \"wall_top_mid\":\n        this.wall[y - 1][x + w] = this.registry.get(\"wall_corner_top_left\");\n        break;\n      default:\n        console.log(\"top right -1 1\", this.wall[y - 1][x + w]);\n        break;\n    }\n    switch (this.wall[y][x + w].name) {\n      case \"wall_mid\":\n        this.wall[y][x + w] = this.registry.get(\"wall_corner_left\");\n        break;\n      default:\n        console.log(\"top right 0 -1\", this.wall[y][x + w]);\n        break;\n    }\n\n\n    // connect with room bottom left\n    switch (this.wall[y + h - 2][x - 1].name) {\n      case \"wall_top_mid\":\n        this.wall[y + h - 2][x - 1] = this.registry.get(\"wall_corner_bottom_right\");\n        break;\n      default:\n        console.log(\"bottom left -2 -1\", this.wall[y + h - 2][x - 1]);\n        break;\n    }\n    switch (this.wall[y + h - 1][x - 1].name) {\n      case \"wall_mid\":\n        this.wall[y + h - 1][x - 1] = this.registry.get(\"wall_corner_front_right\");\n        break;\n      default:\n        console.log(\"top left 0 -1\", this.wall[y + h - 1][x - 1]);\n        break;\n    }\n\n    // connect with room bottom mid\n    for (let r_x = x; r_x < x + w; r_x++) {\n      switch (this.wall[y + h - 2][r_x].name) {\n        case \"wall_top_mid\":\n          this.wall[y + h - 2][r_x] = null;\n          break;\n        default:\n          console.log(\"bottom mid -2\", this.wall[y + h - 2][r_x]);\n          break;\n      }\n      switch (this.wall[y + h - 1][r_x].name) {\n        case \"wall_mid\":\n          this.wall[y + h - 1][r_x] = null;\n          break;\n        default:\n          console.log(\"bottom mid -1\", this.wall[y + h - 1][r_x]);\n          break;\n      }\n    }\n\n    // connect with room bottom right\n    switch (this.wall[y + h - 2][x + w].name) {\n      case \"wall_top_mid\":\n        this.wall[y + h - 2][x + w] = this.registry.get(\"wall_corner_bottom_left\");\n        break;\n      default:\n        console.log(\"bottom right -2 -1\", this.wall[y + h - 2][x - 1]);\n        break;\n    }\n    switch (this.wall[y + h - 1][x + w].name) {\n      case \"wall_mid\":\n        this.wall[y + h - 1][x + w] = this.registry.get(\"wall_corner_front_left\");\n        break;\n      default:\n        console.log(\"bottom right 0 -1\", this.wall[y + h - 1][x - 1]);\n        break;\n    }\n\n    // fill side walls\n    for (let r_y = y + 1; r_y < y + h - 2; r_y++) {\n      this.wall[r_y][x - 1] = this.registry.get(\"wall_side_mid_left\");\n      this.wall[r_y][x + w] = this.registry.get(\"wall_side_mid_right\");\n    }\n  };\n\n  replace() {\n    this.replaceFloorRandomly();\n    this.replaceLadder();\n    this.replaceWallRandomly();\n  };\n\n  replaceFloorRandomly() {\n    const replacements = [\"floor_2\", \"floor_3\", \"floor_4\", \"floor_5\", \"floor_6\", \"floor_7\", \"floor_8\"];\n    const percent = 0.2;\n    for (let y = 0; y < this.h; y++) {\n      for (let x = 0; x < this.w; x++) {\n        if (this.floor[y][x] && this.rng.nextFloat() < percent) {\n          this.floor[y][x] = this.registry.get(this.rng.choice(replacements));\n        }\n      }\n    }\n  };\n\n  replaceLadder() {\n    // replace one tile in last room as ladder = out from level!\n    const last = this.rooms[this.rooms.length - 1];\n\n    const ladder_x = last.x + (last.w >> 1);\n    const ladder_y = last.y + (last.h >> 1);\n    console.log(ladder_x, ladder_y, last);\n    this.floor[ladder_y][ladder_x] = this.registry.get(\"floor_ladder\");\n  };\n\n  replaceWallRandomly() {\n    const wall_mid_top_replaces = [\n      \"wall_hole_1\",\n      \"wall_hole_2\",\n      \"wall_banner_red\",\n      \"wall_banner_blue\",\n      \"wall_banner_green\",\n      \"wall_banner_yellow\",\n      \"wall_goo\",\n      \"wall_fountain_mid_red_anim\",\n      \"wall_fountain_mid_blue_anim\",\n    ];\n    const wall_mid_bottom_replaces = [\n      \"wall_hole_1\",\n      \"wall_hole_2\",\n    ];\n    const percent = 0.2;\n    for (let y = 0; y < this.h; y++) {\n      for (let x = 0; x < this.w; x++) {\n        if (this.wall[y][x]) {\n          switch (this.wall[y][x].name) {\n            case \"wall_mid\":\n              if (this.rng.nextFloat() < percent) {\n                const is_top = !!this.floor[y + 1][x];\n                let replacements: string[];\n                if (is_top) {\n                  replacements = wall_mid_top_replaces;\n                } else {\n                  replacements = wall_mid_bottom_replaces;\n                }\n                const replacement = this.rng.choice(replacements);\n                switch (replacement) {\n                  case \"wall_goo\":\n                    this.wall[y][x] = this.registry.get(\"wall_goo\");\n                    this.floor[y + 1][x] = this.registry.get(\"wall_goo_base\");\n                    break;\n                  case \"wall_fountain_mid_red_anim\":\n                    this.wall[y - 1][x] = this.registry.get(\"wall_fountain_top\");\n                    this.wall[y][x] = this.registry.get(\"wall_fountain_mid_red_anim\");\n                    this.floor[y + 1][x] = this.registry.get(\"wall_fountain_basin_red_anim\");\n                    break;\n                  case \"wall_fountain_mid_blue_anim\":\n                    this.wall[y - 1][x] = this.registry.get(\"wall_fountain_top\");\n                    this.wall[y][x] = this.registry.get(\"wall_fountain_mid_blue_anim\");\n                    this.floor[y + 1][x] = this.registry.get(\"wall_fountain_basin_blue_anim\");\n                    break;\n                  default:\n                    this.wall[y][x] = this.registry.get(replacement);\n                    break;\n                }\n              }\n              break;\n            default:\n              // console.log(\"replace\", this.wall[y][x]);\n              break;\n          }\n        }\n      }\n    }\n  };\n\n  exit(time: number) {\n    this.scene.setLevel(new Level(this.rng, this.registry, this.scene, this.hero, this.level + 1, time))\n  };\n\n  animate(time: number) {\n    this.hero.animate(time);\n    if(this.boss) this.boss.animate(time);\n    this.monsterList.forEach(m => m.animate(time));\n  };\n}","import {Tile} from \"./tilemap\";\nimport {Weapon} from \"./drop\";\n\nexport enum MonsterState {\n  Idle = 0, Run = 1, Hit = 2\n}\n\nexport interface Monster {\n  x: number\n  y: number\n  new_x: number\n  new_y: number\n  is_left: boolean\n  frame: number\n  start: number\n  speed: number\n  tile: Tile\n  state: MonsterState\n  weapon: Weapon\n  hitDamage(damage: number, name: string, time: number): void;\n  animate(time: number): void;\n}\n\nexport class MovingMonsterWrapper implements Monster {\n  private readonly monster: Monster;\n\n  constructor(monster: Monster) {\n    this.monster = monster;\n  }\n\n  hitDamage(damage: number, name: string, time: number) {\n    this.monster.hitDamage(damage, name, time);\n  }\n\n  get x(): number {\n    return this.monster.x;\n  }\n\n  get y(): number {\n    return this.monster.y;\n  }\n\n  get new_x(): number {\n    return this.monster.new_x;\n  }\n\n  get new_y(): number {\n    return this.monster.new_y;\n  }\n\n  get is_left(): boolean {\n    return this.monster.is_left;\n  }\n\n  get frame(): number {\n    return this.monster.frame;\n  }\n\n  get start(): number {\n    return this.monster.start;\n  }\n\n  get speed(): number {\n    return this.monster.speed;\n  }\n\n  get tile(): Tile {\n    return this.monster.tile;\n  }\n\n  get state(): MonsterState {\n    return this.monster.state;\n  }\n\n  get weapon(): Weapon {\n    return this.monster.weapon;\n  }\n\n  animate(time: number): void {\n  }\n}","export class Render {\n  readonly canvas: HTMLCanvasElement;\n  readonly ctx: CanvasRenderingContext2D;\n\n  readonly buffer: HTMLCanvasElement;\n  readonly b_ctx: CanvasRenderingContext2D;\n\n  constructor(id: string = \"dungeon\") {\n    this.canvas = document.getElementById(id) as HTMLCanvasElement;\n    this.ctx = this.canvas.getContext(\"2d\");\n    this.ctx.imageSmoothingEnabled = false;\n\n    this.buffer = document.createElement(\"canvas\");\n    this.b_ctx = this.buffer.getContext(\"2d\");\n    this.b_ctx.imageSmoothingEnabled = false;\n  }\n}","/**\n * https://stackoverflow.com/questions/424292/seedable-javascript-random-number-generator\n * LCG using GCC's constants\n */\n\nconst m = 0x80000000; // 2^31;\nconst a = 1103515245;\nconst c = 12345;\n\nexport class RNG {\n  private state: number;\n\n  constructor(seed: number = null) {\n    this.state = seed ? seed : Math.floor(Math.random() * (m - 1));\n    console.log(\"seed\", this.state);\n  }\n\n  nextInt(): number {\n    this.state = (a * this.state + c) % m;\n    return this.state;\n  }\n\n  nextFloat(): number {\n    return this.nextInt() / (m - 1);\n  }\n\n  nextRange(start: number, end: number): number {\n    const rangeSize = end - start;\n    const randomUnder1 = this.nextInt() / m;\n    return start + Math.floor(randomUnder1 * rangeSize);\n  }\n\n  choice<T>(array: T[]): T {\n    return array[this.nextRange(0, array.length)];\n  }\n}","import {Level} from \"./level\";\nimport {Render} from \"./render\";\n\nexport interface Scene {\n  render(render: Render): void;\n}\n\nexport class SceneController {\n  private scene: Scene;\n\n  setScene(scene: Scene) {\n    this.scene = scene;\n  }\n\n  render(render: Render) {\n    this.scene.render(render);\n  }\n}","// https://0x72.itch.io/dungeontileset-ii\n\nexport class TileRegistry {\n  private readonly tileMap: Record<string, Tile>;\n\n  constructor() {\n    this.tileMap = {};\n  }\n\n  async loadTileSet(): Promise<HTMLImageElement> {\n    return await new Promise<HTMLImageElement>((resolve => {\n      const img = new Image();\n      img.onload = ev => resolve(img);\n      img.src = \"0x72_DungeonTilesetII_v1.2.png\";\n    }));\n  }\n\n  async load() {\n    const tileSet = await this.loadTileSet();\n    const response = await fetch(\"tiles_list_v1.1.txt\");\n    const text = await response.text();\n    const lines = text.split(/(\\r?\\n)/g);\n    lines.forEach((line) => {\n      let m = line.match(/([a-z0-9_]+) +([0-9]+) +([0-9]+) +([0-9]+) +([0-9]+) ?([0-9]?)/);\n      if (m) {\n        const x = parseInt(m[2]);\n        const y = parseInt(m[3]);\n        const w = parseInt(m[4]);\n        const h = parseInt(m[5]);\n        const numOfFrames = parseInt(m[6] || \"0\");\n        const tile = new Tile(tileSet, m[1], x, y, w, h, numOfFrames);\n        this.tileMap[tile.name] = tile;\n      }\n    });\n  }\n\n  get(tileName: string): Tile {\n    return this.tileMap[tileName];\n  }\n}\n\nexport class Tile {\n  readonly tileSet: HTMLImageElement;\n  readonly name: string;\n  readonly x: number;\n  readonly y: number;\n  readonly w: number;\n  readonly h: number;\n  readonly numOfFrames: number;\n  readonly isAnim: boolean;\n\n  constructor(tileSet: HTMLImageElement, name: string, x: number, y: number, w: number, h: number, numOfFrames: number) {\n    this.tileSet = tileSet;\n    this.name = name;\n    this.x = x;\n    this.y = y;\n    this.w = w;\n    this.h = h;\n    this.numOfFrames = numOfFrames;\n    this.isAnim = this.numOfFrames > 1;\n  }\n}","import {RNG} from \"./rng\";\nimport {Tile, TileRegistry} from \"./tilemap\";\nimport {Level} from \"./level\";\nimport {Monster, MonsterState, MovingMonsterWrapper} from \"./monster\";\nimport {Weapon} from \"./drop\";\n\nexport const tinyMonsterNames = [\n  \"tiny_zombie\",\n  \"goblin\",\n  \"imp\",\n  \"skeleton\",\n  \"muddy\",\n  \"swampy\",\n  \"zombie\",\n  \"ice_zombie\",\n];\n\nexport class TinyMonster implements Monster {\n  private readonly rng: RNG;\n  private readonly registry: TileRegistry;\n  private readonly level: Level;\n  x: number;\n  y: number;\n  new_x: number;\n  new_y: number;\n  is_left: boolean;\n  private readonly name: string;\n  private readonly healthMax: number;\n  private health: number;\n  private readonly damage: number;\n  private readonly luck: number;\n  readonly speed: number;\n  state: MonsterState;\n  tile: Tile;\n  frame: number;\n  start: number;\n  weapon: Weapon;\n\n  constructor(rng: RNG, registry: TileRegistry, level: Level, x: number, y: number, name: string, time: number) {\n    this.rng = rng;\n    this.registry = registry;\n    this.level = level;\n    this.x = x;\n    this.y = y;\n    this.new_x = x;\n    this.new_y = y;\n    this.is_left = false;\n    this.name = name;\n    this.healthMax = 10;\n    this.health = this.healthMax;\n    this.damage = 3;\n    this.luck = 0.5;\n    this.speed = 100;\n    this.setAnimation(MonsterState.Idle, time);\n  }\n\n  setAnimation(state: MonsterState, time: number) {\n    switch (state) {\n      case MonsterState.Idle:\n        this.state = state;\n        this.tile = this.registry.get(this.name + \"_idle_anim\");\n        this.frame = 0;\n        this.start = time;\n        break;\n      case MonsterState.Run:\n        this.state = state;\n        this.tile = this.registry.get(this.name + \"_run_anim\");\n        this.frame = 0;\n        this.start = time;\n        break;\n    }\n  };\n\n  animate(time: number) {\n    this.frame = Math.floor((time - this.start) / this.speed);\n    if (this.frame >= this.tile.numOfFrames) {\n      if (this.state === MonsterState.Run) {\n        // console.log(\"finish run animation\");\n        this.level.monsters[this.y][this.x] = null;\n        this.level.monsters[this.new_y][this.new_x] = this;\n        this.x = this.new_x;\n        this.y = this.new_y;\n      }\n\n      this.setAnimation(MonsterState.Idle, time);\n\n      // search hero near\n      const max_distance = 3;\n      const scan_x_min = Math.max(0, this.x - max_distance);\n      const scan_y_min = Math.max(0, this.y - max_distance);\n      const scan_x_max = Math.min(this.level.w, this.x + max_distance);\n      const scan_y_max = Math.min(this.level.h, this.y + max_distance);\n\n      const is_hero_near = !this.level.hero.dead\n        && this.level.hero.x >= scan_x_min && this.level.hero.x <= scan_x_max\n        && this.level.hero.y >= scan_y_min && this.level.hero.y <= scan_y_max;\n\n      // console.log(\"hero is near\", scan_x_min, scan_x_max, scan_y_min, scan_y_max);\n\n      if (is_hero_near) {\n        const dist_x = Math.abs(this.x - this.level.hero.x);\n        const dist_y = Math.abs(this.y - this.level.hero.y);\n\n        if (dist_x > 1) {\n          const move_x = Math.max(-1, Math.min(1, this.level.hero.x - this.x));\n          if (this.move(move_x, 0, time)) {\n            console.log(\"move to hero x\");\n            return;\n          }\n        }\n        if (dist_y > 0) {\n          const move_y = Math.max(-1, Math.min(1, this.level.hero.y - this.y));\n          if (this.move(0, move_y, time)) {\n            console.log(\"move to hero y\");\n            return;\n          }\n        }\n\n        if (dist_x <= 1 && dist_y <= 1 && this.rng.nextFloat() < this.luck) {\n          this.level.hero.hitDamage(this.damage, this.name, time);\n          return;\n        }\n      }\n\n      // random move ?\n      const random_move_percent = 0.1;\n      if (this.rng.nextFloat() < random_move_percent) {\n        const move_x = this.rng.nextRange(-1, 2);\n        const move_y = this.rng.nextRange(-1, 2);\n        // console.log(\"random move\", move_x, move_y);\n        if (this.move(move_x, move_y, time)) {\n          return;\n        }\n      }\n    }\n  };\n\n  move(d_x: number, d_y: number, time: number) {\n    this.is_left = d_x < 0;\n    if (this.state === MonsterState.Idle) {\n      const new_x = this.x + d_x;\n      const new_y = this.y + d_y;\n\n      // check is floor exists\n      if (!this.level.floor[new_y][new_x]) return false;\n\n      // check is no monster\n      if (this.level.monsters[new_y][new_x]) return false;\n\n      // start move animation\n      this.level.monsters[new_y][new_x] = new MovingMonsterWrapper(this); // mark as used\n      this.new_x = new_x;\n      this.new_y = new_y;\n      this.setAnimation(MonsterState.Run, time);\n      return true;\n    }\n    return false;\n  };\n\n  hitDamage(damage: number, name: string, time: number) {\n    this.level.log.push(`${this.name} damaged ${damage} by ${name}`);\n    this.health = Math.max(0, this.health - damage);\n    if (this.health <= 0) {\n      this.level.log.push(`${this.name} killed by ${name}`);\n      this.level.monsters[this.y][this.x] = null;\n      this.level.monsters[this.new_y][this.new_x] = null;\n      this.level.monsterList = this.level.monsterList.filter(s => s !== this);\n      if (this.rng.nextFloat() < this.luck) {\n        this.level.randomDrop(this.x, this.y);\n      }\n    }\n  };\n}"]}