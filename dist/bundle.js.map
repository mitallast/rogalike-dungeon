{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/drop.ts","src/dungeon.ts","src/hero.ts","src/input.ts","src/inventory.ts","src/level.ts","src/monster.ts","src/rng.ts","src/scene.ts","src/tilemap.ts","src/tiny.monster.ts"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","Coins","[object Object]","rng","this","tileName","coins","nextRange","hero","addCoins","HealthFlask","health","inventory","add","item","hill","HealthBigFlask","input_1","tilemap_1","hero_1","level_1","scene_1","rng_1","monster_1","registry","TileRegistry","load","canvas","document","getElementById","ctx","getContext","imageSmoothingEnabled","buffer","createElement","b_ctx","start","Date","getTime","RNG","joystick","Joystick","hero_weapon","Weapon","HeroMonster","scene","Scene","setLevel","Level","renderLight","x","y","radius","diameter","box_x","box_y","grd","createRadialGradient","addColorStop","fillStyle","fillRect","renderMonster","monster","dx","dy","time","MovingMonsterWrapper","sw","tile","w","sh","h","sx","frame","sy","dw","dh","tile_offset_y","offset_x","offset_y","state","MonsterState","Run","maxTime","speed","numOfFrames","delta","Math","min","scale","new_x","new_y","width","height","save","translate","is_left","weapon","w_dw","w_dh","w_dy","w_dx","Hit","angle","rotate","PI","drawImage","tileSet","restore","renderTile","get","isAnim","sf","floor","render","level","animate","c_w","c_h","globalCompositeOperation","t_x","t_y","t_offset_x","t_offset_y","l_x","l_y","d_x","d_y","drop","wall","m_y","monsters","globalAlpha","renderLevel","h_m","healthMax","border","font","fillText","toString","renderHealth","textAlign","log","slice","renderLevelTitle","dead","renderYouDead","cells","grid_w","inv_w","grid_spacing","g_x","c_x","c_y","cell_size","cell","textBaseline","count","renderInventory","renderHUD","window","requestAnimationFrame","inventory_1","heroMonsterNames","name","damage","Inventory","setAnimation","Idle","action","scanDrop","scanHit","d","digit","processed","use","hit","triggered","exit","moveUp","move","moveDown","moveLeft","moveRight","pickedUp","max_distance","distance","scan_x_min","max","scan_x_max","scan_y_min","scan_y_max","s_y","s_x","hitDamage","push","weaponNames","KeyBindState","KeyBind","Await","preventDefault","Pressed","digit1","digit2","digit3","digit4","digit5","digit6","digit7","digit8","digit9","digit0","init","num","addEventListener","keydown","bind","keyup","InventoryCell","stack","set","maxInStack","same","tiny_monster_1","drop_1","Rect","b","l","rooms","corridorsV","corridorsH","createBuffer","monsterList","generate","fill","replace","defaultValue","rows","row","rooms_total","monsters_total","drop_total","generateRoom","m","room","choice","tinyMonsterNames","TinyMonster","randomDrop","hero_x","hero_y","resetPosition","room_w","room_h","isOverlap","expand","connected","max_x","min_x_w","rect","expandV","max_y","min_y_h","expandH","some","nextFloat","forEach","fillRoom","fillCorridorH","fillCorridorV","r_y","r_x","console","replaceFloorRandomly","replaceLadder","replaceWallRandomly","replacements","last","ladder_x","ladder_y","wall_mid_top_replaces","wall_mid_bottom_replaces","replacement","seed","random","nextInt","end","rangeSize","randomUnder1","array","tileMap","Promise","resolve","img","Image","onload","ev","src","loadTileSet","response","fetch","text","split","line","match","parseInt","Tile","luck","dist_x","abs","dist_y","move_x","move_y","random_move_percent","filter","s"],"mappings":"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","file":"bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","import {RNG} from \"./rng\";\nimport {HeroMonster} from \"./hero\";\n\nexport interface Drop {\n  readonly tileName: string\n  pickedUp(hero: HeroMonster): boolean;\n}\n\nexport interface UsableDrop extends Drop {\n  same(item: UsableDrop): boolean;\n  use(hero: HeroMonster): void;\n}\n\nexport class Coins implements Drop {\n  readonly tileName: string;\n  private readonly coins: number;\n\n  constructor(rng: RNG) {\n    this.tileName = \"coin_anim\";\n    this.coins = rng.nextRange(1, 30)\n  }\n\n  pickedUp(hero: HeroMonster): boolean {\n    hero.addCoins(this.coins);\n    return true;\n  };\n}\n\nexport class HealthFlask implements UsableDrop {\n  readonly tileName: string;\n  private readonly health: number;\n\n  constructor() {\n    this.tileName = \"flask_red\";\n    this.health = 2;\n  }\n\n  pickedUp(hero: HeroMonster): boolean {\n    return hero.inventory.add(this);\n\n  };\n\n  same(item: UsableDrop): boolean {\n    return item instanceof HealthFlask;\n  };\n\n  use(hero: HeroMonster) {\n    hero.hill(this.health);\n  };\n}\n\nexport class HealthBigFlask implements UsableDrop {\n  readonly tileName: string;\n  private readonly health: number;\n\n  constructor() {\n    this.tileName = \"flask_big_red\";\n    this.health = 5;\n  }\n\n  pickedUp(hero: HeroMonster): boolean {\n    return hero.inventory.add(this);\n  };\n\n  same(item: UsableDrop): boolean {\n    return item instanceof HealthBigFlask;\n  };\n\n  use(hero: HeroMonster) {\n    hero.hill(this.health);\n  };\n}","import {Joystick} from \"./input\";\nimport {TileRegistry} from \"./tilemap\";\nimport {HeroMonster, Weapon} from \"./hero\";\nimport {Level} from \"./level\";\nimport {Scene} from \"./scene\";\nimport {RNG} from \"./rng\";\nimport {Monster, MonsterState, MovingMonsterWrapper} from \"./monster\";\n\n(async function () {\n\n  // https://0x72.itch.io/dungeontileset-ii\n\n  const registry = new TileRegistry();\n  await registry.load();\n\n  const canvas: HTMLCanvasElement = document.getElementById(\"dungeon\") as HTMLCanvasElement;\n  const ctx = canvas.getContext(\"2d\");\n  ctx.imageSmoothingEnabled = false;\n\n  const buffer = document.createElement(\"canvas\");\n  const b_ctx = buffer.getContext(\"2d\");\n  b_ctx.imageSmoothingEnabled = false;\n\n  const start = new Date().getTime();\n  const rng = new RNG();\n  const joystick = new Joystick();\n  const hero_weapon = new Weapon(registry,\"weapon_rusty_sword\");\n  const hero = new HeroMonster(registry, joystick,0, 0, \"knight_f\", hero_weapon, start);\n  const scene = new Scene();\n  scene.setLevel(new Level(rng, registry, scene, hero, 1, start));\n\n  const scale = 2;\n  function render() {\n    const time = new Date().getTime();\n    scene.level.animate(time);\n    renderLevel(time);\n    renderHUD(time);\n    window.requestAnimationFrame(render);\n  }\n\n  function renderLevel(time: number) {\n    const c_w = canvas.width;\n    const c_h = canvas.height;\n    buffer.width = c_w;\n    buffer.height = c_h;\n\n    ctx.save();\n    ctx.fillStyle = \"rgb(34,34,34)\";\n    ctx.fillRect(0, 0, c_w, c_h);\n\n    b_ctx.save();\n    b_ctx.fillStyle = \"black\";\n    b_ctx.fillRect(0, 0, c_w, c_h);\n    b_ctx.globalCompositeOperation = \"lighter\";\n\n    // render hero light\n    renderLight(c_w >> 1, c_h >> 1, 16 * scale * 6);\n\n    let t_x = scene.level.hero.x * 16 * scale + 8 - c_w / 2;\n    let t_y = scene.level.hero.y * 16 * scale + 8 - c_h / 2;\n\n    // translate level to hero position\n    if(scene.level.hero.state === MonsterState.Run) {\n      const start = scene.level.hero.start;\n      const speed = scene.level.hero.speed;\n      const numOfFrames = scene.level.hero.tile.numOfFrames;\n      const maxTime = speed * numOfFrames;\n      const delta = Math.min(maxTime, time - start) / maxTime;\n\n      const t_offset_x = scale * 16 * (scene.level.hero.new_x - scene.level.hero.x) * delta;\n      const t_offset_y = scale * 16 * (scene.level.hero.new_y - scene.level.hero.y) * delta;\n\n      t_x = t_x + t_offset_x;\n      t_y = t_y + t_offset_y;\n    }\n\n    // render floor, drop\n    for(let l_x=0; l_x<scene.level.w; l_x++) {\n      for(let l_y=0; l_y<scene.level.h; l_y++) {\n        const d_x = -t_x + l_x * 16 * scale;\n        const d_y = -t_y + l_y * 16 * scale;\n        renderTile(scene.level.floor[l_y][l_x], d_x, d_y);\n        if(scene.level.drop[l_y][l_x]) {\n          renderTile(scene.level.drop[l_y][l_x].tileName, d_x, d_y);\n        }\n      }\n    }\n    // render wall, monsters\n    for(let l_y=0; l_y<scene.level.h; l_y++) {\n      for(let l_x=0; l_x<scene.level.w; l_x++) {\n        const d_x = -t_x + l_x * 16 * scale;\n        const d_y = -t_y + l_y * 16 * scale;\n        const tile = scene.level.wall[l_y][l_x];\n        renderTile(tile, d_x, d_y);\n\n        if (tile ===  \"wall_fountain_mid_red_anim\" || tile ===  \"wall_fountain_mid_blue_anim\") {\n          renderLight(d_x + 8 * scale, d_y + 8 * scale, 16 * scale * 4);\n        }\n      }\n      if(l_y < scene.level.h -1) {\n        for (let l_x = 0; l_x < scene.level.w; l_x++) {\n          const m_y = l_y + 1;\n          const d_x = -t_x + l_x * 16 * scale;\n          const d_y = -t_y + m_y * 16 * scale;\n          renderMonster(scene.level.monsters[m_y][l_x], d_x, d_y, time);\n        }\n      }\n    }\n\n    ctx.restore();\n\n    ctx.save();\n    ctx.globalAlpha = 0.8;\n    ctx.globalCompositeOperation = \"multiply\";\n    ctx.drawImage(buffer, 0, 0);\n    ctx.restore();\n  }\n\n  function renderLight(x: number, y: number, radius: number) {\n    const diameter = radius << 1;\n    const box_x = x - radius;\n    const box_y = y - radius;\n\n    const grd = b_ctx.createRadialGradient(x, y, 16, x, y, radius);\n    grd.addColorStop(0.5, \"rgb(255,255,255)\");\n    grd.addColorStop(1, \"transparent\");\n    b_ctx.fillStyle = grd;\n    b_ctx.fillRect(box_x, box_y, diameter, diameter);\n  }\n\n  function renderHUD(time: number) {\n    renderHealth(time);\n    renderLevelTitle(time);\n    renderYouDead(time);\n    renderInventory(time);\n  }\n  function renderHealth(time: number) {\n    const border = 4;\n    const height = 20;\n    const point_w = 10;\n    const h_m = scene.level.hero.healthMax;\n    const h = scene.level.hero.health;\n\n    // render HUD - hero health\n    ctx.save();\n    ctx.translate(40, 40);\n\n    // background\n    ctx.fillStyle = \"rgb(0,0,0)\";\n    ctx.fillRect(0, 0, border * 2 + point_w * h_m, border * 2 + height);\n\n    // health red line\n    ctx.fillStyle = \"rgb(255,0,0)\";\n    ctx.fillRect(border, border, point_w * h, height);\n\n    // health points text\n    ctx.fillStyle = \"rgb(255,255,255)\";\n    ctx.font = \"20px silkscreennormal\";\n    ctx.fillText(h.toString(), border * 2, border + 16);\n\n    // coins text\n    ctx.fillText(`$${hero.coins}`, 0, 50);\n\n    ctx.restore();\n  }\n  function renderLevelTitle(time: number) {\n    const c_w = canvas.width;\n    const c_h = canvas.height;\n\n    // render HUD - level\n    ctx.save();\n    ctx.translate(c_w / 2, 60);\n    ctx.fillStyle = \"rgb(255,255,255)\";\n    ctx.textAlign = \"center\";\n    ctx.font = \"20px silkscreennormal\";\n    ctx.fillText(`level ${scene.level.level}`, 0, 0);\n    ctx.restore();\n\n    // render HUD - log info\n    scene.level.log = scene.level.log.slice(-5);\n    ctx.save();\n    ctx.translate(40, c_h - 100);\n    for(let i=0; i<scene.level.log.length; i++) {\n      ctx.fillStyle = \"rgb(255,255,255)\";\n      ctx.font = \"20px silkscreennormal\";\n      ctx.fillText(scene.level.log[i], 0, i * 20);\n    }\n\n    ctx.restore();\n  }\n  function renderYouDead(time: number) {\n    const c_w = canvas.width;\n    const c_h = canvas.height;\n\n    if(scene.level.hero.dead) {\n      ctx.save();\n\n      ctx.fillStyle = \"rgba(0, 0, 0, 0.7)\";\n      ctx.fillRect(0, 0, c_w, c_h);\n\n      ctx.translate(c_w / 2, c_h / 2);\n\n      ctx.fillStyle = \"rgb(255,0,0)\";\n      ctx.textAlign = \"center\";\n      ctx.font = \"200px silkscreennormal\";\n      ctx.fillText(\"YOU DIED\", 0, 0);\n      ctx.restore();\n    }\n  }\n  function renderInventory(time: number) {\n    const c_w = canvas.width;\n    const c_h = canvas.height;\n\n    const cells = scene.level.hero.inventory.cells;\n    const cell_size = 16;\n    const grid_w = cells.length;\n    const grid_spacing = 2;\n\n    const inv_w = scale * (grid_w * (cell_size + grid_spacing) + grid_spacing);\n    const inv_h = scale * (cell_size + grid_spacing + grid_spacing);\n\n    ctx.save();\n    ctx.translate((c_w >> 1) - (inv_w >> 1), c_h - inv_h - 40);\n\n    // background\n    ctx.fillStyle = \"rgb(100,100,100)\";\n    ctx.fillRect(0, 0, inv_w, inv_h);\n\n    ctx.translate(grid_spacing * scale, grid_spacing * scale); // grid spacing\n\n    for (let g_x = 0; g_x < grid_w; g_x++) {\n      const c_x = scale * (g_x * (cell_size + grid_spacing));\n      const c_y = 0;\n\n      ctx.fillStyle = \"rgb(70,70,70)\";\n      ctx.fillRect(c_x, 0, cell_size * scale, cell_size * scale);\n      const cell = cells[g_x];\n      if(cell.item) {\n        const tile = registry.get(cell.item.tileName);\n        if (tile) {\n          // @todo fix dw/dh for swords\n          if (tile.isAnim && tile.numOfFrames > 1) {\n            let sf;\n            if (tile.numOfFrames === 3) {\n              sf = Math.floor(time / 100) % tile.numOfFrames;\n            } else if (tile.numOfFrames === 4) {\n              sf = (time >> 2) % tile.numOfFrames;\n            } else {\n              sf = (time >> 2) % tile.numOfFrames;\n            }\n            const sw = tile.w;\n            const sh = tile.h;\n            const sx = tile.x + sw * sf;\n            const sy = tile.y;\n            const dw = sw * scale;\n            const dh = sh * scale;\n            ctx.drawImage(tile.tileSet, sx, sy, sw, sh, c_x, c_y, dw, dh);\n          } else {\n            const sx = tile.x;\n            const sy = tile.y;\n            const sw = tile.w;\n            const sh = tile.h;\n            const dw = sw * scale;\n            const dh = sh * scale;\n            ctx.drawImage(tile.tileSet, sx, sy, sw, sh, c_x, c_y, dw, dh);\n          }\n        }\n        ctx.textAlign = \"end\";\n        ctx.textBaseline = \"top\";\n        ctx.font = \"10px silkscreennormal\";\n        ctx.fillStyle = \"rgb(255,255,255)\";\n        ctx.fillText(cell.count.toString(), c_x + (cell_size * scale), 0, cell_size * scale);\n      }\n    }\n    ctx.restore();\n  }\n\n  function renderMonster(monster: Monster, dx: number, dy: number, time: number) {\n    if(monster && !(monster instanceof MovingMonsterWrapper)) {\n      const sw = monster.tile.w;\n      const sh = monster.tile.h;\n      const sx = monster.tile.x + sw * monster.frame;\n      const sy = monster.tile.y;\n      const dw = sw * scale;\n      const dh = sh * scale;\n\n      const tile_offset_y = dh - 14 * scale;\n\n      let offset_x = 0;\n      let offset_y = 0;\n\n      if(monster.state === MonsterState.Run) {\n        const start = monster.start;\n        const speed = monster.speed;\n        const numOfFrames = monster.tile.numOfFrames;\n        const maxTime = speed * numOfFrames;\n        const delta = Math.min(maxTime, time - start) / maxTime;\n\n        offset_x = scale * 16 * (monster.new_x - monster.x) * delta;\n        offset_y = scale * 16 * (monster.new_y - monster.y) * delta;\n      }\n\n      if(dx + offset_x + dw > 0 && dx + offset_x < ctx.canvas.width &&\n        dy + offset_y + dh > 0 && dy + offset_y < ctx.canvas.height) {\n\n\n        ctx.save();\n        ctx.translate(dx + offset_x, dy + offset_y);\n        if(monster.is_left) {\n          ctx.scale(-1, 1);\n          if(monster.weapon) {\n            ctx.save();\n            const w = monster.weapon.tile;\n            const w_dw = w.w * scale;\n            const w_dh = w.h * scale;\n\n            const w_dy = w_dh - 14 * scale;\n            const w_dx = 4 * scale;\n\n            ctx.translate(-w_dx, -w_dy);\n\n            if(monster.state === MonsterState.Hit) {\n              let angle = 90 * monster.weapon.frame / (monster.weapon.numOfFrames - 1);\n              ctx.translate(w_dw >> 1, w_dh); // to bottom center of tile\n              ctx.rotate(angle * Math.PI / 180); // 90 degree\n              ctx.drawImage(w.tileSet, w.x, w.y, w.w, w.h, -(w_dw >> 1), -w_dh, w_dw, w_dh);\n            } else {\n              ctx.drawImage(w.tileSet, w.x, w.y, w.w, w.h, 0, 0, w_dw, w_dh);\n            }\n            ctx.restore();\n          }\n          ctx.drawImage(monster.tile.tileSet, sx, sy, sw, sh, 0 - dw, -tile_offset_y, dw, dh);\n        } else {\n          if(monster.weapon) {\n            ctx.save();\n            const w = monster.weapon.tile;\n            const w_dw = w.w * scale;\n            const w_dh = w.h * scale;\n\n            const w_dy = w_dh - 14 * scale;\n            const w_dx = 12 * scale;\n\n            ctx.translate(w_dx, -w_dy);\n\n            if(monster.state === MonsterState.Hit) {\n              let angle = 90 * monster.weapon.frame / (monster.weapon.numOfFrames - 1);\n              ctx.translate(w_dw >> 1, w_dh); // to bottom center of tile\n              ctx.rotate(angle * Math.PI / 180); // 90 degree\n              ctx.drawImage(w.tileSet, w.x, w.y, w.w, w.h, -(w_dw >> 1), -w_dh, w_dw, w_dh);\n            }else {\n              ctx.drawImage(w.tileSet, w.x, w.y, w.w, w.h, 0, 0, w_dw, w_dh);\n            }\n            ctx.restore();\n          }\n          ctx.drawImage(monster.tile.tileSet, sx, sy, sw, sh, 0, -tile_offset_y, dw, dh);\n        }\n        ctx.restore();\n      }\n    }\n  }\n\n  function renderTile(tileName: string, dx: number, dy: number) {\n    const tile = registry.get(tileName);\n    if(tile) {\n      const sw = tile.w;\n      const sh = tile.h;\n      const dw = sw * scale;\n      const dh = sh * scale;\n\n      if(dx + dw > 0 && dx < ctx.canvas.width &&\n        dy + dh > 0 && dy < ctx.canvas.height) {\n        if (tile.isAnim && tile.numOfFrames > 1) {\n          const time = new Date().getTime();\n          const sf = Math.floor(time / 100) % tile.numOfFrames;\n          const sx = tile.x + sw * sf;\n          const sy = tile.y;\n          ctx.drawImage(tile.tileSet, sx, sy, sw, sh, dx, dy, dw, dh);\n        } else {\n          const sx = tile.x;\n          const sy = tile.y;\n          ctx.drawImage(tile.tileSet, sx, sy, sw, sh, dx, dy, dw, dh);\n        }\n      }\n    }\n  }\n\n  render();\n})();","import {Inventory} from \"./inventory\";\nimport {Tile, TileRegistry} from \"./tilemap\";\nimport {Joystick} from \"./input\";\nimport {Monster, MonsterState, MovingMonsterWrapper} from \"./monster\";\nimport {Level} from \"./level\";\n\nexport const heroMonsterNames = [\n  \"elf_f\",\n  \"elf_m\",\n  \"knight_f\",\n  \"knight_m\",\n  \"wizard_f\",\n  \"wizard_m\",\n];\n\nexport class HeroMonster implements Monster {\n  private registry: TileRegistry;\n  private joystick: Joystick;\n  x: number;\n  y: number;\n  new_x: number;\n  new_y: number;\n  is_left: boolean;\n  readonly name: string;\n  readonly healthMax: number;\n  health: number;\n  coins: number;\n  private readonly damage: number;\n  dead: boolean;\n  weapon: Weapon;\n  readonly speed: number;\n  readonly inventory: Inventory;\n  private level: Level;\n  state: MonsterState;\n  tileName: string;\n  tile: Tile;\n  frame: number;\n  start: number;\n\n  constructor(registry: TileRegistry, joystick: Joystick, x: number, y: number, name: string, weapon: Weapon, time: number) {\n    this.registry = registry;\n    this.joystick = joystick;\n    this.x = x;\n    this.y = y;\n    this.new_x = x;\n    this.new_y = y;\n    this.is_left = false;\n    this.name = name;\n    this.healthMax = 30;\n    this.health = this.healthMax;\n    this.coins = 0;\n    this.damage = 5;\n    this.dead = false;\n    this.weapon = weapon;\n    this.speed = 100;\n    this.inventory = new Inventory();\n    this.setAnimation(MonsterState.Idle, time);\n  }\n\n  setLevel(level: Level) {\n    this.level = level;\n  };\n\n  setAnimation(state: MonsterState, time: number) {\n    if (!this.dead) {\n      switch (state) {\n        case MonsterState.Idle:\n          this.state = state;\n          this.tileName = this.name + \"_idle_anim\";\n          this.tile = this.registry.get(this.tileName);\n          this.frame = 0;\n          this.start = time;\n          break;\n        case MonsterState.Run:\n          this.state = state;\n          this.tileName = this.name + \"_run_anim\";\n          this.tile = this.registry.get(this.tileName);\n          this.frame = 0;\n          this.start = time;\n          break;\n        case MonsterState.Hit:\n          this.state = state;\n          this.tileName = this.name + \"_hit_anim\";\n          this.tile = this.registry.get(this.tileName);\n          this.frame = 0;\n          this.weapon.frame = 0;\n          this.start = time;\n          break;\n      }\n    }\n  };\n\n  animate(time: number) {\n    switch (this.state) {\n      case MonsterState.Idle:\n        this.frame = Math.floor((time - this.start) / this.speed);\n        if (!this.action(time)) {\n          if (this.frame >= this.tile.numOfFrames) {\n            this.setAnimation(MonsterState.Idle, time);\n          }\n        }\n        break;\n      case MonsterState.Run:\n        this.frame = Math.floor((time - this.start) / this.speed);\n        if (this.frame >= this.tile.numOfFrames) {\n          this.level.monsters[this.y][this.x] = null;\n          this.level.monsters[this.new_y][this.new_x] = this;\n          this.x = this.new_x;\n          this.y = this.new_y;\n          this.scanDrop();\n          if (!this.action(time)) {\n            this.setAnimation(MonsterState.Idle, time);\n          }\n        }\n        break;\n      case MonsterState.Hit:\n        this.weapon.frame = Math.floor((time - this.start) / this.weapon.speed);\n        if (this.weapon.frame >= this.weapon.numOfFrames) {\n          this.scanHit(time);\n          this.scanDrop();\n          if (!this.action(time)) {\n            this.setAnimation(MonsterState.Idle, time);\n          }\n        }\n        break;\n    }\n  };\n\n  action(time: number) {\n    this.scanDrop();\n    for (let d = 0; d < 10; d++) {\n      const digit = (d + 1) % 10;\n      if (!this.joystick.digit(digit).processed) {\n        this.joystick.digit(digit).processed = true;\n        this.inventory.cells[d].use(this);\n      }\n    }\n\n    if (this.joystick.hit.triggered && !this.joystick.hit.processed) {\n      if (this.level.floor[this.y][this.x] === \"floor_ladder\") {\n        this.joystick.hit.processed = true;\n        this.level.exit(time);\n        return true;\n      } else {\n        this.setAnimation(MonsterState.Hit, time);\n        return true;\n      }\n    }\n    if (this.joystick.moveUp.triggered || !this.joystick.moveUp.processed) {\n      this.joystick.moveUp.processed = true;\n      if (this.move(0, -1, time)) {\n        return true;\n      }\n    }\n    if (this.joystick.moveDown.triggered || !this.joystick.moveDown.processed) {\n      this.joystick.moveDown.processed = true;\n      if (this.move(0, 1, time)) {\n        return true;\n      }\n    }\n    if (this.joystick.moveLeft.triggered || !this.joystick.moveLeft.processed) {\n      this.joystick.moveLeft.processed = true;\n      this.is_left = true;\n      if (this.move(-1, 0, time)) {\n        return true;\n      }\n    }\n    if (this.joystick.moveRight.triggered || !this.joystick.moveRight.processed) {\n      this.joystick.moveRight.processed = true;\n      this.is_left = false;\n      if (this.move(1, 0, time)) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  scanDrop() {\n    if (this.level.drop[this.y][this.x]) {\n      const drop = this.level.drop[this.y][this.x];\n      if (drop.pickedUp(this)) {\n        this.level.drop[this.y][this.x] = null;\n      }\n    }\n  };\n\n  scanHit(time: number) {\n    const max_distance = this.weapon.distance;\n    // search only left or right path\n    const scan_x_min = this.is_left ? Math.max(0, this.x - max_distance) : this.x;\n    const scan_x_max = this.is_left ? this.x : Math.min(this.level.w, this.x + max_distance);\n\n    const scan_y_min = Math.max(0, this.y - max_distance);\n    const scan_y_max = Math.min(this.level.h, this.y + max_distance);\n\n    for (let s_y = scan_y_min; s_y <= scan_y_max; s_y++) {\n      for (let s_x = scan_x_min; s_x <= scan_x_max; s_x++) {\n        // not self\n        if (!(s_x === this.x && s_y === this.y)) {\n          const monster = this.level.monsters[s_y][s_x];\n          if (monster) {\n            monster.hitDamage(this.damage, this.name, time);\n          }\n        }\n      }\n    }\n  };\n\n  move(d_x: number, d_y: number, time: number) {\n    if (!this.dead && this.state === MonsterState.Idle) {\n      const new_x = this.x + d_x;\n      const new_y = this.y + d_y;\n\n      // check is floor exists\n      if (!this.level.floor[new_y][new_x]) return false;\n\n      // check is no monster\n      if (this.level.monsters[new_y][new_x]) return false;\n\n      // start move animation\n      this.level.monsters[new_y][new_x] = new MovingMonsterWrapper(this); // mark as used\n      this.new_x = new_x;\n      this.new_y = new_y;\n      this.setAnimation(MonsterState.Run, time);\n      return true;\n    }\n    return false;\n  };\n\n  resetPosition(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n    this.new_x = x;\n    this.new_y = y;\n  };\n\n  hitDamage(damage: number, name: string, time: number) {\n    if (!this.dead) {\n      this.level.log.push(`${this.name} damaged ${damage} by ${name}`);\n      this.health = Math.max(0, this.health - damage);\n      if (this.health <= 0) {\n        this.level.log.push(`${this.name} killed by ${name}`);\n        this.setAnimation(MonsterState.Idle, time);\n        this.dead = true;\n      }\n    }\n  };\n\n  hill(health: number) {\n    this.health = Math.min(this.healthMax, this.health + health);\n  };\n\n  addCoins(coins: number) {\n    this.coins = this.coins + coins;\n  };\n}\n\nexport const weaponNames = [\n  \"weapon_knife\",\n  \"weapon_rusty_sword\",\n  \"weapon_regular_sword\",\n  \"weapon_red_gem_sword\",\n  \"weapon_big_hammer\",\n  \"weapon_hammer\",\n  \"weapon_baton_with_spikes\",\n  \"weapon_mace\",\n  \"weapon_katana\",\n  \"weapon_saw_sword\",\n  \"weapon_anime_sword\",\n  \"weapon_axe\",\n  \"weapon_machete\",\n  \"weapon_cleaver\",\n  \"weapon_duel_sword\",\n  \"weapon_knight_sword\",\n  \"weapon_golden_sword\",\n  \"weapon_lavish_sword\",\n  \"weapon_red_magic_staff\",\n  \"weapon_green_magic_staff\",\n];\n\nexport class Weapon {\n  readonly tileName: string;\n  readonly tile: Tile;\n  frame: number;\n  readonly numOfFrames: number;\n  readonly speed: number;\n  readonly distance: number;\n\n  constructor(registry: TileRegistry, tileName: string) {\n    this.tileName = tileName;\n    this.tile = registry.get(this.tileName);\n    this.frame = 0;\n    this.numOfFrames = 4;\n    this.speed = 100;\n    this.distance = 1;\n  }\n}","enum KeyBindState {Await = 1, Pressed = 2}\n\nexport class KeyBind {\n  private readonly code: string;\n  private state: KeyBindState;\n  triggered: boolean;\n  processed: boolean;\n\n  constructor(code: string) {\n    this.code = code;\n    this.state = KeyBindState.Await;\n    this.triggered = false;\n    this.processed = true;\n  }\n\n  keydown(e: KeyboardEvent) {\n    if (e.code === this.code) {\n      e.preventDefault();\n      if (this.state === KeyBindState.Await) {\n        this.triggered = true;\n        this.processed = false;\n        this.state = KeyBindState.Pressed;\n      }\n    }\n  }\n\n  keyup(e: KeyboardEvent) {\n    if (e.code === this.code) {\n      e.preventDefault();\n      if (this.state === KeyBindState.Pressed) {\n        this.triggered = false;\n        this.state = KeyBindState.Await;\n      }\n    }\n  }\n}\n\nexport class Joystick {\n  readonly moveUp: KeyBind;\n  readonly moveLeft: KeyBind;\n  readonly moveDown: KeyBind;\n  readonly moveRight: KeyBind;\n  readonly hit: KeyBind;\n  readonly digit1: KeyBind;\n  readonly digit2: KeyBind;\n  readonly digit3: KeyBind;\n  readonly digit4: KeyBind;\n  readonly digit5: KeyBind;\n  readonly digit6: KeyBind;\n  readonly digit7: KeyBind;\n  readonly digit8: KeyBind;\n  readonly digit9: KeyBind;\n  readonly digit0: KeyBind;\n\n  constructor() {\n    this.moveUp = new KeyBind('KeyW');\n    this.moveLeft = new KeyBind('KeyA');\n    this.moveDown = new KeyBind('KeyS');\n    this.moveRight = new KeyBind('KeyD');\n    this.hit = new KeyBind('KeyF');\n\n    this.digit1 = new KeyBind('Digit1');\n    this.digit2 = new KeyBind('Digit2');\n    this.digit3 = new KeyBind('Digit3');\n    this.digit4 = new KeyBind('Digit4');\n    this.digit5 = new KeyBind('Digit5');\n    this.digit6 = new KeyBind('Digit6');\n    this.digit7 = new KeyBind('Digit7');\n    this.digit8 = new KeyBind('Digit8');\n    this.digit9 = new KeyBind('Digit9');\n    this.digit0 = new KeyBind('Digit0');\n    this.init();\n  }\n\n  digit(num: number): KeyBind {\n    switch (num) {\n      case 1: return this.digit1;\n      case 2: return this.digit2;\n      case 3: return this.digit3;\n      case 4: return this.digit4;\n      case 5: return this.digit5;\n      case 6: return this.digit6;\n      case 7: return this.digit7;\n      case 8: return this.digit8;\n      case 9: return this.digit9;\n      case 0: return this.digit0;\n    }\n  }\n\n  init() {\n    window.addEventListener(\"keydown\", this.keydown.bind(this));\n    window.addEventListener(\"keyup\", this.keyup.bind(this));\n  };\n\n  keydown(e: KeyboardEvent) {\n    this.moveUp.keydown(e);\n    this.moveLeft.keydown(e);\n    this.moveDown.keydown(e);\n    this.moveRight.keydown(e);\n    this.hit.keydown(e);\n    this.digit1.keydown(e);\n    this.digit2.keydown(e);\n    this.digit3.keydown(e);\n    this.digit4.keydown(e);\n    this.digit5.keydown(e);\n    this.digit6.keydown(e);\n    this.digit7.keydown(e);\n    this.digit8.keydown(e);\n    this.digit9.keydown(e);\n    this.digit0.keydown(e);\n  };\n\n  keyup(e: KeyboardEvent) {\n    this.moveUp.keyup(e);\n    this.moveLeft.keyup(e);\n    this.moveDown.keyup(e);\n    this.moveRight.keyup(e);\n    this.hit.keyup(e);\n    this.digit1.keyup(e);\n    this.digit2.keyup(e);\n    this.digit3.keyup(e);\n    this.digit4.keyup(e);\n    this.digit5.keyup(e);\n    this.digit6.keyup(e);\n    this.digit7.keyup(e);\n    this.digit8.keyup(e);\n    this.digit9.keyup(e);\n    this.digit0.keyup(e);\n  };\n}","import {UsableDrop} from \"./drop\";\nimport {HeroMonster} from \"./hero\";\n\nexport class Inventory {\n  readonly cells: InventoryCell[];\n\n  constructor() {\n    this.cells = [];\n    for (let i = 0; i < 10; i++) {\n      this.cells[i] = new InventoryCell();\n    }\n  }\n\n  add(item: UsableDrop) {\n    for (let i = 0; i < this.cells.length; i++) {\n      if (this.cells[i].stack(item)) {\n        return true;\n      }\n    }\n    for (let i = 0; i < this.cells.length; i++) {\n      if (this.cells[i].set(item)) {\n        return true;\n      }\n    }\n    return false;\n  };\n}\n\nexport class InventoryCell {\n  private readonly maxInStack: number;\n  item: UsableDrop;\n  count: number;\n\n  constructor() {\n    this.maxInStack = 3;\n    this.item = null;\n    this.count = 0;\n  }\n\n  stack(item: UsableDrop) {\n    if (this.item && this.item.same(item) && this.count < this.maxInStack) {\n      this.count++;\n      return true;\n    }\n    return false;\n  };\n\n  set(item: UsableDrop) {\n    if (!this.item) {\n      this.item = item;\n      this.count = 1;\n      return true;\n    }\n    return false;\n  };\n\n  use(hero: HeroMonster) {\n    if (this.item && this.count > 0) {\n      this.item.use(hero);\n      this.count--;\n      if (this.count <= 0) {\n        this.item = null;\n        this.count = 0;\n      }\n      return true;\n    }\n    return false;\n  };\n}","import {TinyMonster, tinyMonsterNames} from \"./tiny.monster\";\nimport {Coins, Drop, HealthBigFlask, HealthFlask} from \"./drop\";\nimport {RNG} from \"./rng\";\nimport {TileRegistry} from \"./tilemap\";\nimport {Scene} from \"./scene\";\nimport {HeroMonster} from \"./hero\";\nimport {Monster} from \"./monster\";\n\nconst x_dist = 2;\nconst y_dist = 3;\n\nexport class Rect {\n  readonly x: number;\n  readonly y: number;\n  readonly w: number;\n  readonly h: number;\n\n  constructor(x: number, y: number, w: number, h: number) {\n    this.x = x;\n    this.y = y;\n    this.w = w;\n    this.h = h;\n  }\n\n  expand() {\n    const a = this;\n    return new Rect(\n      a.x - x_dist,\n      a.y - y_dist,\n      a.w + x_dist + x_dist,\n      a.h + y_dist + y_dist\n    );\n  }\n\n  expandV() {\n    const a = this;\n    return new Rect(\n      a.x - x_dist,\n      a.y,\n      a.w + x_dist + x_dist,\n      a.h\n    );\n  }\n\n  expandH() {\n    const a = this;\n    return new Rect(\n      a.x,\n      a.y - y_dist,\n      a.w,\n      a.h + y_dist + y_dist\n    );\n  }\n\n  isOverlap(b: Rect) {\n    const a = this;\n    return a.x < b.x + b.w\n      && a.x + a.w > b.x\n      && a.y < b.y + b.h\n      && a.y + a.h > b.y;\n  }\n}\n\nexport class Level {\n  private readonly rng: RNG;\n  private readonly registry: TileRegistry;\n  private readonly scene: Scene;\n  readonly level: number;\n  readonly w: number;\n  readonly h: number;\n  log: string[];\n  private readonly rooms: Rect[];\n  private readonly corridorsV: Rect[];\n  private readonly corridorsH: Rect[];\n  readonly floor: string[][];\n  readonly drop: Drop[][];\n  readonly wall: string[][];\n\n  monsterList: TinyMonster[];\n  readonly hero: HeroMonster;\n  readonly monsters: Monster[][];\n\n  constructor(rng: RNG, registry: TileRegistry, scene: Scene, hero: HeroMonster, l: number, time: number) {\n    this.rng = rng;\n    this.registry = registry;\n    this.scene = scene;\n    this.level = l;\n    this.w = 200;\n    this.h = 120;\n\n    this.log = [];\n    this.rooms = [];\n    this.corridorsV = [];\n    this.corridorsH = [];\n\n    this.floor = this.createBuffer(() => null);\n    this.drop = this.createBuffer(() => null);\n    this.wall = this.createBuffer(() => null);\n\n    this.monsterList = [];\n    this.hero = hero;\n    this.monsters = this.createBuffer(() => null);\n\n    this.generate(time);\n    this.fill();\n    this.replace();\n  }\n\n  createBuffer<T>(defaultValue: () => T): T[][] {\n    const rows: T[][] = [];\n    for (let y = 0; y < this.h; y++) {\n      const row: T[] = [];\n      rows.push(row);\n      for (let x = 0; x < this.w; x++) {\n        row.push(defaultValue());\n      }\n    }\n    return rows;\n  };\n\n  generate(time: number) {\n    const rooms_total = 1 + this.level;\n    const monsters_total = 3 + this.level;\n    const drop_total = 5 + this.level;\n\n    // create rooms\n    for (let r = 0; r < rooms_total; r++) {\n      this.generateRoom();\n    }\n\n    // create monsters\n    for (let m = 0; m < monsters_total; m++) {\n      const r = this.rng.nextRange(1, this.rooms.length);\n      const room = this.rooms[r];\n      for (let t = 0; t < 10; t++) {\n        const x = room.x + this.rng.nextRange(0, room.w);\n        const y = room.y + this.rng.nextRange(0, room.h);\n        if (!this.monsters[y][x]) {\n          const name = this.rng.choice(tinyMonsterNames);\n          const monster = new TinyMonster(this.rng, this.registry, this, x, y, name, time);\n          this.monsterList.push(monster);\n          this.monsters[y][x] = monster;\n          break;\n        }\n      }\n    }\n\n    // create drop\n    for (let d = 0; d < drop_total; d++) {\n      const room = this.rng.choice(this.rooms);\n      for (let t = 0; t < 10; t++) {\n        const x = room.x + this.rng.nextRange(0, room.w);\n        const y = room.y + this.rng.nextRange(0, room.h);\n        if (!this.drop[y][x]) {\n          this.randomDrop(x, y);\n          break;\n        }\n      }\n    }\n\n    // position of hero\n    {\n      const room = this.rooms[0];\n      const hero_x = room.x + (room.w >> 1);\n      const hero_y = room.y + (room.h >> 1);\n      this.hero.setLevel(this);\n      this.hero.resetPosition(hero_x, hero_y);\n      this.monsters[hero_y][hero_x] = this.hero;\n    }\n  };\n\n  generateRoom() {\n    const room_min_w = 5;\n    const room_min_h = 3;\n    const room_max_w = 15;\n    const room_max_h = 10;\n    const room_min_x = 2;\n    const room_min_y = 2;\n\n    const max_corr_dist = 12;\n\n    while (true) {\n      const room_w = this.rng.nextRange(room_min_w, room_max_w);\n      const room_h = this.rng.nextRange(room_min_h, room_max_h);\n\n      const room = new Rect(\n        this.rng.nextRange(room_min_x, this.w - 2 - room_w),\n        this.rng.nextRange(room_min_y, this.h - 2 - room_h),\n        room_w,\n        room_h\n      );\n\n      if (!this.isOverlap(room.expand())) {\n        // free position found\n        if (this.rooms.length === 0) {\n          this.rooms.push(room);\n          break;\n        } else {\n          // find connection\n          const a = room;\n          let connected = false;\n\n          // find closest room\n          for (let i = 0; i < this.rooms.length; i++) {\n            let b = this.rooms[i];\n\n            // try calculate horizontal distance\n            const max_x = Math.max(a.x, b.x);\n            const min_x_w = Math.min(a.x + a.w, b.x + b.w);\n            if (max_x + 5 <= min_x_w) {\n              let rect;\n              if (a.y + a.h < b.y) {\n                rect = new Rect(\n                  max_x + 2,\n                  a.y + a.h,\n                  min_x_w - max_x - 4,\n                  b.y - a.y - a.h\n                );\n              } else {\n                rect = new Rect(\n                  max_x + 2,\n                  b.y + b.h,\n                  min_x_w - max_x - 4,\n                  a.y - b.y - b.h\n                );\n              }\n              if (rect.h < max_corr_dist && !this.isOverlap(rect.expandV())) {\n                this.corridorsV.push(rect);\n                connected = true;\n              }\n            }\n\n            // try calculate vertical distance\n            const max_y = Math.max(a.y, b.y);\n            const min_y_h = Math.min(a.y + a.h, b.y + b.h);\n            if (max_y + 3 <= min_y_h) {\n              let rect;\n              if (a.x + a.w < b.x) {\n                rect = new Rect(\n                  a.x + a.w,\n                  max_y + 1,\n                  b.x - a.x - a.w,\n                  min_y_h - max_y - 2\n                );\n              } else {\n                rect = new Rect(\n                  b.x + b.w,\n                  max_y + 1,\n                  a.x - b.x - b.w,\n                  min_y_h - max_y - 2,\n                );\n              }\n              if (rect.w < max_corr_dist && !this.isOverlap(rect.expandH())) {\n                this.corridorsH.push(rect);\n                connected = true;\n              }\n            }\n          }\n\n          if (connected) {\n            this.rooms.push(room);\n            break;\n          }\n        }\n      }\n    }\n  }\n\n  isOverlap(a: Rect) {\n    const f = a.isOverlap.bind(a);\n    return this.rooms.some(f) ||\n      this.corridorsV.some(f) ||\n      this.corridorsH.some(f);\n  };\n\n  randomDrop(x: number, y: number) {\n    if (this.rng.nextFloat() < 0.5) {\n      this.drop[y][x] = new Coins(this.rng);\n    } else if (this.rng.nextFloat() < 0.3) {\n      this.drop[y][x] = new HealthFlask();\n    } else if (this.rng.nextFloat() < 0.3) {\n      this.drop[y][x] = new HealthBigFlask();\n    }\n  };\n\n  fill() {\n    this.rooms.forEach(r => this.fillRoom(r.x, r.y, r.w, r.h));\n    this.corridorsH.forEach(r => this.fillCorridorH(r.x, r.y, r.w, r.h));\n    this.corridorsV.forEach(r => this.fillCorridorV(r.x, r.y, r.w, r.h));\n  };\n\n  fillRoom(x: number, y: number, w: number, h: number) {\n    // fill floor\n    for (let r_y = y; r_y < y + h; r_y++) {\n      for (let r_x = x; r_x < x + w; r_x++) {\n        this.floor[r_y][r_x] = \"floor_1\";\n      }\n    }\n    // fill top wall\n    this.wall[y - 2][x] = \"wall_corner_top_left\";\n    this.wall[y - 1][x] = \"wall_corner_left\";\n    if (w > 1) {\n      for (let r_x = x + 1; r_x < x + w - 1; r_x++) {\n        this.wall[y - 2][r_x] = \"wall_top_mid\";\n        this.wall[y - 1][r_x] = \"wall_mid\";\n      }\n      this.wall[y - 2][x + w - 1] = \"wall_corner_top_right\";\n      this.wall[y - 1][x + w - 1] = \"wall_corner_right\";\n    }\n    // fill bottom wall\n    this.wall[y + h - 1][x] = \"wall_corner_bottom_left\";\n    this.wall[y + h][x] = \"wall_left\";\n    if (w > 1) {\n      for (let r_x = x + 1; r_x < x + w - 1; r_x++) {\n        this.wall[y + h - 1][r_x] = \"wall_top_mid\";\n        this.wall[y + h][r_x] = \"wall_mid\"\n      }\n      this.wall[y + h - 1][x + w - 1] = \"wall_corner_bottom_right\";\n      this.wall[y + h][x + w - 1] = \"wall_right\";\n    }\n    // fill right wall\n    for (let r_y = y; r_y < y + h - 1; r_y++) {\n      this.wall[r_y][x] = \"wall_side_mid_right\";\n    }\n    // fill left wall\n    for (let r_y = y; r_y < y + h - 1; r_y++) {\n      this.wall[r_y][x + w - 1] = \"wall_side_mid_left\";\n    }\n  };\n\n  fillCorridorH(x: number, y: number, w: number, h: number) {\n    // fill floor\n    for (let r_y = y; r_y < y + h; r_y++) {\n      for (let r_x = x; r_x < x + w; r_x++) {\n        this.floor[r_y][r_x] = \"floor_1\";\n      }\n    }\n\n    // connect with room top left\n    switch (this.wall[y - 2][x - 1]) {\n      case \"wall_corner_top_right\":\n        this.wall[y - 2][x - 1] = \"wall_top_mid\";\n        break;\n      case \"wall_side_mid_left\":\n        break;\n      default:\n        console.log(\"top left 2\", this.wall[y - 2][x - 1]);\n        break;\n    }\n    switch (this.wall[y - 1][x - 1]) {\n      case \"wall_corner_right\":\n        this.wall[y - 1][x - 1] = \"wall_mid\";\n        break;\n      case \"wall_side_mid_left\":\n        this.wall[y - 1][x - 1] = \"wall_side_front_left\";\n        break;\n      default:\n        console.log(\"top left 1\", this.wall[y - 1][x - 1]);\n        break;\n    }\n\n    // connect with room mid left\n    if (h > 1) {\n      for (let l_y = y; l_y < y + h - 1; l_y++) {\n        switch (this.wall[l_y][x - 1]) {\n          case \"wall_side_mid_left\":\n            this.wall[l_y][x - 1] = null;\n            break;\n          default:\n            console.log(\"mid left\", this.wall[l_y][x - 1]);\n            break;\n        }\n      }\n    }\n\n    // connect with room bottom left\n    switch (this.wall[y + h - 1][x - 1]) {\n      case \"wall_side_mid_left\":\n        this.wall[y + h - 1][x - 1] = \"wall_side_top_left\";\n        break;\n      case \"wall_corner_bottom_right\":\n        this.wall[y + h - 1][x - 1] = \"wall_top_mid\";\n        break;\n      default:\n        console.log(\"bottom left 0\", this.wall[y + h - 1][x - 1]);\n        break;\n    }\n    switch (this.wall[y + h][x - 1]) {\n      case \"wall_side_mid_left\":\n        break;\n      case \"wall_right\":\n        this.wall[y + h][x - 1] = \"wall_mid\";\n        break;\n      default:\n        console.log(\"bottom left 1\", this.wall[y + h][x - 1]);\n        break;\n    }\n\n    // connect with room top right\n    switch (this.wall[y - 2][x + w]) {\n      case \"wall_corner_top_left\":\n        this.wall[y - 2][x + w] = \"wall_top_mid\";\n        break;\n      case \"wall_side_mid_right\":\n        break;\n      default:\n        console.log(\"top right 2\", this.wall[y - 2][x + w]);\n        break;\n    }\n    switch (this.wall[y - 1][x + w]) {\n      case \"wall_corner_left\":\n        this.wall[y - 1][x + w] = \"wall_mid\";\n        break;\n      case \"wall_side_mid_right\":\n        this.wall[y - 1][x + w] = \"wall_side_front_right\";\n        break;\n      default:\n        console.log(\"top right 1\", this.wall[y - 1][x + w]);\n        break;\n    }\n\n    // connect with room mid right\n    if (h > 1) {\n      for (let l_y = y; l_y < y + h - 1; l_y++) {\n        switch (this.wall[l_y][x + w]) {\n          case \"wall_side_mid_right\":\n            this.wall[l_y][x + w] = null;\n            break;\n          default:\n            console.log(\"mid right\", this.wall[l_y][x + w]);\n            break;\n        }\n      }\n    }\n\n    // connect with room bottom right\n    switch (this.wall[y + h - 1][x + w]) {\n      case \"wall_side_mid_right\":\n        this.wall[y + h - 1][x + w] = \"wall_side_top_right\";\n        break;\n      case \"wall_corner_bottom_left\":\n        this.wall[y + h - 1][x + w] = \"wall_top_mid\";\n        break;\n      default:\n        console.log(\"bottom right 0\", this.wall[y + h - 1][x + w]);\n        break;\n    }\n    switch (this.wall[y + h][x + w]) {\n      case \"wall_side_mid_right\":\n        break;\n      case \"wall_left\":\n        this.wall[y + h][x + w] = \"wall_mid\";\n        break;\n      default:\n        console.log(\"bottom right +1\", this.wall[y + h][x + w]);\n        break;\n    }\n\n    // fill top wall\n    for (let r_x = x; r_x < x + w; r_x++) {\n      this.wall[y - 2][r_x] = \"wall_top_mid\";\n      this.wall[y - 1][r_x] = \"wall_mid\";\n    }\n\n    // fill bottom wall\n    for (let r_x = x; r_x < x + w; r_x++) {\n      this.wall[y + h - 1][r_x] = \"wall_top_mid\";\n      this.wall[y + h][r_x] = \"wall_mid\"\n    }\n  };\n\n  fillCorridorV(x: number, y: number, w: number, h: number) {\n    // fill floor\n    for (let r_y = y; r_y < y + h; r_y++) {\n      for (let r_x = x; r_x < x + w; r_x++) {\n        this.floor[r_y][r_x] = \"floor_1\";\n      }\n    }\n\n    // connect with room top left\n    switch (this.wall[y - 1][x - 1]) {\n      case \"wall_top_mid\":\n        this.wall[y - 1][x - 1] = \"wall_corner_top_right\";\n        break;\n      default:\n        console.log(\"top left -1 -1\", this.wall[y - 1][x - 1]);\n        break;\n    }\n    switch (this.wall[y][x - 1]) {\n      case \"wall_mid\":\n        this.wall[y][x - 1] = \"wall_corner_right\";\n        break;\n      default:\n        console.log(\"top left 0 -1\", this.wall[y][x - 1]);\n        break;\n    }\n\n    // connect with room top mid\n    for (let r_x = x; r_x < x + w; r_x++) {\n      switch (this.wall[y - 1][r_x]) {\n        case \"wall_top_mid\":\n          this.wall[y - 1][r_x] = null;\n          break;\n        default:\n          console.log(\"top mid -1\", this.wall[y - 1][r_x]);\n          break;\n      }\n      switch (this.wall[y][r_x]) {\n        case \"wall_mid\":\n          this.wall[y][r_x] = null;\n          break;\n        default:\n          console.log(\"top mid 0\", this.wall[y][r_x]);\n          break;\n      }\n    }\n\n    // connect with room top right\n    switch (this.wall[y - 1][x + w]) {\n      case \"wall_top_mid\":\n        this.wall[y - 1][x + w] = \"wall_corner_top_left\";\n        break;\n      default:\n        console.log(\"top right -1 1\", this.wall[y - 1][x + w]);\n        break;\n    }\n    switch (this.wall[y][x + w]) {\n      case \"wall_mid\":\n        this.wall[y][x + w] = \"wall_corner_left\";\n        break;\n      default:\n        console.log(\"top right 0 -1\", this.wall[y][x + w]);\n        break;\n    }\n\n\n    // connect with room bottom left\n    switch (this.wall[y + h - 2][x - 1]) {\n      case \"wall_top_mid\":\n        this.wall[y + h - 2][x - 1] = \"wall_corner_bottom_right\";\n        break;\n      default:\n        console.log(\"bottom left -2 -1\", this.wall[y + h - 2][x - 1]);\n        break;\n    }\n    switch (this.wall[y + h - 1][x - 1]) {\n      case \"wall_mid\":\n        this.wall[y + h - 1][x - 1] = \"wall_corner_front_right\";\n        break;\n      default:\n        console.log(\"top left 0 -1\", this.wall[y + h - 1][x - 1]);\n        break;\n    }\n\n    // connect with room bottom mid\n    for (let r_x = x; r_x < x + w; r_x++) {\n      switch (this.wall[y + h - 2][r_x]) {\n        case \"wall_top_mid\":\n          this.wall[y + h - 2][r_x] = null;\n          break;\n        default:\n          console.log(\"bottom mid -2\", this.wall[y + h - 2][r_x]);\n          break;\n      }\n      switch (this.wall[y + h - 1][r_x]) {\n        case \"wall_mid\":\n          this.wall[y + h - 1][r_x] = null;\n          break;\n        default:\n          console.log(\"bottom mid -1\", this.wall[y + h - 1][r_x]);\n          break;\n      }\n    }\n\n    // connect with room bottom right\n    switch (this.wall[y + h - 2][x + w]) {\n      case \"wall_top_mid\":\n        this.wall[y + h - 2][x + w] = \"wall_corner_bottom_left\";\n        break;\n      default:\n        console.log(\"bottom right -2 -1\", this.wall[y + h - 2][x - 1]);\n        break;\n    }\n    switch (this.wall[y + h - 1][x + w]) {\n      case \"wall_mid\":\n        this.wall[y + h - 1][x + w] = \"wall_corner_front_left\";\n        break;\n      default:\n        console.log(\"bottom right 0 -1\", this.wall[y + h - 1][x - 1]);\n        break;\n    }\n\n    // fill side walls\n    for (let r_y = y + 1; r_y < y + h - 2; r_y++) {\n      this.wall[r_y][x - 1] = \"wall_side_mid_left\";\n      this.wall[r_y][x + w] = \"wall_side_mid_right\";\n    }\n  };\n\n  replace() {\n    this.replaceFloorRandomly();\n    this.replaceLadder();\n    this.replaceWallRandomly();\n  };\n\n  replaceFloorRandomly() {\n    const replacements = [\"floor_2\", \"floor_3\", \"floor_4\", \"floor_5\", \"floor_6\", \"floor_7\", \"floor_8\"];\n    const percent = 0.2;\n    for (let y = 0; y < this.h; y++) {\n      for (let x = 0; x < this.w; x++) {\n        if (this.floor[y][x] && this.rng.nextFloat() < percent) {\n          this.floor[y][x] = this.rng.choice(replacements);\n        }\n      }\n    }\n  };\n\n  replaceLadder() {\n    // replace one tile in last room as ladder = out from level!\n    const last = this.rooms[this.rooms.length - 1];\n\n    const ladder_x = last.x + (last.w >> 1);\n    const ladder_y = last.y + (last.h >> 1);\n    console.log(ladder_x, ladder_y, last);\n    this.floor[ladder_y][ladder_x] = \"floor_ladder\";\n  };\n\n  replaceWallRandomly() {\n    const wall_mid_top_replaces = [\n      \"wall_hole_1\",\n      \"wall_hole_2\",\n      \"wall_banner_red\",\n      \"wall_banner_blue\",\n      \"wall_banner_green\",\n      \"wall_banner_yellow\",\n      \"wall_goo\",\n      \"wall_fountain_mid_red_anim\",\n      \"wall_fountain_mid_blue_anim\",\n    ];\n    const wall_mid_bottom_replaces = [\n      \"wall_hole_1\",\n      \"wall_hole_2\",\n    ];\n    const percent = 0.2;\n    for (let y = 0; y < this.h; y++) {\n      for (let x = 0; x < this.w; x++) {\n        if (this.wall[y][x]) {\n          switch (this.wall[y][x]) {\n            case \"wall_mid\":\n              if (this.rng.nextFloat() < percent) {\n                const is_top = !!this.floor[y + 1][x];\n                let replacements: string[];\n                if (is_top) {\n                  replacements = wall_mid_top_replaces;\n                } else {\n                  replacements = wall_mid_bottom_replaces;\n                }\n                const replacement = this.rng.choice(replacements);\n                switch (replacement) {\n                  case \"wall_goo\":\n                    this.wall[y][x] = \"wall_goo\";\n                    this.floor[y + 1][x] = \"wall_goo_base\";\n                    break;\n                  case \"wall_fountain_mid_red_anim\":\n                    this.wall[y - 1][x] = \"wall_fountain_top\";\n                    this.wall[y][x] = \"wall_fountain_mid_red_anim\";\n                    this.floor[y + 1][x] = \"wall_fountain_basin_red_anim\";\n                    break;\n                  case \"wall_fountain_mid_blue_anim\":\n                    this.wall[y - 1][x] = \"wall_fountain_top\";\n                    this.wall[y][x] = \"wall_fountain_mid_blue_anim\";\n                    this.floor[y + 1][x] = \"wall_fountain_basin_blue_anim\";\n                    break;\n                  default:\n                    this.wall[y][x] = replacement;\n                    break;\n                }\n              }\n              break;\n            default:\n              // console.log(\"replace\", this.wall[y][x]);\n              break;\n          }\n        }\n      }\n    }\n  };\n\n  exit(time: number) {\n    this.scene.setLevel(new Level(this.rng, this.registry, this.scene, this.hero, this.level + 1, time))\n  };\n\n  animate(time: number) {\n    this.monsterList.forEach(m => m.animate(time));\n    this.hero.animate(time);\n  };\n}","import {Tile} from \"./tilemap\";\nimport {Weapon} from \"./hero\";\n\nexport enum MonsterState {\n  Idle = 0, Run = 1, Hit = 2\n}\n\nexport interface Monster {\n  x: number\n  y: number\n  new_x: number\n  new_y: number\n  is_left: boolean\n  frame: number\n  start: number\n  speed: number\n  tile: Tile\n  state: MonsterState\n  weapon: Weapon\n  hitDamage(damage: number, name: string, time: number): void;\n}\n\nexport class MovingMonsterWrapper implements Monster {\n  private readonly monster: Monster;\n\n  constructor(monster: Monster) {\n    this.monster = monster;\n  }\n\n  hitDamage(damage: number, name: string, time: number) {\n    this.monster.hitDamage(damage, name, time);\n  }\n\n  get x(): number {\n    return this.monster.x;\n  }\n\n  get y(): number {\n    return this.monster.y;\n  }\n\n  get new_x(): number {\n    return this.monster.new_x;\n  }\n\n  get new_y(): number {\n    return this.monster.new_y;\n  }\n\n  get is_left(): boolean {\n    return this.monster.is_left;\n  }\n\n  get frame(): number {\n    return this.monster.frame;\n  }\n\n  get start(): number {\n    return this.monster.start;\n  }\n\n  get speed(): number {\n    return this.monster.speed;\n  }\n\n  get tile(): Tile {\n    return this.monster.tile;\n  }\n\n  get state(): MonsterState {\n    return this.monster.state;\n  }\n\n  get weapon(): Weapon {\n    return this.monster.weapon;\n  }\n}","/**\n * https://stackoverflow.com/questions/424292/seedable-javascript-random-number-generator\n * LCG using GCC's constants\n */\n\nconst m = 0x80000000; // 2^31;\nconst a = 1103515245;\nconst c = 12345;\n\nexport class RNG {\n  private state: number;\n\n  constructor(seed: number = null) {\n    this.state = seed ? seed : Math.floor(Math.random() * (m - 1));\n    console.log(\"seed\", this.state);\n  }\n\n  nextInt(): number {\n    this.state = (a * this.state + c) % m;\n    return this.state;\n  }\n\n  nextFloat(): number {\n    return this.nextInt() / (m - 1);\n  }\n\n  nextRange(start: number, end: number): number {\n    const rangeSize = end - start;\n    const randomUnder1 = this.nextInt() / m;\n    return start + Math.floor(randomUnder1 * rangeSize);\n  }\n\n  choice<T>(array: T[]): T {\n    return array[this.nextRange(0, array.length)];\n  }\n}","import {Level} from \"./level\";\n\nexport class Scene {\n  level: Level;\n\n  setLevel(level: Level) {\n    this.level = level;\n  }\n}","// https://0x72.itch.io/dungeontileset-ii\n\nexport class TileRegistry {\n  private readonly tileMap: Record<string, Tile>;\n\n  constructor() {\n    this.tileMap = {};\n  }\n\n  async loadTileSet(): Promise<HTMLImageElement> {\n    return await new Promise<HTMLImageElement>((resolve => {\n      const img = new Image();\n      img.onload = ev => resolve(img);\n      img.src = \"0x72_DungeonTilesetII_v1.2.png\";\n    }));\n  }\n\n  async load() {\n    const tileSet = await this.loadTileSet();\n    const response = await fetch(\"tiles_list_v1.1.txt\");\n    const text = await response.text();\n    const lines = text.split(/(\\r?\\n)/g);\n    lines.forEach((line) => {\n      let m = line.match(/([a-z0-9_]+) +([0-9]+) +([0-9]+) +([0-9]+) +([0-9]+) ?([0-9]?)/);\n      if (m) {\n        const x = parseInt(m[2]);\n        const y = parseInt(m[3]);\n        const w = parseInt(m[4]);\n        const h = parseInt(m[5]);\n        const numOfFrames = parseInt(m[6] || \"0\");\n        const tile = new Tile(tileSet, m[1], x, y, w, h, numOfFrames);\n        this.tileMap[tile.name] = tile;\n      }\n    });\n  }\n\n  get(tileName: string): Tile {\n    return this.tileMap[tileName];\n  }\n}\n\nexport class Tile {\n  readonly tileSet: HTMLImageElement;\n  readonly name: string;\n  readonly x: number;\n  readonly y: number;\n  readonly w: number;\n  readonly h: number;\n  readonly numOfFrames: number;\n  readonly isAnim: boolean;\n\n  constructor(tileSet: HTMLImageElement, name: string, x: number, y: number, w: number, h: number, numOfFrames: number) {\n    this.tileSet = tileSet;\n    this.name = name;\n    this.x = x;\n    this.y = y;\n    this.w = w;\n    this.h = h;\n    this.numOfFrames = numOfFrames;\n    this.isAnim = this.numOfFrames > 1;\n  }\n}","import {RNG} from \"./rng\";\nimport {Tile, TileRegistry} from \"./tilemap\";\nimport {Level} from \"./level\";\nimport {Monster, MonsterState, MovingMonsterWrapper} from \"./monster\";\nimport {Weapon} from \"./hero\";\n\nexport const tinyMonsterNames = [\n  \"tiny_zombie\",\n  \"goblin\",\n  \"imp\",\n  \"skeleton\",\n  \"muddy\",\n  \"swampy\",\n  \"zombie\",\n  \"ice_zombie\",\n];\n\nexport class TinyMonster implements Monster {\n  private readonly rng: RNG;\n  private readonly registry: TileRegistry;\n  private readonly level: Level;\n  x: number;\n  y: number;\n  new_x: number;\n  new_y: number;\n  is_left: boolean;\n  private readonly name: string;\n  private readonly healthMax: number;\n  private health: number;\n  private readonly damage: number;\n  private readonly luck: number;\n  readonly speed: number;\n  state: MonsterState;\n  private tileName: string;\n  tile: Tile;\n  frame: number;\n  start: number;\n  weapon: Weapon;\n\n  constructor(rng: RNG, registry: TileRegistry, level: Level, x: number, y: number, name: string, time: number) {\n    this.rng = rng;\n    this.registry = registry;\n    this.level = level;\n    this.x = x;\n    this.y = y;\n    this.new_x = x;\n    this.new_y = y;\n    this.is_left = false;\n    this.name = name;\n    this.healthMax = 10;\n    this.health = this.healthMax;\n    this.damage = 1;\n    this.luck = 0.5;\n    this.speed = 100;\n    this.setAnimation(MonsterState.Idle, time);\n  }\n\n  setAnimation(state: MonsterState, time: number) {\n    switch (state) {\n      case MonsterState.Idle:\n        this.state = state;\n        this.tileName = this.name + \"_idle_anim\";\n        this.tile = this.registry.get(this.tileName);\n        this.frame = 0;\n        this.start = time;\n        break;\n      case MonsterState.Run:\n        this.state = state;\n        this.tileName = this.name + \"_run_anim\";\n        this.tile = this.registry.get(this.tileName);\n        this.frame = 0;\n        this.start = time;\n        break;\n    }\n  };\n\n  animate(time: number) {\n    this.frame = Math.floor((time - this.start) / this.speed);\n    if (this.frame >= this.tile.numOfFrames) {\n      if (this.state === MonsterState.Run) {\n        // console.log(\"finish run animation\");\n        this.level.monsters[this.y][this.x] = null;\n        this.level.monsters[this.new_y][this.new_x] = this;\n        this.x = this.new_x;\n        this.y = this.new_y;\n      }\n\n      this.setAnimation(MonsterState.Idle, time);\n\n      // search hero near\n      const max_distance = 3;\n      const scan_x_min = Math.max(0, this.x - max_distance);\n      const scan_y_min = Math.max(0, this.y - max_distance);\n      const scan_x_max = Math.min(this.level.w, this.x + max_distance);\n      const scan_y_max = Math.min(this.level.h, this.y + max_distance);\n\n      const is_hero_near = !this.level.hero.dead\n        && this.level.hero.x >= scan_x_min && this.level.hero.x <= scan_x_max\n        && this.level.hero.y >= scan_y_min && this.level.hero.y <= scan_y_max;\n\n      // console.log(\"hero is near\", scan_x_min, scan_x_max, scan_y_min, scan_y_max);\n\n      if (is_hero_near) {\n        const dist_x = Math.abs(this.x - this.level.hero.x);\n        const dist_y = Math.abs(this.y - this.level.hero.y);\n\n        if (dist_x > 1) {\n          const move_x = Math.max(-1, Math.min(1, this.level.hero.x - this.x));\n          if (this.move(move_x, 0, time)) {\n            console.log(\"move to hero x\");\n            return;\n          }\n        }\n        if (dist_y > 0) {\n          const move_y = Math.max(-1, Math.min(1, this.level.hero.y - this.y));\n          if (this.move(0, move_y, time)) {\n            console.log(\"move to hero y\");\n            return;\n          }\n        }\n\n        if (dist_x <= 1 && dist_y <= 1 && this.rng.nextFloat() < this.luck) {\n          this.level.hero.hitDamage(this.damage, this.name, time);\n          return;\n        }\n      }\n\n      // random move ?\n      const random_move_percent = 0.1;\n      if (this.rng.nextFloat() < random_move_percent) {\n        const move_x = this.rng.nextRange(-1, 1);\n        const move_y = this.rng.nextRange(-1, 1);\n        // console.log(\"random move\", move_x, move_y);\n        if (this.move(move_x, move_y, time)) {\n          return;\n        }\n      }\n    }\n  };\n\n  move(d_x: number, d_y: number, time: number) {\n    this.is_left = d_x < 0;\n    if (this.state === MonsterState.Idle) {\n      const new_x = this.x + d_x;\n      const new_y = this.y + d_y;\n\n      // check is floor exists\n      if (!this.level.floor[new_y][new_x]) return false;\n\n      // check is no monster\n      if (this.level.monsters[new_y][new_x]) return false;\n\n      // start move animation\n      this.level.monsters[new_y][new_x] = new MovingMonsterWrapper(this); // mark as used\n      this.new_x = new_x;\n      this.new_y = new_y;\n      this.setAnimation(MonsterState.Run, time);\n      return true;\n    }\n    return false;\n  };\n\n  hitDamage(damage: number, name: string, time: number) {\n    this.level.log.push(`${this.name} damaged ${damage} by ${name}`);\n    this.health = Math.max(0, this.health - damage);\n    if (this.health <= 0) {\n      this.level.log.push(`${this.name} killed by ${name}`);\n      this.level.monsters[this.y][this.x] = null;\n      this.level.monsters[this.new_y][this.new_x] = null;\n      this.level.monsterList = this.level.monsterList.filter(s => s !== this);\n      if (this.rng.nextFloat() < this.luck) {\n        this.level.randomDrop(this.x, this.y);\n      }\n    }\n  };\n}"]}