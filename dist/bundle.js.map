{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/drop.ts","src/dungeon.ts","src/hero.ts","src/input.ts","src/inventory.ts","src/level.ts","src/monster.ts","src/rng.ts","src/scene.ts","src/tilemap.ts","src/tiny.monster.ts"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","Coins","[object Object]","rng","registry","this","tile","get","coins","nextRange","hero","addCoins","HealthFlask","health","inventory","add","item","cell","hill","count","HealthBigFlask","weaponNames","WeaponConfig","tileName","speed","distance","damage","level","Weapon","configs","frame","numOfFrames","prev","weapon","input_1","tilemap_1","hero_1","level_1","scene_1","rng_1","monster_1","drop_1","TileRegistry","load","canvas","document","getElementById","ctx","getContext","imageSmoothingEnabled","buffer","createElement","b_ctx","start","Date","getTime","RNG","joystick","Joystick","hero_weapon","create","HeroMonster","scene","Scene","setLevel","Level","renderLight","x","y","radius","diameter","box_x","box_y","grd","createRadialGradient","addColorStop","fillStyle","fillRect","renderMonster","monster","dx","dy","time","MovingMonsterWrapper","sw","w","sh","h","sx","sy","dw","dh","tile_offset_y","offset_x","offset_y","state","MonsterState","Run","maxTime","delta","Math","min","scale","new_x","new_y","width","height","save","translate","is_left","w_dw","w_dh","w_dy","w_dx","Hit","angle","rotate","PI","drawImage","tileSet","restore","renderTile","isAnim","sf","floor","render","animate","c_w","c_h","globalCompositeOperation","t_x","t_y","t_offset_x","t_offset_y","l_x","l_y","d_x","d_y","drop","wall","name","m_y","monsters","globalAlpha","renderLevel","h_m","healthMax","border","font","fillText","toString","renderHealth","textAlign","log","slice","renderLevelTitle","dead","renderYouDead","cells","grid_w","inv_w","grid_spacing","g_x","c_x","c_y","cell_size","d_scale","c_offset_x","textBaseline","renderInventory","renderHUD","window","requestAnimationFrame","inventory_1","heroMonsterNames","baseDamage","Inventory","setAnimation","Idle","action","scanDrop","scanHit","d","digit","processed","use","hit","triggered","exit","moveUp","move","moveDown","moveLeft","moveRight","pickedUp","max_distance","scan_x_min","max","scan_x_max","scan_y_min","scan_y_max","s_y","s_x","hitDamage","push","KeyBindState","KeyBind","Await","preventDefault","Pressed","digit1","digit2","digit3","digit4","digit5","digit6","digit7","digit8","digit9","digit0","init","num","addEventListener","keydown","bind","keyup","InventoryCell","stack","set","maxInStack","same","tiny_monster_1","Rect","b","l","rooms","corridorsV","corridorsH","createBuffer","monsterList","generate","fill","replace","defaultValue","rows","row","rooms_total","monsters_total","drop_total","generateRoom","m","room","choice","tinyMonsterNames","TinyMonster","randomDrop","hero_x","hero_y","resetPosition","room_w","room_h","isOverlap","expand","connected","max_x","min_x_w","rect","expandV","max_y","min_y_h","expandH","some","rnd","weight_coins","nextFloat","console","available","filter","forEach","fillRoom","fillCorridorH","fillCorridorV","r_y","r_x","replaceFloorRandomly","replaceLadder","replaceWallRandomly","replacements","last","ladder_x","ladder_y","wall_mid_top_replaces","wall_mid_bottom_replaces","replacement","seed","random","nextInt","end","rangeSize","randomUnder1","array","tileMap","Promise","resolve","img","Image","onload","ev","src","loadTileSet","response","fetch","text","split","line","match","parseInt","Tile","luck","dist_x","abs","dist_y","move_x","move_y","random_move_percent","s"],"mappings":"CAAA,SAAAA,EAAAC,EAAAC,EAAAC,GAAA,SAAAC,EAAAC,EAAAC,GAAA,IAAAJ,EAAAG,GAAA,CAAA,IAAAJ,EAAAI,GAAA,CAAA,IAAAE,EAAA,mBAAAC,SAAAA,QAAA,IAAAF,GAAAC,EAAA,OAAAA,EAAAF,GAAA,GAAA,GAAAI,EAAA,OAAAA,EAAAJ,GAAA,GAAA,IAAAK,EAAA,IAAAC,MAAA,uBAAAN,EAAA,KAAA,MAAAK,EAAAE,KAAA,mBAAAF,EAAA,IAAAG,EAAAX,EAAAG,GAAA,CAAAS,QAAA,IAAAb,EAAAI,GAAA,GAAAU,KAAAF,EAAAC,SAAA,SAAAd,GAAA,OAAAI,EAAAH,EAAAI,GAAA,GAAAL,IAAAA,KAAAa,EAAAA,EAAAC,QAAAd,EAAAC,EAAAC,EAAAC,GAAA,OAAAD,EAAAG,GAAAS,QAAA,IAAA,IAAAL,EAAA,mBAAAD,SAAAA,QAAAH,EAAA,EAAAA,EAAAF,EAAAa,OAAAX,IAAAD,EAAAD,EAAAE,IAAA,OAAAD,EAAA,CAAA,CAAAa,EAAA,CAAA,SAAAT,EAAAU,EAAAJ,iECeAA,EAAAK,MAAA,MAIEC,YAAYC,EAAUC,GACpBC,KAAKC,KAAOF,EAASG,IAAI,aACzBF,KAAKG,MAAQL,EAAIM,UAAU,EAAG,IAGhCP,SAASQ,GAEP,OADAA,EAAKC,SAASN,KAAKG,QACZ,IAIX,MAAaI,EAIXV,YAAYE,GACVC,KAAKC,KAAOF,EAASG,IAAI,aACzBF,KAAKQ,OAAS,EAGhBX,SAASQ,GACP,OAAOA,EAAKI,UAAUC,IAAIV,MAI5BH,KAAKc,GACH,OAAOA,aAAgBJ,EAGzBV,IAAIe,EAAqBP,GACvBA,EAAKQ,KAAKb,KAAKQ,QACfI,EAAKE,QACDF,EAAKE,OAAS,IAChBF,EAAKD,KAAO,KACZC,EAAKE,MAAQ,IAvBnBvB,EAAAgB,YAAAA,EA4BA,MAAaQ,EAIXlB,YAAYE,GACVC,KAAKC,KAAOF,EAASG,IAAI,iBACzBF,KAAKQ,OAAS,EAGhBX,SAASQ,GACP,OAAOA,EAAKI,UAAUC,IAAIV,MAG5BH,KAAKc,GACH,OAAOA,aAAgBI,EAGzBlB,IAAIe,EAAqBP,GACvBA,EAAKQ,KAAKb,KAAKQ,QACfI,EAAKE,QACDF,EAAKE,OAAS,IAChBF,EAAKD,KAAO,KACZC,EAAKE,MAAQ,IAtBnBvB,EAAAwB,eAAAA,EA2BaxB,EAAAyB,YAAc,CACzB,eACA,qBACA,uBACA,uBACA,oBACA,gBACA,2BACA,cACA,gBACA,mBACA,qBACA,aACA,iBACA,iBACA,oBACA,sBACA,sBACA,sBACA,yBACA,4BAGF,MAAaC,EAOXpB,YAAYqB,EAAkBC,EAAeC,EAAkBC,EAAgBC,GAC7EtB,KAAKkB,SAAWA,EAChBlB,KAAKmB,MAAQA,EACbnB,KAAKoB,SAAWA,EAChBpB,KAAKqB,OAASA,EACdrB,KAAKsB,MAAQA,EAGfzB,OAAOE,GACL,OAAO,IAAIwB,EAAOxB,EAASG,IAAIF,KAAKkB,UAAWlB,KAAKmB,MAAOnB,KAAKoB,SAAUpB,KAAKqB,SAhBnF9B,EAAA0B,aAAAA,EAmBSA,EAAAO,QAA0B,CAC/B,IAAIP,EAAa,eAAgB,IAAK,EAAG,EAAG,GAC5C,IAAIA,EAAa,qBAAsB,IAAK,EAAG,EAAG,GAClD,IAAIA,EAAa,uBAAwB,IAAK,EAAG,EAAG,GACpD,IAAIA,EAAa,uBAAwB,IAAK,EAAG,EAAG,GAEpD,IAAIA,EAAa,oBAAqB,IAAK,EAAG,GAAI,GAClD,IAAIA,EAAa,gBAAiB,IAAK,EAAG,EAAG,GAC7C,IAAIA,EAAa,2BAA4B,IAAK,EAAG,EAAG,GACxD,IAAIA,EAAa,cAAe,IAAK,EAAG,EAAG,GAE3C,IAAIA,EAAa,gBAAiB,IAAK,EAAG,EAAG,GAC7C,IAAIA,EAAa,mBAAoB,IAAK,EAAG,EAAG,GAChD,IAAIA,EAAa,qBAAsB,IAAK,EAAG,GAAI,GACnD,IAAIA,EAAa,aAAc,IAAK,EAAG,GAAI,GAE3C,IAAIA,EAAa,iBAAkB,IAAK,EAAG,GAAI,GAC/C,IAAIA,EAAa,iBAAkB,IAAK,EAAG,GAAI,GAC/C,IAAIA,EAAa,oBAAqB,IAAK,EAAG,GAAI,GAClD,IAAIA,EAAa,sBAAuB,IAAK,EAAG,GAAI,GAEpD,IAAIA,EAAa,sBAAuB,IAAK,EAAG,GAAI,IACpD,IAAIA,EAAa,sBAAuB,IAAK,EAAG,GAAI,KAIxD,MAAaM,EAQX1B,YAAYI,EAAYkB,EAAeC,EAAkBC,GACvDrB,KAAKC,KAAOA,EACZD,KAAKyB,MAAQ,EACbzB,KAAK0B,YAAc,EACnB1B,KAAKmB,MAAQA,EACbnB,KAAKoB,SAAWA,EAChBpB,KAAKqB,OAASA,EAGhBxB,SAASQ,GACP,OAAOA,EAAKI,UAAUC,IAAIV,MAG5BH,KAAKc,GACH,OAAO,EAGTd,IAAIe,EAAqBP,GACvB,MAAMsB,EAAOtB,EAAKuB,OAClBvB,EAAKuB,OAAS5B,KACV2B,GACFf,EAAKD,KAAOgB,EACZf,EAAKE,MAAQ,IAEbF,EAAKD,KAAO,KACZC,EAAKE,MAAQ,IAjCnBvB,EAAAgC,OAAAA,wZCzJA,MAAAM,EAAA5C,EAAA,WACA6C,EAAA7C,EAAA,aACA8C,EAAA9C,EAAA,UACA+C,EAAA/C,EAAA,WACAgD,EAAAhD,EAAA,WACAiD,EAAAjD,EAAA,SACAkD,EAAAlD,EAAA,aACAmD,EAAAnD,EAAA,WAEA,6CAIE,MAAMc,EAAW,IAAI+B,EAAAO,mBACftC,EAASuC,OAEf,MAAMC,EAA4BC,SAASC,eAAe,WACpDC,EAAMH,EAAOI,WAAW,MAC9BD,EAAIE,uBAAwB,EAE5B,MAAMC,EAASL,SAASM,cAAc,UAChCC,EAAQF,EAAOF,WAAW,MAChCI,EAAMH,uBAAwB,EAE9B,MAAMI,GAAQ,IAAIC,MAAOC,UACnBpD,EAAM,IAAIoC,EAAAiB,IACVC,EAAW,IAAIvB,EAAAwB,SACfC,EAAclB,EAAAnB,aAAaO,QAAQ,GAAG+B,OAAOxD,GAC7CM,EAAO,IAAI0B,EAAAyB,YAAYzD,EAAUqD,EAAS,EAAG,EAAG,WAAYE,EAAaN,GACzES,EAAQ,IAAIxB,EAAAyB,MAClBD,EAAME,SAAS,IAAI3B,EAAA4B,MAAM9D,EAAKC,EAAU0D,EAAOpD,EAAM,EAAG2C,IA0FxD,SAASa,EAAYC,EAAWC,EAAWC,GACzC,MAAMC,EAAWD,GAAU,EACrBE,EAAQJ,EAAIE,EACZG,EAAQJ,EAAIC,EAEZI,EAAMrB,EAAMsB,qBAAqBP,EAAGC,EAAG,GAAID,EAAGC,EAAGC,GACvDI,EAAIE,aAAa,GAAK,oBACtBF,EAAIE,aAAa,EAAG,eACpBvB,EAAMwB,UAAYH,EAClBrB,EAAMyB,SAASN,EAAOC,EAAOF,EAAUA,GA0IzC,SAASQ,EAAcC,EAAkBC,EAAYC,EAAYC,GAC/D,GAAGH,KAAaA,aAAmBvC,EAAA2C,sBAAuB,CACxD,MAAMC,EAAKL,EAAQzE,KAAK+E,EAClBC,EAAKP,EAAQzE,KAAKiF,EAClBC,EAAKT,EAAQzE,KAAK6D,EAAIiB,EAAKL,EAAQjD,MACnC2D,EAAKV,EAAQzE,KAAK8D,EAClBsB,EAjPI,EAiPCN,EACLO,EAlPI,EAkPCL,EAELM,EAAgBD,EAAK,GAE3B,IAAIE,EAAW,EACXC,EAAW,EAEf,GAAGf,EAAQgB,QAAUvD,EAAAwD,aAAaC,IAAK,CACrC,MAAM5C,EAAQ0B,EAAQ1B,MAGhB6C,EAFQnB,EAAQvD,MACFuD,EAAQzE,KAAKyB,YAE3BoE,EAAQC,KAAKC,IAAIH,EAAShB,EAAO7B,GAAS6C,EAEhDL,EAAWS,IAAcvB,EAAQwB,MAAQxB,EAAQZ,GAAKgC,EACtDL,EAAWQ,IAAcvB,EAAQyB,MAAQzB,EAAQX,GAAK+B,EAGxD,GAAGnB,EAAKa,EAAWH,EAAK,GAAKV,EAAKa,EAAW9C,EAAIH,OAAO6D,OACtDxB,EAAKa,EAAWH,EAAK,GAAKV,EAAKa,EAAW/C,EAAIH,OAAO8D,OAAQ,CAK7D,GAFA3D,EAAI4D,OACJ5D,EAAI6D,UAAU5B,EAAKa,EAAUZ,EAAKa,GAC/Bf,EAAQ8B,QAAS,CAElB,GADA9D,EAAIuD,OAAO,EAAG,GACXvB,EAAQ9C,OAAQ,CACjBc,EAAI4D,OACJ,MAAMtB,EAAIN,EAAQ9C,OAAO3B,KACnBwG,EA/QF,EA+QSzB,EAAEA,EACT0B,EAhRF,EAgRS1B,EAAEE,EAETyB,EAAOD,EAAO,GACdE,EAAO,EAIb,GAFAlE,EAAI6D,WAAWK,GAAOD,GAEnBjC,EAAQgB,QAAUvD,EAAAwD,aAAakB,IAAK,CACrC,IAAIC,EAAQ,GAAKpC,EAAQ9C,OAAOH,OAASiD,EAAQ9C,OAAOF,YAAc,GACtEgB,EAAI6D,UAAUE,GAAQ,EAAGC,GACzBhE,EAAIqE,OAAOD,EAAQf,KAAKiB,GAAK,KAC7BtE,EAAIuE,UAAUjC,EAAEkC,QAASlC,EAAElB,EAAGkB,EAAEjB,EAAGiB,EAAEA,EAAGA,EAAEE,IAAKuB,GAAQ,IAAKC,EAAMD,EAAMC,QAExEhE,EAAIuE,UAAUjC,EAAEkC,QAASlC,EAAElB,EAAGkB,EAAEjB,EAAGiB,EAAEA,EAAGA,EAAEE,EAAG,EAAG,EAAGuB,EAAMC,GAE3DhE,EAAIyE,UAENzE,EAAIuE,UAAUvC,EAAQzE,KAAKiH,QAAS/B,EAAIC,EAAIL,EAAIE,EAAI,EAAII,GAAKE,EAAeF,EAAIC,OAC3E,CACL,GAAGZ,EAAQ9C,OAAQ,CACjBc,EAAI4D,OACJ,MAAMtB,EAAIN,EAAQ9C,OAAO3B,KACnBwG,EAtSF,EAsSSzB,EAAEA,EACT0B,EAvSF,EAuSS1B,EAAEE,EAETyB,EAAOD,EAAO,GACdE,EAAO,GAIb,GAFAlE,EAAI6D,UAAUK,GAAOD,GAElBjC,EAAQgB,QAAUvD,EAAAwD,aAAakB,IAAK,CACrC,IAAIC,EAAQ,GAAKpC,EAAQ9C,OAAOH,OAASiD,EAAQ9C,OAAOF,YAAc,GACtEgB,EAAI6D,UAAUE,GAAQ,EAAGC,GACzBhE,EAAIqE,OAAOD,EAAQf,KAAKiB,GAAK,KAC7BtE,EAAIuE,UAAUjC,EAAEkC,QAASlC,EAAElB,EAAGkB,EAAEjB,EAAGiB,EAAEA,EAAGA,EAAEE,IAAKuB,GAAQ,IAAKC,EAAMD,EAAMC,QAExEhE,EAAIuE,UAAUjC,EAAEkC,QAASlC,EAAElB,EAAGkB,EAAEjB,EAAGiB,EAAEA,EAAGA,EAAEE,EAAG,EAAG,EAAGuB,EAAMC,GAE3DhE,EAAIyE,UAENzE,EAAIuE,UAAUvC,EAAQzE,KAAKiH,QAAS/B,EAAIC,EAAIL,EAAIE,EAAI,GAAIM,EAAeF,EAAIC,GAE7E5C,EAAIyE,YAKV,SAASC,EAAWnH,EAAY0E,EAAYC,GAC1C,GAAG3E,EAAM,CACP,MAAM8E,EAAK9E,EAAK+E,EACVC,EAAKhF,EAAKiF,EACVG,EAnUI,EAmUCN,EACLO,EApUI,EAoUCL,EACLQ,EAAWH,EAAK,GAEtB,GAAGX,EAAKU,EAAK,GAAKV,EAAKjC,EAAIH,OAAO6D,OAChCxB,EAAKa,EAAWH,EAAK,GAAKV,EAAKa,EAAW/C,EAAIH,OAAO8D,OACrD,GAAIpG,EAAKoH,QAAUpH,EAAKyB,YAAc,EAAG,CACvC,MAAMmD,GAAO,IAAI5B,MAAOC,UAClBoE,EAAKvB,KAAKwB,MAAM1C,EAAO,KAAO5E,EAAKyB,YACnCyD,EAAKlF,EAAK6D,EAAIiB,EAAKuC,EACnBlC,EAAKnF,EAAK8D,EAChBrB,EAAIuE,UAAUhH,EAAKiH,QAAS/B,EAAIC,EAAIL,EAAIE,EAAIN,EAAIC,EAAKa,EAAUJ,EAAIC,OAC9D,CACL,MAAMH,EAAKlF,EAAK6D,EACVsB,EAAKnF,EAAK8D,EAChBrB,EAAIuE,UAAUhH,EAAKiH,QAAS/B,EAAIC,EAAIL,EAAIE,EAAIN,EAAIC,EAAKa,EAAUJ,EAAIC,MAjV3E,SAASkC,IACP,MAAM3C,GAAO,IAAI5B,MAAOC,UACxBO,EAAMnC,MAAMmG,QAAQ5C,GAMtB,SAAqBA,GACnB,MAAM6C,EAAMnF,EAAO6D,MACbuB,EAAMpF,EAAO8D,OACnBxD,EAAOuD,MAAQsB,EACf7E,EAAOwD,OAASsB,EAEhBjF,EAAI4D,OACJ5D,EAAI6B,UAAY,gBAChB7B,EAAI8B,SAAS,EAAG,EAAGkD,EAAKC,GAExB5E,EAAMuD,OACNvD,EAAMwB,UAAY,QAClBxB,EAAMyB,SAAS,EAAG,EAAGkD,EAAKC,GAC1B5E,EAAM6E,yBAA2B,UAGjC/D,EAAY6D,GAAO,EAAGC,GAAO,EAAG,KAEhC,IAAIE,EAA2B,GAArBpE,EAAMnC,MAAMjB,KAAKyD,EA3Bf,EA2BgC,EAAI4D,EAAM,EAClDI,EAA2B,GAArBrE,EAAMnC,MAAMjB,KAAK0D,EA5Bf,EA4BgC,EAAI4D,EAAM,EAGtD,GAAGlE,EAAMnC,MAAMjB,KAAKqF,QAAUvD,EAAAwD,aAAaC,IAAK,CAC9C,MAAM5C,EAAQS,EAAMnC,MAAMjB,KAAK2C,MACzB7B,EAAQsC,EAAMnC,MAAMjB,KAAKc,MACzBO,EAAc+B,EAAMnC,MAAMjB,KAAKJ,KAAKyB,YACpCmE,EAAU1E,EAAQO,EAClBoE,EAAQC,KAAKC,IAAIH,EAAShB,EAAO7B,GAAS6C,EAE1CkC,EAAa9B,IAAcxC,EAAMnC,MAAMjB,KAAK6F,MAAQzC,EAAMnC,MAAMjB,KAAKyD,GAAKgC,EAC1EkC,EAAa/B,IAAcxC,EAAMnC,MAAMjB,KAAK8F,MAAQ1C,EAAMnC,MAAMjB,KAAK0D,GAAK+B,EAEhF+B,GAAYE,EACZD,GAAYE,EAId,IAAI,IAAIC,EAAI,EAAGA,EAAIxE,EAAMnC,MAAM0D,EAAGiD,IAChC,IAAI,IAAIC,EAAI,EAAGA,EAAIzE,EAAMnC,MAAM4D,EAAGgD,IAAO,CACvC,MAAMC,EAAmB,GAANF,EAhDX,EAgDKJ,EACPO,EAAmB,GAANF,EAjDX,EAiDKJ,EACbV,EAAW3D,EAAMnC,MAAMiG,MAAMW,GAAKD,GAAME,EAAKC,GAC1C3E,EAAMnC,MAAM+G,KAAKH,GAAKD,IACvBb,EAAW3D,EAAMnC,MAAM+G,KAAKH,GAAKD,GAAKhI,KAAMkI,EAAKC,GAKvD,IAAI,IAAIF,EAAI,EAAGA,EAAIzE,EAAMnC,MAAM4D,EAAGgD,IAAO,CACvC,IAAI,IAAID,EAAI,EAAGA,EAAIxE,EAAMnC,MAAM0D,EAAGiD,IAAO,CACvC,MAAME,EAAmB,GAANF,EA3DX,EA2DKJ,EACPO,EAAmB,GAANF,EA5DX,EA4DKJ,EACP7H,EAAOwD,EAAMnC,MAAMgH,KAAKJ,GAAKD,GAChChI,IACDmH,EAAWnH,EAAMkI,EAAKC,GACJ,+BAAdnI,EAAKsI,MAAuD,gCAAdtI,EAAKsI,MACrD1E,EAAYsE,EAAM,GAAWC,EAAM,GAAW,MAIpD,GAAGF,EAAMzE,EAAMnC,MAAM4D,EAAG,EACtB,IAAK,IAAI+C,EAAM,EAAGA,EAAMxE,EAAMnC,MAAM0D,EAAGiD,IAAO,CAC5C,MAAMO,EAAMN,EAAM,EACZC,EAAmB,GAANF,EAxEb,EAwEOJ,EACPO,EAAmB,GAANI,EAzEb,EAyEOV,EACbrD,EAAchB,EAAMnC,MAAMmH,SAASD,GAAKP,GAAME,EAAKC,EAAKvD,IAK9DnC,EAAIyE,UAEJzE,EAAI4D,OACJ5D,EAAIgG,YAAc,GAClBhG,EAAIkF,yBAA2B,WAC/BlF,EAAIuE,UAAUpE,EAAQ,EAAG,GACzBH,EAAIyE,UAjFJwB,CAAY9D,GAgGd,SAAmBA,IAMnB,SAAsBA,GACpB,MAGM+D,EAAMnF,EAAMnC,MAAMjB,KAAKwI,UACvB3D,EAAIzB,EAAMnC,MAAMjB,KAAKG,OAG3BkC,EAAI4D,OACJ5D,EAAI6D,UAAU,GAAI,IAGlB7D,EAAI6B,UAAY,aAChB7B,EAAI8B,SAAS,EAAG,EAAGsE,EAVH,GAU0BF,EAAKE,IAG/CpG,EAAI6B,UAAY,eAChB7B,EAAI8B,SAhBW,EAAA,EAEC,GAcuBU,EAfxB,IAkBfxC,EAAI6B,UAAY,mBAChB7B,EAAIqG,KAAO,wBACXrG,EAAIsG,SAAS9D,EAAE+D,WAAYH,EAAYA,IAGvCpG,EAAIsG,SAAS,IAAI3I,EAAKF,QAAS,EAAG,IAElCuC,EAAIyE,WAhCJ+B,GAkCF,SAA0BrE,GACxB,MAAM6C,EAAMnF,EAAO6D,MACbuB,EAAMpF,EAAO8D,OAGnB3D,EAAI4D,OACJ5D,EAAI6D,UAAUmB,EAAM,EAAG,IACvBhF,EAAI6B,UAAY,mBAChB7B,EAAIyG,UAAY,SAChBzG,EAAIqG,KAAO,wBACXrG,EAAIsG,SAAS,SAASvF,EAAMnC,MAAMA,QAAS,EAAG,GAC9CoB,EAAIyE,UAGJ1D,EAAMnC,MAAM8H,IAAM3F,EAAMnC,MAAM8H,IAAIC,OAAO,GACzC3G,EAAI4D,OACJ5D,EAAI6D,UAAU,GAAIoB,EAAM,KACxB,IAAI,IAAI7I,EAAE,EAAGA,EAAE2E,EAAMnC,MAAM8H,IAAI3J,OAAQX,IACrC4D,EAAI6B,UAAY,mBAChB7B,EAAIqG,KAAO,wBACXrG,EAAIsG,SAASvF,EAAMnC,MAAM8H,IAAItK,GAAI,EAAO,GAAJA,GAGtC4D,EAAIyE,UAxDJmC,GA0DF,SAAuBzE,GACrB,MAAM6C,EAAMnF,EAAO6D,MACbuB,EAAMpF,EAAO8D,OAEhB5C,EAAMnC,MAAMjB,KAAKkJ,OAClB7G,EAAI4D,OAEJ5D,EAAI6B,UAAY,qBAChB7B,EAAI8B,SAAS,EAAG,EAAGkD,EAAKC,GAExBjF,EAAI6D,UAAUmB,EAAM,EAAGC,EAAM,GAE7BjF,EAAI6B,UAAY,eAChB7B,EAAIyG,UAAY,SAChBzG,EAAIqG,KAAO,yBACXrG,EAAIsG,SAAS,WAAY,EAAG,GAC5BtG,EAAIyE,WAzENqC,GA4EF,SAAyB3E,GACvB,MAAM6C,EAAMnF,EAAO6D,MACbuB,EAAMpF,EAAO8D,OAEboD,EAAQhG,EAAMnC,MAAMjB,KAAKI,UAAUgJ,MAEnCC,EAASD,EAAMhK,OAGfkK,EA5LM,GA4LoB,GAATD,EAFF,GAKrBhH,EAAI4D,OACJ5D,EAAI6D,WAAWmB,GAAO,IAAMiC,GAAS,GAAIhC,EAH3B1B,GAGyC,IAGvDvD,EAAI6B,UAAY,mBAChB7B,EAAI8B,SAAS,EAAG,EAAGmF,EAPL1D,IASdvD,EAAI6D,UAAUqD,EAAsBA,GAEpC,IAAK,IAAIC,EAAM,EAAGA,EAAMH,EAAQG,IAAO,CACrC,MAAMC,EAAqB,GAAND,EAzMX,EA0MJE,EAAM,EAEZrH,EAAI6B,UAAY,gBAChB7B,EAAI8B,SAASsF,EAAK,EAAGE,GAAmBA,IACxC,MAAMpJ,EAAO6I,EAAMI,GACnB,GAAGjJ,EAAKD,KAAM,CACZ,MAAMV,EAAOW,EAAKD,KAAKV,KACvB,IAAIkF,EAAKlF,EAAK6D,EACd,MAAMsB,EAAKnF,EAAK8D,EACVgB,EAAK9E,EAAK+E,EACVC,EAAKhF,EAAKiF,EAEhB,GAAIjF,EAAKoH,QAAUpH,EAAKyB,YAAc,EAAG,CACvC,MAAM4F,EAAKvB,KAAKwB,MAAM1C,EAAO,KAAO5E,EAAKyB,YACzCyD,EAAKlF,EAAK6D,EAAIiB,EAAKuC,EAGrB,MAAM2C,EAAUhF,GAnCF,GAmCoB,EAnCpB,GAmCoCA,EAC5CI,EA5NE,EA4NGN,EAAakF,EAClB3E,EA7NE,EA6NGL,EAAagF,EAClBC,EAAa,IAA8B7E,GAAM,GAEvD3C,EAAIuE,UAAUhH,EAAKiH,QAAS/B,EAAIC,EAAIL,EAAIE,EAAI6E,EAAMI,EAAYH,EAAK1E,EAAIC,GACvE5C,EAAIyG,UAAY,MAChBzG,EAAIyH,aAAe,MACnBzH,EAAIqG,KAAO,wBACXrG,EAAI6B,UAAY,mBAChB7B,EAAIsG,SAASpI,EAAKE,MAAMmI,WAAYa,EAAM,GAAqB,EAAGE,KAGtEtH,EAAIyE,UAhIJiD,CAAgBvF,GAnGhBwF,CAAUxF,GACVyF,OAAOC,sBAAsB/C,GAkV/BA,MA/WF,yLCTA,MAAAgD,EAAAvL,EAAA,eAGAkD,EAAAlD,EAAA,aAIaM,EAAAkL,iBAAmB,CAC9B,QACA,QACA,WACA,WACA,WACA,YAGFlL,EAAAiE,YAAA,MAuBE3D,YAAYE,EAAwBqD,EAAoBU,EAAWC,EAAWwE,EAAc3G,EAAgBiD,GAC1G7E,KAAKD,SAAWA,EAChBC,KAAKoD,SAAWA,EAChBpD,KAAK8D,EAAIA,EACT9D,KAAK+D,EAAIA,EACT/D,KAAKkG,MAAQpC,EACb9D,KAAKmG,MAAQpC,EACb/D,KAAKwG,SAAU,EACfxG,KAAKuI,KAAOA,EACZvI,KAAK6I,UAAY,GACjB7I,KAAKQ,OAASR,KAAK6I,UACnB7I,KAAKG,MAAQ,EACbH,KAAK0K,WAAa,EAClB1K,KAAKuJ,MAAO,EACZvJ,KAAK4B,OAASA,EACd5B,KAAKmB,MAAQ,IACbnB,KAAKS,UAAY,IAAI+J,EAAAG,UACrB3K,KAAK4K,aAAazI,EAAAwD,aAAakF,KAAMhG,GAGvCxD,aACE,OAAOrB,KAAK0K,WAAa1K,KAAK4B,OAAOP,OAGvCxB,SAASyB,GACPtB,KAAKsB,MAAQA,EAGfzB,aAAa6F,EAAqBb,GAChC,IAAK7E,KAAKuJ,KACR,OAAQ7D,GACN,KAAKvD,EAAAwD,aAAakF,KAChB7K,KAAK0F,MAAQA,EACb1F,KAAKC,KAAOD,KAAKD,SAASG,IAAIF,KAAKuI,KAAO,cAC1CvI,KAAKyB,MAAQ,EACbzB,KAAKgD,MAAQ6B,EACb,MACF,KAAK1C,EAAAwD,aAAaC,IAChB5F,KAAK0F,MAAQA,EACb1F,KAAKC,KAAOD,KAAKD,SAASG,IAAIF,KAAKuI,KAAO,aAC1CvI,KAAKyB,MAAQ,EACbzB,KAAKgD,MAAQ6B,EACb,MACF,KAAK1C,EAAAwD,aAAakB,IAChB7G,KAAK0F,MAAQA,EACb1F,KAAKC,KAAOD,KAAKD,SAASG,IAAIF,KAAKuI,KAAO,aAC1CvI,KAAKyB,MAAQ,EACbzB,KAAK4B,OAAOH,MAAQ,EACpBzB,KAAKgD,MAAQ6B,GAMrBhF,QAAQgF,GACN,OAAQ7E,KAAK0F,OACX,KAAKvD,EAAAwD,aAAakF,KAChB7K,KAAKyB,MAAQsE,KAAKwB,OAAO1C,EAAO7E,KAAKgD,OAAShD,KAAKmB,OAC9CnB,KAAK8K,OAAOjG,IACX7E,KAAKyB,OAASzB,KAAKC,KAAKyB,aAC1B1B,KAAK4K,aAAazI,EAAAwD,aAAakF,KAAMhG,GAGzC,MACF,KAAK1C,EAAAwD,aAAaC,IAChB5F,KAAKyB,MAAQsE,KAAKwB,OAAO1C,EAAO7E,KAAKgD,OAAShD,KAAKmB,OAC/CnB,KAAKyB,OAASzB,KAAKC,KAAKyB,cAC1B1B,KAAKsB,MAAMmH,SAASzI,KAAK+D,GAAG/D,KAAK8D,GAAK,KACtC9D,KAAKsB,MAAMmH,SAASzI,KAAKmG,OAAOnG,KAAKkG,OAASlG,KAC9CA,KAAK8D,EAAI9D,KAAKkG,MACdlG,KAAK+D,EAAI/D,KAAKmG,MACdnG,KAAK+K,WACA/K,KAAK8K,OAAOjG,IACf7E,KAAK4K,aAAazI,EAAAwD,aAAakF,KAAMhG,IAGzC,MACF,KAAK1C,EAAAwD,aAAakB,IAChB7G,KAAK4B,OAAOH,MAAQsE,KAAKwB,OAAO1C,EAAO7E,KAAKgD,OAAShD,KAAK4B,OAAOT,OAC7DnB,KAAK4B,OAAOH,OAASzB,KAAK4B,OAAOF,cACnC1B,KAAKgL,QAAQnG,GACb7E,KAAK+K,WACA/K,KAAK8K,OAAOjG,IACf7E,KAAK4K,aAAazI,EAAAwD,aAAakF,KAAMhG,KAO/ChF,OAAOgF,GACL7E,KAAK+K,WACL,IAAK,IAAIE,EAAI,EAAGA,EAAI,GAAIA,IAAK,CAC3B,MAAMC,GAASD,EAAI,GAAK,GACnBjL,KAAKoD,SAAS8H,MAAMA,GAAOC,YAC9BnL,KAAKoD,SAAS8H,MAAMA,GAAOC,WAAY,EACvCnL,KAAKS,UAAUgJ,MAAMwB,GAAGG,IAAIpL,OAIhC,OAAIA,KAAKoD,SAASiI,IAAIC,YAActL,KAAKoD,SAASiI,IAAIF,UACN,iBAA1CnL,KAAKsB,MAAMiG,MAAMvH,KAAK+D,GAAG/D,KAAK8D,GAAGyE,MACnCvI,KAAKoD,SAASiI,IAAIF,WAAY,EAC9BnL,KAAKsB,MAAMiK,KAAK1G,IACT,IAEP7E,KAAK4K,aAAazI,EAAAwD,aAAakB,IAAKhC,IAC7B,MAGP7E,KAAKoD,SAASoI,OAAOF,WAActL,KAAKoD,SAASoI,OAAOL,YAC1DnL,KAAKoD,SAASoI,OAAOL,WAAY,GAC7BnL,KAAKyL,KAAK,GAAI,EAAG5G,UAInB7E,KAAKoD,SAASsI,SAASJ,WAActL,KAAKoD,SAASsI,SAASP,YAC9DnL,KAAKoD,SAASsI,SAASP,WAAY,GAC/BnL,KAAKyL,KAAK,EAAG,EAAG5G,UAIlB7E,KAAKoD,SAASuI,SAASL,WAActL,KAAKoD,SAASuI,SAASR,YAC9DnL,KAAKoD,SAASuI,SAASR,WAAY,EACnCnL,KAAKwG,SAAU,GACXxG,KAAKyL,MAAM,EAAG,EAAG5G,SAInB7E,KAAKoD,SAASwI,UAAUN,WAActL,KAAKoD,SAASwI,UAAUT,YAChEnL,KAAKoD,SAASwI,UAAUT,WAAY,EACpCnL,KAAKwG,SAAU,GACXxG,KAAKyL,KAAK,EAAG,EAAG5G,OAOxBhF,WACE,GAAIG,KAAKsB,MAAM+G,KAAKrI,KAAK+D,GAAG/D,KAAK8D,GAAI,CACtB9D,KAAKsB,MAAM+G,KAAKrI,KAAK+D,GAAG/D,KAAK8D,GACjC+H,SAAS7L,QAChBA,KAAKsB,MAAM+G,KAAKrI,KAAK+D,GAAG/D,KAAK8D,GAAK,OAKxCjE,QAAQgF,GACN,MAAMiH,EAAe9L,KAAK4B,OAAOR,SAE3B2K,EAAa/L,KAAKwG,QAAUT,KAAKiG,IAAI,EAAGhM,KAAK8D,EAAIgI,GAAgB9L,KAAK8D,EACtEmI,EAAajM,KAAKwG,QAAUxG,KAAK8D,EAAIiC,KAAKC,IAAIhG,KAAKsB,MAAM0D,EAAGhF,KAAK8D,EAAIgI,GAErEI,EAAanG,KAAKiG,IAAI,EAAGhM,KAAK+D,EAAI+H,GAClCK,EAAapG,KAAKC,IAAIhG,KAAKsB,MAAM4D,EAAGlF,KAAK+D,EAAI+H,GAEnD,IAAK,IAAIM,EAAMF,EAAYE,GAAOD,EAAYC,IAC5C,IAAK,IAAIC,EAAMN,EAAYM,GAAOJ,EAAYI,IAE5C,GAAMA,IAAQrM,KAAK8D,GAAKsI,IAAQpM,KAAK+D,EAAI,CACvC,MAAMW,EAAU1E,KAAKsB,MAAMmH,SAAS2D,GAAKC,GACrC3H,GACFA,EAAQ4H,UAAUtM,KAAKqB,OAAQrB,KAAKuI,KAAM1D,IAOpDhF,KAAKsI,EAAaC,EAAavD,GAC7B,IAAK7E,KAAKuJ,MAAQvJ,KAAK0F,QAAUvD,EAAAwD,aAAakF,KAAM,CAClD,MAAM3E,EAAQlG,KAAK8D,EAAIqE,EACjBhC,EAAQnG,KAAK+D,EAAIqE,EAGvB,QAAKpI,KAAKsB,MAAMiG,MAAMpB,GAAOD,MAGzBlG,KAAKsB,MAAMmH,SAAStC,GAAOD,KAG/BlG,KAAKsB,MAAMmH,SAAStC,GAAOD,GAAS,IAAI/D,EAAA2C,qBAAqB9E,MAC7DA,KAAKkG,MAAQA,EACblG,KAAKmG,MAAQA,EACbnG,KAAK4K,aAAazI,EAAAwD,aAAaC,IAAKf,IAC7B,IAET,OAAO,EAGThF,cAAciE,EAAWC,GACvB/D,KAAK8D,EAAIA,EACT9D,KAAK+D,EAAIA,EACT/D,KAAKkG,MAAQpC,EACb9D,KAAKmG,MAAQpC,EAGflE,UAAUwB,EAAgBkH,EAAc1D,GACjC7E,KAAKuJ,OACRvJ,KAAKsB,MAAM8H,IAAImD,KAAK,GAAGvM,KAAKuI,gBAAgBlH,QAAakH,KACzDvI,KAAKQ,OAASuF,KAAKiG,IAAI,EAAGhM,KAAKQ,OAASa,GACpCrB,KAAKQ,QAAU,IACjBR,KAAKsB,MAAM8H,IAAImD,KAAK,GAAGvM,KAAKuI,kBAAkBA,KAC9CvI,KAAK4K,aAAazI,EAAAwD,aAAakF,KAAMhG,GACrC7E,KAAKuJ,MAAO,IAKlB1J,KAAKW,GACHR,KAAKQ,OAASuF,KAAKC,IAAIhG,KAAK6I,UAAW7I,KAAKQ,OAASA,GAGvDX,SAASM,GACPH,KAAKG,MAAQH,KAAKG,MAAQA,sEC9P9B,IAAKqM,mDAAL,SAAKA,GAAcA,EAAAA,EAAA,MAAA,GAAA,QAAWA,EAAAA,EAAA,QAAA,GAAA,UAA9B,CAAKA,IAAAA,EAAY,KAEjB,MAAaC,EAMX5M,YAAYR,GACVW,KAAKX,KAAOA,EACZW,KAAK0F,MAAQ8G,EAAaE,MAC1B1M,KAAKsL,WAAY,EACjBtL,KAAKmL,WAAY,EAGnBtL,QAAQnB,GACFA,EAAEW,OAASW,KAAKX,OAClBX,EAAEiO,iBACE3M,KAAK0F,QAAU8G,EAAaE,QAC9B1M,KAAKsL,WAAY,EACjBtL,KAAKmL,WAAY,EACjBnL,KAAK0F,MAAQ8G,EAAaI,UAKhC/M,MAAMnB,GACAA,EAAEW,OAASW,KAAKX,OAClBX,EAAEiO,iBACE3M,KAAK0F,QAAU8G,EAAaI,UAC9B5M,KAAKsL,WAAY,EACjBtL,KAAK0F,MAAQ8G,EAAaE,SA7BlCnN,EAAAkN,QAAAA,EAmCAlN,EAAA8D,SAAA,MAiBExD,cACEG,KAAKwL,OAAS,IAAIiB,EAAQ,QAC1BzM,KAAK2L,SAAW,IAAIc,EAAQ,QAC5BzM,KAAK0L,SAAW,IAAIe,EAAQ,QAC5BzM,KAAK4L,UAAY,IAAIa,EAAQ,QAC7BzM,KAAKqL,IAAM,IAAIoB,EAAQ,QAEvBzM,KAAK6M,OAAS,IAAIJ,EAAQ,UAC1BzM,KAAK8M,OAAS,IAAIL,EAAQ,UAC1BzM,KAAK+M,OAAS,IAAIN,EAAQ,UAC1BzM,KAAKgN,OAAS,IAAIP,EAAQ,UAC1BzM,KAAKiN,OAAS,IAAIR,EAAQ,UAC1BzM,KAAKkN,OAAS,IAAIT,EAAQ,UAC1BzM,KAAKmN,OAAS,IAAIV,EAAQ,UAC1BzM,KAAKoN,OAAS,IAAIX,EAAQ,UAC1BzM,KAAKqN,OAAS,IAAIZ,EAAQ,UAC1BzM,KAAKsN,OAAS,IAAIb,EAAQ,UAC1BzM,KAAKuN,OAGP1N,MAAM2N,GACJ,OAAQA,GACN,KAAK,EAAG,OAAOxN,KAAK6M,OACpB,KAAK,EAAG,OAAO7M,KAAK8M,OACpB,KAAK,EAAG,OAAO9M,KAAK+M,OACpB,KAAK,EAAG,OAAO/M,KAAKgN,OACpB,KAAK,EAAG,OAAOhN,KAAKiN,OACpB,KAAK,EAAG,OAAOjN,KAAKkN,OACpB,KAAK,EAAG,OAAOlN,KAAKmN,OACpB,KAAK,EAAG,OAAOnN,KAAKoN,OACpB,KAAK,EAAG,OAAOpN,KAAKqN,OACpB,KAAK,EAAG,OAAOrN,KAAKsN,QAIxBzN,OACEyK,OAAOmD,iBAAiB,UAAWzN,KAAK0N,QAAQC,KAAK3N,OACrDsK,OAAOmD,iBAAiB,QAASzN,KAAK4N,MAAMD,KAAK3N,OAGnDH,QAAQnB,GACNsB,KAAKwL,OAAOkC,QAAQhP,GACpBsB,KAAK2L,SAAS+B,QAAQhP,GACtBsB,KAAK0L,SAASgC,QAAQhP,GACtBsB,KAAK4L,UAAU8B,QAAQhP,GACvBsB,KAAKqL,IAAIqC,QAAQhP,GACjBsB,KAAK6M,OAAOa,QAAQhP,GACpBsB,KAAK8M,OAAOY,QAAQhP,GACpBsB,KAAK+M,OAAOW,QAAQhP,GACpBsB,KAAKgN,OAAOU,QAAQhP,GACpBsB,KAAKiN,OAAOS,QAAQhP,GACpBsB,KAAKkN,OAAOQ,QAAQhP,GACpBsB,KAAKmN,OAAOO,QAAQhP,GACpBsB,KAAKoN,OAAOM,QAAQhP,GACpBsB,KAAKqN,OAAOK,QAAQhP,GACpBsB,KAAKsN,OAAOI,QAAQhP,GAGtBmB,MAAMnB,GACJsB,KAAKwL,OAAOoC,MAAMlP,GAClBsB,KAAK2L,SAASiC,MAAMlP,GACpBsB,KAAK0L,SAASkC,MAAMlP,GACpBsB,KAAK4L,UAAUgC,MAAMlP,GACrBsB,KAAKqL,IAAIuC,MAAMlP,GACfsB,KAAK6M,OAAOe,MAAMlP,GAClBsB,KAAK8M,OAAOc,MAAMlP,GAClBsB,KAAK+M,OAAOa,MAAMlP,GAClBsB,KAAKgN,OAAOY,MAAMlP,GAClBsB,KAAKiN,OAAOW,MAAMlP,GAClBsB,KAAKkN,OAAOU,MAAMlP,GAClBsB,KAAKmN,OAAOS,MAAMlP,GAClBsB,KAAKoN,OAAOQ,MAAMlP,GAClBsB,KAAKqN,OAAOO,MAAMlP,GAClBsB,KAAKsN,OAAOM,MAAMlP,2FC5HtBa,EAAAoL,UAAA,MAGE9K,cACEG,KAAKyJ,MAAQ,GACb,IAAK,IAAI3K,EAAI,EAAGA,EAAI,GAAIA,IACtBkB,KAAKyJ,MAAM3K,GAAK,IAAI+O,EAIxBhO,IAAIc,GACF,IAAK,IAAI7B,EAAI,EAAGA,EAAIkB,KAAKyJ,MAAMhK,OAAQX,IACrC,GAAIkB,KAAKyJ,MAAM3K,GAAGgP,MAAMnN,GACtB,OAAO,EAGX,IAAK,IAAI7B,EAAI,EAAGA,EAAIkB,KAAKyJ,MAAMhK,OAAQX,IACrC,GAAIkB,KAAKyJ,MAAM3K,GAAGiP,IAAIpN,GACpB,OAAO,EAGX,OAAO,IAIX,MAAakN,EAKXhO,cACEG,KAAKgO,WAAa,EAClBhO,KAAKW,KAAO,KACZX,KAAKc,MAAQ,EAGfjB,MAAMc,GACJ,SAAIX,KAAKW,MAAQX,KAAKW,KAAKsN,KAAKtN,IAASX,KAAKc,MAAQd,KAAKgO,cACzDhO,KAAKc,SACE,GAKXjB,IAAIc,GACF,OAAKX,KAAKW,OACRX,KAAKW,KAAOA,EACZX,KAAKc,MAAQ,GACN,GAKXjB,IAAIQ,GACF,SAAIL,KAAKW,MAAQX,KAAKc,MAAQ,KAC5Bd,KAAKW,KAAKyK,IAAIpL,KAAMK,IACb,IA/Bbd,EAAAsO,cAAAA,wFC5BA,MAAAK,EAAAjP,EAAA,kBACAmD,EAAAnD,EAAA,UAUA,MAAakP,EAMXtO,YAAYiE,EAAWC,EAAWiB,EAAWE,GAC3ClF,KAAK8D,EAAIA,EACT9D,KAAK+D,EAAIA,EACT/D,KAAKgF,EAAIA,EACThF,KAAKkF,EAAIA,EAGXrF,SACE,MAAMV,EAAIa,KACV,OAAO,IAAImO,EACThP,EAAE2E,EAnBO,EAoBT3E,EAAE4E,EAnBO,EAoBT5E,EAAE6F,EArBO,EAAA,EAsBT7F,EAAE+F,EArBO,EAAA,GAyBbrF,UACE,MAAMV,EAAIa,KACV,OAAO,IAAImO,EACThP,EAAE2E,EA7BO,EA8BT3E,EAAE4E,EACF5E,EAAE6F,EA/BO,EAAA,EAgCT7F,EAAE+F,GAINrF,UACE,MAAMV,EAAIa,KACV,OAAO,IAAImO,EACThP,EAAE2E,EACF3E,EAAE4E,EAvCO,EAwCT5E,EAAE6F,EACF7F,EAAE+F,EAzCO,EAAA,GA6CbrF,UAAUuO,GACR,MAAMjP,EAAIa,KACV,OAAOb,EAAE2E,EAAIsK,EAAEtK,EAAIsK,EAAEpJ,GAChB7F,EAAE2E,EAAI3E,EAAE6F,EAAIoJ,EAAEtK,GACd3E,EAAE4E,EAAIqK,EAAErK,EAAIqK,EAAElJ,GACd/F,EAAE4E,EAAI5E,EAAE+F,EAAIkJ,EAAErK,GAhDvBxE,EAAA4O,KAAAA,EAoDA,MAAavK,EAmBX/D,YAAYC,EAAUC,EAAwB0D,EAAcpD,EAAmBgO,EAAWxJ,GACxF7E,KAAKF,IAAMA,EACXE,KAAKD,SAAWA,EAChBC,KAAKyD,MAAQA,EACbzD,KAAKsB,MAAQ+M,EACbrO,KAAKgF,EAAI,IACThF,KAAKkF,EAAI,IAETlF,KAAKoJ,IAAM,GACXpJ,KAAKsO,MAAQ,GACbtO,KAAKuO,WAAa,GAClBvO,KAAKwO,WAAa,GAElBxO,KAAKuH,MAAQvH,KAAKyO,aAAa,IAAM,MACrCzO,KAAKqI,KAAOrI,KAAKyO,aAAa,IAAM,MACpCzO,KAAKsI,KAAOtI,KAAKyO,aAAa,IAAM,MAEpCzO,KAAK0O,YAAc,GACnB1O,KAAKK,KAAOA,EACZL,KAAKyI,SAAWzI,KAAKyO,aAAa,IAAM,MAExCzO,KAAK2O,SAAS9J,GACd7E,KAAK4O,OACL5O,KAAK6O,UAGPhP,aAAgBiP,GACd,MAAMC,EAAc,GACpB,IAAK,IAAIhL,EAAI,EAAGA,EAAI/D,KAAKkF,EAAGnB,IAAK,CAC/B,MAAMiL,EAAW,GACjBD,EAAKxC,KAAKyC,GACV,IAAK,IAAIlL,EAAI,EAAGA,EAAI9D,KAAKgF,EAAGlB,IAC1BkL,EAAIzC,KAAKuC,KAGb,OAAOC,EAGTlP,SAASgF,GACP,MAAMoK,EAAc,EAAIjP,KAAKsB,MACvB4N,EAAiB,EAAIlP,KAAKsB,MAC1B6N,EAAa,EAAInP,KAAKsB,MAG5B,IAAK,IAAI7C,EAAI,EAAGA,EAAIwQ,EAAaxQ,IAC/BuB,KAAKoP,eAIP,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAgBG,IAAK,CACvC,MAAM5Q,EAAIuB,KAAKF,IAAIM,UAAU,EAAGJ,KAAKsO,MAAM7O,QACrC6P,EAAOtP,KAAKsO,MAAM7P,GACxB,IAAK,IAAIG,EAAI,EAAGA,EAAI,GAAIA,IAAK,CAC3B,MAAMkF,EAAIwL,EAAKxL,EAAI9D,KAAKF,IAAIM,UAAU,EAAGkP,EAAKtK,GACxCjB,EAAIuL,EAAKvL,EAAI/D,KAAKF,IAAIM,UAAU,EAAGkP,EAAKpK,GAC9C,IAAKlF,KAAKyI,SAAS1E,GAAGD,GAAI,CACxB,MAAMyE,EAAOvI,KAAKF,IAAIyP,OAAOrB,EAAAsB,kBACvB9K,EAAU,IAAIwJ,EAAAuB,YAAYzP,KAAKF,IAAKE,KAAKD,SAAUC,KAAM8D,EAAGC,EAAGwE,EAAM1D,GAC3E7E,KAAK0O,YAAYnC,KAAK7H,GACtB1E,KAAKyI,SAAS1E,GAAGD,GAAKY,EACtB,QAMN,IAAK,IAAIuG,EAAI,EAAGA,EAAIkE,EAAYlE,IAAK,CACnC,MAAMqE,EAAOtP,KAAKF,IAAIyP,OAAOvP,KAAKsO,OAClC,IAAK,IAAI1P,EAAI,EAAGA,EAAI,GAAIA,IAAK,CAC3B,MAAMkF,EAAIwL,EAAKxL,EAAI9D,KAAKF,IAAIM,UAAU,EAAGkP,EAAKtK,GACxCjB,EAAIuL,EAAKvL,EAAI/D,KAAKF,IAAIM,UAAU,EAAGkP,EAAKpK,GAC9C,IAAKlF,KAAKqI,KAAKtE,GAAGD,GAAI,CACpB9D,KAAK0P,WAAW5L,EAAGC,GACnB,QAMN,CACE,MAAMuL,EAAOtP,KAAKsO,MAAM,GAClBqB,EAASL,EAAKxL,GAAKwL,EAAKtK,GAAK,GAC7B4K,EAASN,EAAKvL,GAAKuL,EAAKpK,GAAK,GACnClF,KAAKK,KAAKsD,SAAS3D,MACnBA,KAAKK,KAAKwP,cAAcF,EAAQC,GAChC5P,KAAKyI,SAASmH,GAAQD,GAAU3P,KAAKK,MAIzCR,eAUE,OAAa,CACX,MAAMiQ,EAAS9P,KAAKF,IAAIM,UAVP,EAEA,IASX2P,EAAS/P,KAAKF,IAAIM,UAVP,EAEA,IAUXkP,EAAO,IAAInB,EACfnO,KAAKF,IAAIM,UAVM,EAUgBJ,KAAKgF,EAAI,EAAI8K,GAC5C9P,KAAKF,IAAIM,UAVM,EAUgBJ,KAAKkF,EAAI,EAAI6K,GAC5CD,EACAC,GAGF,IAAK/P,KAAKgQ,UAAUV,EAAKW,UAAW,CAElC,GAA0B,IAAtBjQ,KAAKsO,MAAM7O,OAAc,CAC3BO,KAAKsO,MAAM/B,KAAK+C,GAChB,MACK,CAEL,MAAMnQ,EAAImQ,EACV,IAAIY,GAAY,EAGhB,IAAK,IAAIpR,EAAI,EAAGA,EAAIkB,KAAKsO,MAAM7O,OAAQX,IAAK,CAC1C,IAAIsP,EAAIpO,KAAKsO,MAAMxP,GAGnB,MAAMqR,EAAQpK,KAAKiG,IAAI7M,EAAE2E,EAAGsK,EAAEtK,GACxBsM,EAAUrK,KAAKC,IAAI7G,EAAE2E,EAAI3E,EAAE6F,EAAGoJ,EAAEtK,EAAIsK,EAAEpJ,GAC5C,GAAImL,EAAQ,GAAKC,EAAS,CACxB,IAAIC,EAEFA,EADElR,EAAE4E,EAAI5E,EAAE+F,EAAIkJ,EAAErK,EACT,IAAIoK,EACTgC,EAAQ,EACRhR,EAAE4E,EAAI5E,EAAE+F,EACRkL,EAAUD,EAAQ,EAClB/B,EAAErK,EAAI5E,EAAE4E,EAAI5E,EAAE+F,GAGT,IAAIiJ,EACTgC,EAAQ,EACR/B,EAAErK,EAAIqK,EAAElJ,EACRkL,EAAUD,EAAQ,EAClBhR,EAAE4E,EAAIqK,EAAErK,EAAIqK,EAAElJ,GAGdmL,EAAKnL,EA/CG,KA+CmBlF,KAAKgQ,UAAUK,EAAKC,aACjDtQ,KAAKuO,WAAWhC,KAAK8D,GACrBH,GAAY,GAKhB,MAAMK,EAAQxK,KAAKiG,IAAI7M,EAAE4E,EAAGqK,EAAErK,GACxByM,EAAUzK,KAAKC,IAAI7G,EAAE4E,EAAI5E,EAAE+F,EAAGkJ,EAAErK,EAAIqK,EAAElJ,GAC5C,GAAIqL,EAAQ,GAAKC,EAAS,CACxB,IAAIH,EAEFA,EADElR,EAAE2E,EAAI3E,EAAE6F,EAAIoJ,EAAEtK,EACT,IAAIqK,EACThP,EAAE2E,EAAI3E,EAAE6F,EACRuL,EAAQ,EACRnC,EAAEtK,EAAI3E,EAAE2E,EAAI3E,EAAE6F,EACdwL,EAAUD,EAAQ,GAGb,IAAIpC,EACTC,EAAEtK,EAAIsK,EAAEpJ,EACRuL,EAAQ,EACRpR,EAAE2E,EAAIsK,EAAEtK,EAAIsK,EAAEpJ,EACdwL,EAAUD,EAAQ,GAGlBF,EAAKrL,EAzEG,KAyEmBhF,KAAKgQ,UAAUK,EAAKI,aACjDzQ,KAAKwO,WAAWjC,KAAK8D,GACrBH,GAAY,IAKlB,GAAIA,EAAW,CACblQ,KAAKsO,MAAM/B,KAAK+C,GAChB,UAOVzP,UAAUV,GACR,MAAMJ,EAAII,EAAE6Q,UAAUrC,KAAKxO,GAC3B,OAAOa,KAAKsO,MAAMoC,KAAK3R,IACrBiB,KAAKuO,WAAWmC,KAAK3R,IACrBiB,KAAKwO,WAAWkC,KAAK3R,GAGzBc,WAAWiE,EAAWC,GACpB,MAMM4M,EADQC,GACF5Q,KAAKF,IAAI+Q,YAGrB,GAFAC,QAAQ1H,IAAIuH,GAERA,EANkB,EAMG,CACvB,MAAMI,EAAY3O,EAAAnB,aAAaO,QAAQwP,OAAOhS,GAAKA,EAAEsC,OAAStB,KAAKsB,OACnEtB,KAAKqI,KAAKtE,GAAGD,GAAK9D,KAAKF,IAAIyP,OAAOwB,GAAWxN,OAAOvD,KAAKD,eAChD4Q,EAVqB,GAW9B3Q,KAAKqI,KAAKtE,GAAGD,GAAK,IAAI1B,EAAArB,eAAef,KAAKD,UACjC4Q,EAbiB,GAc1B3Q,KAAKqI,KAAKtE,GAAGD,GAAK,IAAI1B,EAAA7B,YAAYP,KAAKD,UAC9B4Q,EAhBU,KAiBnB3Q,KAAKqI,KAAKtE,GAAGD,GAAK,IAAI1B,EAAAxC,MAAMI,KAAKF,IAAKE,KAAKD,WAI/CF,OACEG,KAAKsO,MAAM2C,QAAQxS,GAAKuB,KAAKkR,SAASzS,EAAEqF,EAAGrF,EAAEsF,EAAGtF,EAAEuG,EAAGvG,EAAEyG,IACvDlF,KAAKwO,WAAWyC,QAAQxS,GAAKuB,KAAKmR,cAAc1S,EAAEqF,EAAGrF,EAAEsF,EAAGtF,EAAEuG,EAAGvG,EAAEyG,IACjElF,KAAKuO,WAAW0C,QAAQxS,GAAKuB,KAAKoR,cAAc3S,EAAEqF,EAAGrF,EAAEsF,EAAGtF,EAAEuG,EAAGvG,EAAEyG,IAGnErF,SAASiE,EAAWC,EAAWiB,EAAWE,GAExC,IAAK,IAAImM,EAAMtN,EAAGsN,EAAMtN,EAAImB,EAAGmM,IAC7B,IAAK,IAAIC,EAAMxN,EAAGwN,EAAMxN,EAAIkB,EAAGsM,IAC7BtR,KAAKuH,MAAM8J,GAAKC,GAAOtR,KAAKD,SAASG,IAAI,WAM7C,GAFAF,KAAKsI,KAAKvE,EAAI,GAAGD,GAAK9D,KAAKD,SAASG,IAAI,wBACxCF,KAAKsI,KAAKvE,EAAI,GAAGD,GAAK9D,KAAKD,SAASG,IAAI,oBACpC8E,EAAI,EAAG,CACT,IAAK,IAAIsM,EAAMxN,EAAI,EAAGwN,EAAMxN,EAAIkB,EAAI,EAAGsM,IACrCtR,KAAKsI,KAAKvE,EAAI,GAAGuN,GAAOtR,KAAKD,SAASG,IAAI,gBAC1CF,KAAKsI,KAAKvE,EAAI,GAAGuN,GAAOtR,KAAKD,SAASG,IAAI,YAE5CF,KAAKsI,KAAKvE,EAAI,GAAGD,EAAIkB,EAAI,GAAKhF,KAAKD,SAASG,IAAI,yBAChDF,KAAKsI,KAAKvE,EAAI,GAAGD,EAAIkB,EAAI,GAAKhF,KAAKD,SAASG,IAAI,qBAKlD,GAFAF,KAAKsI,KAAKvE,EAAImB,EAAI,GAAGpB,GAAK9D,KAAKD,SAASG,IAAI,2BAC5CF,KAAKsI,KAAKvE,EAAImB,GAAGpB,GAAK9D,KAAKD,SAASG,IAAI,aACpC8E,EAAI,EAAG,CACT,IAAK,IAAIsM,EAAMxN,EAAI,EAAGwN,EAAMxN,EAAIkB,EAAI,EAAGsM,IACrCtR,KAAKsI,KAAKvE,EAAImB,EAAI,GAAGoM,GAAOtR,KAAKD,SAASG,IAAI,gBAC9CF,KAAKsI,KAAKvE,EAAImB,GAAGoM,GAAOtR,KAAKD,SAASG,IAAI,YAE5CF,KAAKsI,KAAKvE,EAAImB,EAAI,GAAGpB,EAAIkB,EAAI,GAAKhF,KAAKD,SAASG,IAAI,4BACpDF,KAAKsI,KAAKvE,EAAImB,GAAGpB,EAAIkB,EAAI,GAAKhF,KAAKD,SAASG,IAAI,cAGlD,IAAK,IAAImR,EAAMtN,EAAGsN,EAAMtN,EAAImB,EAAI,EAAGmM,IACjCrR,KAAKsI,KAAK+I,GAAKvN,GAAK9D,KAAKD,SAASG,IAAI,uBAGxC,IAAK,IAAImR,EAAMtN,EAAGsN,EAAMtN,EAAImB,EAAI,EAAGmM,IACjCrR,KAAKsI,KAAK+I,GAAKvN,EAAIkB,EAAI,GAAKhF,KAAKD,SAASG,IAAI,sBAIlDL,cAAciE,EAAWC,EAAWiB,EAAWE,GAE7C,IAAK,IAAImM,EAAMtN,EAAGsN,EAAMtN,EAAImB,EAAGmM,IAC7B,IAAK,IAAIC,EAAMxN,EAAGwN,EAAMxN,EAAIkB,EAAGsM,IAC7BtR,KAAKuH,MAAM8J,GAAKC,GAAOtR,KAAKD,SAASG,IAAI,WAK7C,OAAQF,KAAKsI,KAAKvE,EAAI,GAAGD,EAAI,GAAGyE,MAC9B,IAAK,wBACHvI,KAAKsI,KAAKvE,EAAI,GAAGD,EAAI,GAAK9D,KAAKD,SAASG,IAAI,gBAC5C,MACF,IAAK,qBACH,MACF,QACE4Q,QAAQ1H,IAAI,aAAcpJ,KAAKsI,KAAKvE,EAAI,GAAGD,EAAI,IAGnD,OAAQ9D,KAAKsI,KAAKvE,EAAI,GAAGD,EAAI,GAAGyE,MAC9B,IAAK,oBACHvI,KAAKsI,KAAKvE,EAAI,GAAGD,EAAI,GAAK9D,KAAKD,SAASG,IAAI,YAC5C,MACF,IAAK,qBACHF,KAAKsI,KAAKvE,EAAI,GAAGD,EAAI,GAAK9D,KAAKD,SAASG,IAAI,wBAC5C,MACF,QACE4Q,QAAQ1H,IAAI,aAAcpJ,KAAKsI,KAAKvE,EAAI,GAAGD,EAAI,IAKnD,GAAIoB,EAAI,EACN,IAAK,IAAIgD,EAAMnE,EAAGmE,EAAMnE,EAAImB,EAAI,EAAGgD,IACjC,OAAQlI,KAAKsI,KAAKJ,GAAKpE,EAAI,GAAGyE,MAC5B,IAAK,qBACHvI,KAAKsI,KAAKJ,GAAKpE,EAAI,GAAK,KACxB,MACF,QACEgN,QAAQ1H,IAAI,WAAYpJ,KAAKsI,KAAKJ,GAAKpE,EAAI,IAOnD,OAAQ9D,KAAKsI,KAAKvE,EAAImB,EAAI,GAAGpB,EAAI,GAAGyE,MAClC,IAAK,qBACHvI,KAAKsI,KAAKvE,EAAImB,EAAI,GAAGpB,EAAI,GAAK9D,KAAKD,SAASG,IAAI,sBAChD,MACF,IAAK,2BACHF,KAAKsI,KAAKvE,EAAImB,EAAI,GAAGpB,EAAI,GAAK9D,KAAKD,SAASG,IAAI,gBAChD,MACF,QACE4Q,QAAQ1H,IAAI,gBAAiBpJ,KAAKsI,KAAKvE,EAAImB,EAAI,GAAGpB,EAAI,IAG1D,OAAQ9D,KAAKsI,KAAKvE,EAAImB,GAAGpB,EAAI,GAAGyE,MAC9B,IAAK,qBACH,MACF,IAAK,aACHvI,KAAKsI,KAAKvE,EAAImB,GAAGpB,EAAI,GAAK9D,KAAKD,SAASG,IAAI,YAC5C,MACF,QACE4Q,QAAQ1H,IAAI,gBAAiBpJ,KAAKsI,KAAKvE,EAAImB,GAAGpB,EAAI,IAKtD,OAAQ9D,KAAKsI,KAAKvE,EAAI,GAAGD,EAAIkB,GAAGuD,MAC9B,IAAK,uBACHvI,KAAKsI,KAAKvE,EAAI,GAAGD,EAAIkB,GAAKhF,KAAKD,SAASG,IAAI,gBAC5C,MACF,IAAK,sBACH,MACF,QACE4Q,QAAQ1H,IAAI,cAAepJ,KAAKsI,KAAKvE,EAAI,GAAGD,EAAIkB,IAGpD,OAAQhF,KAAKsI,KAAKvE,EAAI,GAAGD,EAAIkB,GAAGuD,MAC9B,IAAK,mBACHvI,KAAKsI,KAAKvE,EAAI,GAAGD,EAAIkB,GAAKhF,KAAKD,SAASG,IAAI,YAC5C,MACF,IAAK,sBACHF,KAAKsI,KAAKvE,EAAI,GAAGD,EAAIkB,GAAKhF,KAAKD,SAASG,IAAI,yBAC5C,MACF,QACE4Q,QAAQ1H,IAAI,cAAepJ,KAAKsI,KAAKvE,EAAI,GAAGD,EAAIkB,IAKpD,GAAIE,EAAI,EACN,IAAK,IAAIgD,EAAMnE,EAAGmE,EAAMnE,EAAImB,EAAI,EAAGgD,IACjC,OAAQlI,KAAKsI,KAAKJ,GAAKpE,EAAIkB,GAAGuD,MAC5B,IAAK,sBACHvI,KAAKsI,KAAKJ,GAAKpE,EAAIkB,GAAK,KACxB,MACF,QACE8L,QAAQ1H,IAAI,YAAapJ,KAAKsI,KAAKJ,GAAKpE,EAAIkB,IAOpD,OAAQhF,KAAKsI,KAAKvE,EAAImB,EAAI,GAAGpB,EAAIkB,GAAGuD,MAClC,IAAK,sBACHvI,KAAKsI,KAAKvE,EAAImB,EAAI,GAAGpB,EAAIkB,GAAKhF,KAAKD,SAASG,IAAI,uBAChD,MACF,IAAK,0BACHF,KAAKsI,KAAKvE,EAAImB,EAAI,GAAGpB,EAAIkB,GAAKhF,KAAKD,SAASG,IAAI,gBAChD,MACF,QACE4Q,QAAQ1H,IAAI,iBAAkBpJ,KAAKsI,KAAKvE,EAAImB,EAAI,GAAGpB,EAAIkB,IAG3D,OAAQhF,KAAKsI,KAAKvE,EAAImB,GAAGpB,EAAIkB,GAAGuD,MAC9B,IAAK,sBACH,MACF,IAAK,YACHvI,KAAKsI,KAAKvE,EAAImB,GAAGpB,EAAIkB,GAAKhF,KAAKD,SAASG,IAAI,YAC5C,MACF,QACE4Q,QAAQ1H,IAAI,kBAAmBpJ,KAAKsI,KAAKvE,EAAImB,GAAGpB,EAAIkB,IAKxD,IAAK,IAAIsM,EAAMxN,EAAGwN,EAAMxN,EAAIkB,EAAGsM,IAC7BtR,KAAKsI,KAAKvE,EAAI,GAAGuN,GAAOtR,KAAKD,SAASG,IAAI,gBAC1CF,KAAKsI,KAAKvE,EAAI,GAAGuN,GAAOtR,KAAKD,SAASG,IAAI,YAI5C,IAAK,IAAIoR,EAAMxN,EAAGwN,EAAMxN,EAAIkB,EAAGsM,IAC7BtR,KAAKsI,KAAKvE,EAAImB,EAAI,GAAGoM,GAAOtR,KAAKD,SAASG,IAAI,gBAC9CF,KAAKsI,KAAKvE,EAAImB,GAAGoM,GAAOtR,KAAKD,SAASG,IAAI,YAI9CL,cAAciE,EAAWC,EAAWiB,EAAWE,GAE7C,IAAK,IAAImM,EAAMtN,EAAGsN,EAAMtN,EAAImB,EAAGmM,IAC7B,IAAK,IAAIC,EAAMxN,EAAGwN,EAAMxN,EAAIkB,EAAGsM,IAC7BtR,KAAKuH,MAAM8J,GAAKC,GAAOtR,KAAKD,SAASG,IAAI,WAK7C,OAAQF,KAAKsI,KAAKvE,EAAI,GAAGD,EAAI,GAAGyE,MAC9B,IAAK,eACHvI,KAAKsI,KAAKvE,EAAI,GAAGD,EAAI,GAAK9D,KAAKD,SAASG,IAAI,yBAC5C,MACF,QACE4Q,QAAQ1H,IAAI,iBAAkBpJ,KAAKsI,KAAKvE,EAAI,GAAGD,EAAI,IAGvD,OAAQ9D,KAAKsI,KAAKvE,GAAGD,EAAI,GAAGyE,MAC1B,IAAK,WACHvI,KAAKsI,KAAKvE,GAAGD,EAAI,GAAK9D,KAAKD,SAASG,IAAI,qBACxC,MACF,QACE4Q,QAAQ1H,IAAI,gBAAiBpJ,KAAKsI,KAAKvE,GAAGD,EAAI,IAKlD,IAAK,IAAIwN,EAAMxN,EAAGwN,EAAMxN,EAAIkB,EAAGsM,IAAO,CACpC,OAAQtR,KAAKsI,KAAKvE,EAAI,GAAGuN,GAAK/I,MAC5B,IAAK,eACHvI,KAAKsI,KAAKvE,EAAI,GAAGuN,GAAO,KACxB,MACF,QACER,QAAQ1H,IAAI,aAAcpJ,KAAKsI,KAAKvE,EAAI,GAAGuN,IAG/C,OAAQtR,KAAKsI,KAAKvE,GAAGuN,GAAK/I,MACxB,IAAK,WACHvI,KAAKsI,KAAKvE,GAAGuN,GAAO,KACpB,MACF,QACER,QAAQ1H,IAAI,YAAapJ,KAAKsI,KAAKvE,GAAGuN,KAM5C,OAAQtR,KAAKsI,KAAKvE,EAAI,GAAGD,EAAIkB,GAAGuD,MAC9B,IAAK,eACHvI,KAAKsI,KAAKvE,EAAI,GAAGD,EAAIkB,GAAKhF,KAAKD,SAASG,IAAI,wBAC5C,MACF,QACE4Q,QAAQ1H,IAAI,iBAAkBpJ,KAAKsI,KAAKvE,EAAI,GAAGD,EAAIkB,IAGvD,OAAQhF,KAAKsI,KAAKvE,GAAGD,EAAIkB,GAAGuD,MAC1B,IAAK,WACHvI,KAAKsI,KAAKvE,GAAGD,EAAIkB,GAAKhF,KAAKD,SAASG,IAAI,oBACxC,MACF,QACE4Q,QAAQ1H,IAAI,iBAAkBpJ,KAAKsI,KAAKvE,GAAGD,EAAIkB,IAMnD,OAAQhF,KAAKsI,KAAKvE,EAAImB,EAAI,GAAGpB,EAAI,GAAGyE,MAClC,IAAK,eACHvI,KAAKsI,KAAKvE,EAAImB,EAAI,GAAGpB,EAAI,GAAK9D,KAAKD,SAASG,IAAI,4BAChD,MACF,QACE4Q,QAAQ1H,IAAI,oBAAqBpJ,KAAKsI,KAAKvE,EAAImB,EAAI,GAAGpB,EAAI,IAG9D,OAAQ9D,KAAKsI,KAAKvE,EAAImB,EAAI,GAAGpB,EAAI,GAAGyE,MAClC,IAAK,WACHvI,KAAKsI,KAAKvE,EAAImB,EAAI,GAAGpB,EAAI,GAAK9D,KAAKD,SAASG,IAAI,2BAChD,MACF,QACE4Q,QAAQ1H,IAAI,gBAAiBpJ,KAAKsI,KAAKvE,EAAImB,EAAI,GAAGpB,EAAI,IAK1D,IAAK,IAAIwN,EAAMxN,EAAGwN,EAAMxN,EAAIkB,EAAGsM,IAAO,CACpC,OAAQtR,KAAKsI,KAAKvE,EAAImB,EAAI,GAAGoM,GAAK/I,MAChC,IAAK,eACHvI,KAAKsI,KAAKvE,EAAImB,EAAI,GAAGoM,GAAO,KAC5B,MACF,QACER,QAAQ1H,IAAI,gBAAiBpJ,KAAKsI,KAAKvE,EAAImB,EAAI,GAAGoM,IAGtD,OAAQtR,KAAKsI,KAAKvE,EAAImB,EAAI,GAAGoM,GAAK/I,MAChC,IAAK,WACHvI,KAAKsI,KAAKvE,EAAImB,EAAI,GAAGoM,GAAO,KAC5B,MACF,QACER,QAAQ1H,IAAI,gBAAiBpJ,KAAKsI,KAAKvE,EAAImB,EAAI,GAAGoM,KAMxD,OAAQtR,KAAKsI,KAAKvE,EAAImB,EAAI,GAAGpB,EAAIkB,GAAGuD,MAClC,IAAK,eACHvI,KAAKsI,KAAKvE,EAAImB,EAAI,GAAGpB,EAAIkB,GAAKhF,KAAKD,SAASG,IAAI,2BAChD,MACF,QACE4Q,QAAQ1H,IAAI,qBAAsBpJ,KAAKsI,KAAKvE,EAAImB,EAAI,GAAGpB,EAAI,IAG/D,OAAQ9D,KAAKsI,KAAKvE,EAAImB,EAAI,GAAGpB,EAAIkB,GAAGuD,MAClC,IAAK,WACHvI,KAAKsI,KAAKvE,EAAImB,EAAI,GAAGpB,EAAIkB,GAAKhF,KAAKD,SAASG,IAAI,0BAChD,MACF,QACE4Q,QAAQ1H,IAAI,oBAAqBpJ,KAAKsI,KAAKvE,EAAImB,EAAI,GAAGpB,EAAI,IAK9D,IAAK,IAAIuN,EAAMtN,EAAI,EAAGsN,EAAMtN,EAAImB,EAAI,EAAGmM,IACrCrR,KAAKsI,KAAK+I,GAAKvN,EAAI,GAAK9D,KAAKD,SAASG,IAAI,sBAC1CF,KAAKsI,KAAK+I,GAAKvN,EAAIkB,GAAKhF,KAAKD,SAASG,IAAI,uBAI9CL,UACEG,KAAKuR,uBACLvR,KAAKwR,gBACLxR,KAAKyR,sBAGP5R,uBACE,MAAM6R,EAAe,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,WAExF,IAAK,IAAI3N,EAAI,EAAGA,EAAI/D,KAAKkF,EAAGnB,IAC1B,IAAK,IAAID,EAAI,EAAGA,EAAI9D,KAAKgF,EAAGlB,IACtB9D,KAAKuH,MAAMxD,GAAGD,IAAM9D,KAAKF,IAAI+Q,YAHrB,KAIV7Q,KAAKuH,MAAMxD,GAAGD,GAAK9D,KAAKD,SAASG,IAAIF,KAAKF,IAAIyP,OAAOmC,KAM7D7R,gBAEE,MAAM8R,EAAO3R,KAAKsO,MAAMtO,KAAKsO,MAAM7O,OAAS,GAEtCmS,EAAWD,EAAK7N,GAAK6N,EAAK3M,GAAK,GAC/B6M,EAAWF,EAAK5N,GAAK4N,EAAKzM,GAAK,GACrC4L,QAAQ1H,IAAIwI,EAAUC,EAAUF,GAChC3R,KAAKuH,MAAMsK,GAAUD,GAAY5R,KAAKD,SAASG,IAAI,gBAGrDL,sBACE,MAAMiS,EAAwB,CAC5B,cACA,cACA,kBACA,mBACA,oBACA,qBACA,WACA,6BACA,+BAEIC,EAA2B,CAC/B,cACA,eAGF,IAAK,IAAIhO,EAAI,EAAGA,EAAI/D,KAAKkF,EAAGnB,IAC1B,IAAK,IAAID,EAAI,EAAGA,EAAI9D,KAAKgF,EAAGlB,IAC1B,GAAI9D,KAAKsI,KAAKvE,GAAGD,GACf,OAAQ9D,KAAKsI,KAAKvE,GAAGD,GAAGyE,MACtB,IAAK,WACH,GAAIvI,KAAKF,IAAI+Q,YANP,GAM8B,CAElC,IAAIa,EAEFA,IAHe1R,KAAKuH,MAAMxD,EAAI,GAAGD,GAGlBgO,EAEAC,EAEjB,MAAMC,EAAchS,KAAKF,IAAIyP,OAAOmC,GACpC,OAAQM,GACN,IAAK,WACHhS,KAAKsI,KAAKvE,GAAGD,GAAK9D,KAAKD,SAASG,IAAI,YACpCF,KAAKuH,MAAMxD,EAAI,GAAGD,GAAK9D,KAAKD,SAASG,IAAI,iBACzC,MACF,IAAK,6BACHF,KAAKsI,KAAKvE,EAAI,GAAGD,GAAK9D,KAAKD,SAASG,IAAI,qBACxCF,KAAKsI,KAAKvE,GAAGD,GAAK9D,KAAKD,SAASG,IAAI,8BACpCF,KAAKuH,MAAMxD,EAAI,GAAGD,GAAK9D,KAAKD,SAASG,IAAI,gCACzC,MACF,IAAK,8BACHF,KAAKsI,KAAKvE,EAAI,GAAGD,GAAK9D,KAAKD,SAASG,IAAI,qBACxCF,KAAKsI,KAAKvE,GAAGD,GAAK9D,KAAKD,SAASG,IAAI,+BACpCF,KAAKuH,MAAMxD,EAAI,GAAGD,GAAK9D,KAAKD,SAASG,IAAI,iCACzC,MACF,QACEF,KAAKsI,KAAKvE,GAAGD,GAAK9D,KAAKD,SAASG,IAAI8R,MActDnS,KAAKgF,GACH7E,KAAKyD,MAAME,SAAS,IAAIC,EAAM5D,KAAKF,IAAKE,KAAKD,SAAUC,KAAKyD,MAAOzD,KAAKK,KAAML,KAAKsB,MAAQ,EAAGuD,IAGhGhF,QAAQgF,GACN7E,KAAK0O,YAAYuC,QAAQ5B,GAAKA,EAAE5H,QAAQ5C,IACxC7E,KAAKK,KAAKoH,QAAQ5C,IAnoBtBtF,EAAAqE,MAAAA,sHC5DA,SAAY+B,GACVA,EAAAA,EAAA,KAAA,GAAA,OAAUA,EAAAA,EAAA,IAAA,GAAA,MAASA,EAAAA,EAAA,IAAA,GAAA,MADrB,CAAYpG,EAAAoG,eAAApG,EAAAoG,aAAY,KAmBxBpG,EAAAuF,qBAAA,MAGEjF,YAAY6E,GACV1E,KAAK0E,QAAUA,EAGjB7E,UAAUwB,EAAgBkH,EAAc1D,GACtC7E,KAAK0E,QAAQ4H,UAAUjL,EAAQkH,EAAM1D,GAGvCf,QACE,OAAO9D,KAAK0E,QAAQZ,EAGtBC,QACE,OAAO/D,KAAK0E,QAAQX,EAGtBmC,YACE,OAAOlG,KAAK0E,QAAQwB,MAGtBC,YACE,OAAOnG,KAAK0E,QAAQyB,MAGtBK,cACE,OAAOxG,KAAK0E,QAAQ8B,QAGtB/E,YACE,OAAOzB,KAAK0E,QAAQjD,MAGtBuB,YACE,OAAOhD,KAAK0E,QAAQ1B,MAGtB7B,YACE,OAAOnB,KAAK0E,QAAQvD,MAGtBlB,WACE,OAAOD,KAAK0E,QAAQzE,KAGtByF,YACE,OAAO1F,KAAK0E,QAAQgB,MAGtB9D,aACE,OAAO5B,KAAK0E,QAAQ9C,+FCrExB,MAAMyN,EAAI,WAIV9P,EAAA4D,IAAA,MAGEtD,YAAYoS,EAAe,MACzBjS,KAAK0F,MAAQuM,GAAclM,KAAKwB,MAAMxB,KAAKmM,UAAY7C,EAAI,IAC3DyB,QAAQ1H,IAAI,OAAQpJ,KAAK0F,OAG3B7F,UAEE,OADAG,KAAK0F,OAZC,WAYY1F,KAAK0F,MAXjB,OAW8B2J,EAC7BrP,KAAK0F,MAGd7F,YACE,OAAOG,KAAKmS,WAAa9C,EAAI,GAG/BxP,UAAUmD,EAAeoP,GACvB,MAAMC,EAAYD,EAAMpP,EAClBsP,EAAetS,KAAKmS,UAAY9C,EACtC,OAAOrM,EAAQ+C,KAAKwB,MAAM+K,EAAeD,GAG3CxS,OAAU0S,GACR,OAAOA,EAAMvS,KAAKI,UAAU,EAAGmS,EAAM9S,iGC/BzCF,EAAAmE,MAAA,MAGE7D,SAASyB,GACPtB,KAAKsB,MAAQA,2ZCJjB/B,EAAA8C,aAAA,MAGExC,cACEG,KAAKwS,QAAU,GAGX3S,uDACJ,aAAa,IAAI4S,QAA2BC,IAC1C,MAAMC,EAAM,IAAIC,MAChBD,EAAIE,OAASC,GAAMJ,EAAQC,GAC3BA,EAAII,IAAM,sCAIRlT,gDACJ,MAAMqH,QAAgBlH,KAAKgT,cACrBC,QAAiBC,MAAM,8BACVD,EAASE,QACTC,MAAM,YACnBnC,QAASoC,IACb,IAAIhE,EAAIgE,EAAKC,MAAM,kEACnB,GAAIjE,EAAG,CACL,MAAMvL,EAAIyP,SAASlE,EAAE,IACftL,EAAIwP,SAASlE,EAAE,IACfrK,EAAIuO,SAASlE,EAAE,IACfnK,EAAIqO,SAASlE,EAAE,IACf3N,EAAc6R,SAASlE,EAAE,IAAM,KAC/BpP,EAAO,IAAIuT,EAAKtM,EAASmI,EAAE,GAAIvL,EAAGC,EAAGiB,EAAGE,EAAGxD,GACjD1B,KAAKwS,QAAQvS,EAAKsI,MAAQtI,QAKhCJ,IAAIqB,GACF,OAAOlB,KAAKwS,QAAQtR,KAIxB,MAAasS,EAUX3T,YAAYqH,EAA2BqB,EAAczE,EAAWC,EAAWiB,EAAWE,EAAWxD,GAC/F1B,KAAKkH,QAAUA,EACflH,KAAKuI,KAAOA,EACZvI,KAAK8D,EAAIA,EACT9D,KAAK+D,EAAIA,EACT/D,KAAKgF,EAAIA,EACThF,KAAKkF,EAAIA,EACTlF,KAAK0B,YAAcA,EACnB1B,KAAKqH,OAASrH,KAAK0B,YAAc,GAlBrCnC,EAAAiU,KAAAA,yFCtCA,MAAArR,EAAAlD,EAAA,aAGaM,EAAAiQ,iBAAmB,CAC9B,cACA,SACA,MACA,WACA,QACA,SACA,SACA,cAGFjQ,EAAAkQ,YAAA,MAqBE5P,YAAYC,EAAUC,EAAwBuB,EAAcwC,EAAWC,EAAWwE,EAAc1D,GAC9F7E,KAAKF,IAAMA,EACXE,KAAKD,SAAWA,EAChBC,KAAKsB,MAAQA,EACbtB,KAAK8D,EAAIA,EACT9D,KAAK+D,EAAIA,EACT/D,KAAKkG,MAAQpC,EACb9D,KAAKmG,MAAQpC,EACb/D,KAAKwG,SAAU,EACfxG,KAAKuI,KAAOA,EACZvI,KAAK6I,UAAY,GACjB7I,KAAKQ,OAASR,KAAK6I,UACnB7I,KAAKqB,OAAS,EACdrB,KAAKyT,KAAO,GACZzT,KAAKmB,MAAQ,IACbnB,KAAK4K,aAAazI,EAAAwD,aAAakF,KAAMhG,GAGvChF,aAAa6F,EAAqBb,GAChC,OAAQa,GACN,KAAKvD,EAAAwD,aAAakF,KAChB7K,KAAK0F,MAAQA,EACb1F,KAAKC,KAAOD,KAAKD,SAASG,IAAIF,KAAKuI,KAAO,cAC1CvI,KAAKyB,MAAQ,EACbzB,KAAKgD,MAAQ6B,EACb,MACF,KAAK1C,EAAAwD,aAAaC,IAChB5F,KAAK0F,MAAQA,EACb1F,KAAKC,KAAOD,KAAKD,SAASG,IAAIF,KAAKuI,KAAO,aAC1CvI,KAAKyB,MAAQ,EACbzB,KAAKgD,MAAQ6B,GAKnBhF,QAAQgF,GAEN,GADA7E,KAAKyB,MAAQsE,KAAKwB,OAAO1C,EAAO7E,KAAKgD,OAAShD,KAAKmB,OAC/CnB,KAAKyB,OAASzB,KAAKC,KAAKyB,YAAa,CACnC1B,KAAK0F,QAAUvD,EAAAwD,aAAaC,MAE9B5F,KAAKsB,MAAMmH,SAASzI,KAAK+D,GAAG/D,KAAK8D,GAAK,KACtC9D,KAAKsB,MAAMmH,SAASzI,KAAKmG,OAAOnG,KAAKkG,OAASlG,KAC9CA,KAAK8D,EAAI9D,KAAKkG,MACdlG,KAAK+D,EAAI/D,KAAKmG,OAGhBnG,KAAK4K,aAAazI,EAAAwD,aAAakF,KAAMhG,GAGrC,MAAMiH,EAAe,EACfC,EAAahG,KAAKiG,IAAI,EAAGhM,KAAK8D,EAAIgI,GAClCI,EAAanG,KAAKiG,IAAI,EAAGhM,KAAK+D,EAAI+H,GAClCG,EAAalG,KAAKC,IAAIhG,KAAKsB,MAAM0D,EAAGhF,KAAK8D,EAAIgI,GAC7CK,EAAapG,KAAKC,IAAIhG,KAAKsB,MAAM4D,EAAGlF,KAAK+D,EAAI+H,GAQnD,IANsB9L,KAAKsB,MAAMjB,KAAKkJ,MACjCvJ,KAAKsB,MAAMjB,KAAKyD,GAAKiI,GAAc/L,KAAKsB,MAAMjB,KAAKyD,GAAKmI,GACxDjM,KAAKsB,MAAMjB,KAAK0D,GAAKmI,GAAclM,KAAKsB,MAAMjB,KAAK0D,GAAKoI,EAI3C,CAChB,MAAMuH,EAAS3N,KAAK4N,IAAI3T,KAAK8D,EAAI9D,KAAKsB,MAAMjB,KAAKyD,GAC3C8P,EAAS7N,KAAK4N,IAAI3T,KAAK+D,EAAI/D,KAAKsB,MAAMjB,KAAK0D,GAEjD,GAAI2P,EAAS,EAAG,CACd,MAAMG,EAAS9N,KAAKiG,KAAK,EAAGjG,KAAKC,IAAI,EAAGhG,KAAKsB,MAAMjB,KAAKyD,EAAI9D,KAAK8D,IACjE,GAAI9D,KAAKyL,KAAKoI,EAAQ,EAAGhP,GAEvB,YADAiM,QAAQ1H,IAAI,kBAIhB,GAAIwK,EAAS,EAAG,CACd,MAAME,EAAS/N,KAAKiG,KAAK,EAAGjG,KAAKC,IAAI,EAAGhG,KAAKsB,MAAMjB,KAAK0D,EAAI/D,KAAK+D,IACjE,GAAI/D,KAAKyL,KAAK,EAAGqI,EAAQjP,GAEvB,YADAiM,QAAQ1H,IAAI,kBAKhB,GAAIsK,GAAU,GAAKE,GAAU,GAAK5T,KAAKF,IAAI+Q,YAAc7Q,KAAKyT,KAE5D,YADAzT,KAAKsB,MAAMjB,KAAKiM,UAAUtM,KAAKqB,OAAQrB,KAAKuI,KAAM1D,GAMtD,MAAMkP,EAAsB,GAC5B,GAAI/T,KAAKF,IAAI+Q,YAAckD,EAAqB,CAC9C,MAAMF,EAAS7T,KAAKF,IAAIM,WAAW,EAAG,GAChC0T,EAAS9T,KAAKF,IAAIM,WAAW,EAAG,GAEtC,GAAIJ,KAAKyL,KAAKoI,EAAQC,EAAQjP,GAC5B,SAMRhF,KAAKsI,EAAaC,EAAavD,GAE7B,GADA7E,KAAKwG,QAAU2B,EAAM,EACjBnI,KAAK0F,QAAUvD,EAAAwD,aAAakF,KAAM,CACpC,MAAM3E,EAAQlG,KAAK8D,EAAIqE,EACjBhC,EAAQnG,KAAK+D,EAAIqE,EAGvB,QAAKpI,KAAKsB,MAAMiG,MAAMpB,GAAOD,MAGzBlG,KAAKsB,MAAMmH,SAAStC,GAAOD,KAG/BlG,KAAKsB,MAAMmH,SAAStC,GAAOD,GAAS,IAAI/D,EAAA2C,qBAAqB9E,MAC7DA,KAAKkG,MAAQA,EACblG,KAAKmG,MAAQA,EACbnG,KAAK4K,aAAazI,EAAAwD,aAAaC,IAAKf,IAC7B,IAET,OAAO,EAGThF,UAAUwB,EAAgBkH,EAAc1D,GACtC7E,KAAKsB,MAAM8H,IAAImD,KAAK,GAAGvM,KAAKuI,gBAAgBlH,QAAakH,KACzDvI,KAAKQ,OAASuF,KAAKiG,IAAI,EAAGhM,KAAKQ,OAASa,GACpCrB,KAAKQ,QAAU,IACjBR,KAAKsB,MAAM8H,IAAImD,KAAK,GAAGvM,KAAKuI,kBAAkBA,KAC9CvI,KAAKsB,MAAMmH,SAASzI,KAAK+D,GAAG/D,KAAK8D,GAAK,KACtC9D,KAAKsB,MAAMmH,SAASzI,KAAKmG,OAAOnG,KAAKkG,OAAS,KAC9ClG,KAAKsB,MAAMoN,YAAc1O,KAAKsB,MAAMoN,YAAYsC,OAAOgD,GAAKA,IAAMhU,MAC9DA,KAAKF,IAAI+Q,YAAc7Q,KAAKyT,MAC9BzT,KAAKsB,MAAMoO,WAAW1P,KAAK8D,EAAG9D,KAAK+D","file":"bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","import {RNG} from \"./rng\";\nimport {HeroMonster} from \"./hero\";\nimport {Tile, TileRegistry} from \"./tilemap\";\nimport {InventoryCell} from \"./inventory\";\n\nexport interface Drop {\n  readonly tile: Tile\n  pickedUp(hero: HeroMonster): boolean;\n}\n\nexport interface UsableDrop extends Drop {\n  same(item: UsableDrop): boolean;\n  use(cell: InventoryCell, hero: HeroMonster): void;\n}\n\nexport class Coins implements Drop {\n  readonly tile: Tile;\n  private readonly coins: number;\n\n  constructor(rng: RNG, registry: TileRegistry) {\n    this.tile = registry.get(\"coin_anim\");\n    this.coins = rng.nextRange(1, 30)\n  }\n\n  pickedUp(hero: HeroMonster): boolean {\n    hero.addCoins(this.coins);\n    return true;\n  };\n}\n\nexport class HealthFlask implements UsableDrop {\n  readonly tile: Tile;\n  private readonly health: number;\n\n  constructor(registry: TileRegistry) {\n    this.tile = registry.get(\"flask_red\");\n    this.health = 2;\n  }\n\n  pickedUp(hero: HeroMonster): boolean {\n    return hero.inventory.add(this);\n\n  };\n\n  same(item: UsableDrop): boolean {\n    return item instanceof HealthFlask;\n  };\n\n  use(cell: InventoryCell, hero: HeroMonster) {\n    hero.hill(this.health);\n    cell.count--;\n    if (cell.count <= 0) {\n      cell.item = null;\n      cell.count = 0;\n    }\n  };\n}\n\nexport class HealthBigFlask implements UsableDrop {\n  readonly tile: Tile;\n  private readonly health: number;\n\n  constructor(registry: TileRegistry) {\n    this.tile = registry.get(\"flask_big_red\");\n    this.health = 5;\n  }\n\n  pickedUp(hero: HeroMonster): boolean {\n    return hero.inventory.add(this);\n  };\n\n  same(item: UsableDrop): boolean {\n    return item instanceof HealthBigFlask;\n  };\n\n  use(cell: InventoryCell, hero: HeroMonster) {\n    hero.hill(this.health);\n    cell.count--;\n    if (cell.count <= 0) {\n      cell.item = null;\n      cell.count = 0;\n    }\n  };\n}\n\nexport const weaponNames = [\n  \"weapon_knife\",\n  \"weapon_rusty_sword\",\n  \"weapon_regular_sword\",\n  \"weapon_red_gem_sword\",\n  \"weapon_big_hammer\",\n  \"weapon_hammer\",\n  \"weapon_baton_with_spikes\",\n  \"weapon_mace\",\n  \"weapon_katana\",\n  \"weapon_saw_sword\",\n  \"weapon_anime_sword\",\n  \"weapon_axe\",\n  \"weapon_machete\",\n  \"weapon_cleaver\",\n  \"weapon_duel_sword\",\n  \"weapon_knight_sword\",\n  \"weapon_golden_sword\",\n  \"weapon_lavish_sword\",\n  \"weapon_red_magic_staff\",\n  \"weapon_green_magic_staff\",\n];\n\nexport class WeaponConfig {\n  readonly tileName: string;\n  readonly speed: number;\n  readonly distance: number;\n  readonly damage: number;\n  readonly level: number;\n\n  constructor(tileName: string, speed: number, distance: number, damage: number, level: number) {\n    this.tileName = tileName;\n    this.speed = speed;\n    this.distance = distance;\n    this.damage = damage;\n    this.level = level;\n  }\n\n  create(registry: TileRegistry): Weapon {\n    return new Weapon(registry.get(this.tileName), this.speed, this.distance, this.damage);\n  }\n\n  static configs: WeaponConfig[] = [\n    new WeaponConfig(\"weapon_knife\", 100, 1, 3, 1),\n    new WeaponConfig(\"weapon_rusty_sword\", 100, 1, 4, 1),\n    new WeaponConfig(\"weapon_regular_sword\", 100, 1, 5, 3),\n    new WeaponConfig(\"weapon_red_gem_sword\", 100, 1, 6, 3),\n\n    new WeaponConfig(\"weapon_big_hammer\", 300, 2, 10, 5),\n    new WeaponConfig(\"weapon_hammer\", 200, 1, 7, 5),\n    new WeaponConfig(\"weapon_baton_with_spikes\", 200, 1, 7, 5),\n    new WeaponConfig(\"weapon_mace\", 200, 1, 7, 5),\n\n    new WeaponConfig(\"weapon_katana\", 100, 1, 8, 7),\n    new WeaponConfig(\"weapon_saw_sword\", 200, 1, 9, 7),\n    new WeaponConfig(\"weapon_anime_sword\", 200, 1, 12, 7),\n    new WeaponConfig(\"weapon_axe\", 200, 1, 12, 7),\n\n    new WeaponConfig(\"weapon_machete\", 100, 1, 11, 9),\n    new WeaponConfig(\"weapon_cleaver\", 100, 1, 12, 9),\n    new WeaponConfig(\"weapon_duel_sword\", 100, 1, 13, 9),\n    new WeaponConfig(\"weapon_knight_sword\", 100, 1, 14, 9),\n\n    new WeaponConfig(\"weapon_golden_sword\", 100, 1, 15, 11),\n    new WeaponConfig(\"weapon_lavish_sword\", 100, 1, 16, 11),\n  ];\n}\n\nexport class Weapon implements UsableDrop {\n  readonly tile: Tile;\n  frame: number;\n  readonly numOfFrames: number;\n  readonly speed: number;\n  readonly distance: number;\n  readonly damage: number;\n\n  constructor(tile: Tile, speed: number, distance: number, damage: number) {\n    this.tile = tile;\n    this.frame = 0;\n    this.numOfFrames = 4;\n    this.speed = speed;\n    this.distance = distance;\n    this.damage = damage;\n  }\n\n  pickedUp(hero: HeroMonster): boolean {\n    return hero.inventory.add(this);\n  }\n\n  same(item: UsableDrop): boolean {\n    return false;\n  }\n\n  use(cell: InventoryCell, hero: HeroMonster): void {\n    const prev = hero.weapon;\n    hero.weapon = this;\n    if (prev) {\n      cell.item = prev;\n      cell.count = 1;\n    } else {\n      cell.item = null;\n      cell.count = 0;\n    }\n  }\n}","import {Joystick} from \"./input\";\nimport {Tile, TileRegistry} from \"./tilemap\";\nimport {HeroMonster} from \"./hero\";\nimport {Level} from \"./level\";\nimport {Scene} from \"./scene\";\nimport {RNG} from \"./rng\";\nimport {Monster, MonsterState, MovingMonsterWrapper} from \"./monster\";\nimport {Weapon, WeaponConfig} from \"./drop\";\n\n(async function () {\n\n  // https://0x72.itch.io/dungeontileset-ii\n\n  const registry = new TileRegistry();\n  await registry.load();\n\n  const canvas: HTMLCanvasElement = document.getElementById(\"dungeon\") as HTMLCanvasElement;\n  const ctx = canvas.getContext(\"2d\");\n  ctx.imageSmoothingEnabled = false;\n\n  const buffer = document.createElement(\"canvas\");\n  const b_ctx = buffer.getContext(\"2d\");\n  b_ctx.imageSmoothingEnabled = false;\n\n  const start = new Date().getTime();\n  const rng = new RNG();\n  const joystick = new Joystick();\n  const hero_weapon = WeaponConfig.configs[0].create(registry);\n  const hero = new HeroMonster(registry, joystick,0, 0, \"knight_f\", hero_weapon, start);\n  const scene = new Scene();\n  scene.setLevel(new Level(rng, registry, scene, hero, 1, start));\n\n  const scale = 2;\n  function render() {\n    const time = new Date().getTime();\n    scene.level.animate(time);\n    renderLevel(time);\n    renderHUD(time);\n    window.requestAnimationFrame(render);\n  }\n\n  function renderLevel(time: number) {\n    const c_w = canvas.width;\n    const c_h = canvas.height;\n    buffer.width = c_w;\n    buffer.height = c_h;\n\n    ctx.save();\n    ctx.fillStyle = \"rgb(34,34,34)\";\n    ctx.fillRect(0, 0, c_w, c_h);\n\n    b_ctx.save();\n    b_ctx.fillStyle = \"black\";\n    b_ctx.fillRect(0, 0, c_w, c_h);\n    b_ctx.globalCompositeOperation = \"lighter\";\n\n    // render hero light\n    renderLight(c_w >> 1, c_h >> 1, 16 * scale * 6);\n\n    let t_x = scene.level.hero.x * 16 * scale + 8 - c_w / 2;\n    let t_y = scene.level.hero.y * 16 * scale + 8 - c_h / 2;\n\n    // translate level to hero position\n    if(scene.level.hero.state === MonsterState.Run) {\n      const start = scene.level.hero.start;\n      const speed = scene.level.hero.speed;\n      const numOfFrames = scene.level.hero.tile.numOfFrames;\n      const maxTime = speed * numOfFrames;\n      const delta = Math.min(maxTime, time - start) / maxTime;\n\n      const t_offset_x = scale * 16 * (scene.level.hero.new_x - scene.level.hero.x) * delta;\n      const t_offset_y = scale * 16 * (scene.level.hero.new_y - scene.level.hero.y) * delta;\n\n      t_x = t_x + t_offset_x;\n      t_y = t_y + t_offset_y;\n    }\n\n    // render floor, drop\n    for(let l_x=0; l_x<scene.level.w; l_x++) {\n      for(let l_y=0; l_y<scene.level.h; l_y++) {\n        const d_x = -t_x + l_x * 16 * scale;\n        const d_y = -t_y + l_y * 16 * scale;\n        renderTile(scene.level.floor[l_y][l_x], d_x, d_y);\n        if(scene.level.drop[l_y][l_x]) {\n          renderTile(scene.level.drop[l_y][l_x].tile, d_x, d_y);\n        }\n      }\n    }\n    // render wall, monsters\n    for(let l_y=0; l_y<scene.level.h; l_y++) {\n      for(let l_x=0; l_x<scene.level.w; l_x++) {\n        const d_x = -t_x + l_x * 16 * scale;\n        const d_y = -t_y + l_y * 16 * scale;\n        const tile = scene.level.wall[l_y][l_x];\n        if(tile) {\n          renderTile(tile, d_x, d_y);\n          if (tile.name === \"wall_fountain_mid_red_anim\" || tile.name === \"wall_fountain_mid_blue_anim\") {\n            renderLight(d_x + 8 * scale, d_y + 8 * scale, 16 * scale * 4);\n          }\n        }\n      }\n      if(l_y < scene.level.h -1) {\n        for (let l_x = 0; l_x < scene.level.w; l_x++) {\n          const m_y = l_y + 1;\n          const d_x = -t_x + l_x * 16 * scale;\n          const d_y = -t_y + m_y * 16 * scale;\n          renderMonster(scene.level.monsters[m_y][l_x], d_x, d_y, time);\n        }\n      }\n    }\n\n    ctx.restore();\n\n    ctx.save();\n    ctx.globalAlpha = 0.8;\n    ctx.globalCompositeOperation = \"multiply\";\n    ctx.drawImage(buffer, 0, 0);\n    ctx.restore();\n  }\n\n  function renderLight(x: number, y: number, radius: number) {\n    const diameter = radius << 1;\n    const box_x = x - radius;\n    const box_y = y - radius;\n\n    const grd = b_ctx.createRadialGradient(x, y, 16, x, y, radius);\n    grd.addColorStop(0.5, \"rgb(255,255,255)\");\n    grd.addColorStop(1, \"transparent\");\n    b_ctx.fillStyle = grd;\n    b_ctx.fillRect(box_x, box_y, diameter, diameter);\n  }\n\n  function renderHUD(time: number) {\n    renderHealth(time);\n    renderLevelTitle(time);\n    renderYouDead(time);\n    renderInventory(time);\n  }\n  function renderHealth(time: number) {\n    const border = 4;\n    const height = 20;\n    const point_w = 10;\n    const h_m = scene.level.hero.healthMax;\n    const h = scene.level.hero.health;\n\n    // render HUD - hero health\n    ctx.save();\n    ctx.translate(40, 40);\n\n    // background\n    ctx.fillStyle = \"rgb(0,0,0)\";\n    ctx.fillRect(0, 0, border * 2 + point_w * h_m, border * 2 + height);\n\n    // health red line\n    ctx.fillStyle = \"rgb(255,0,0)\";\n    ctx.fillRect(border, border, point_w * h, height);\n\n    // health points text\n    ctx.fillStyle = \"rgb(255,255,255)\";\n    ctx.font = \"20px silkscreennormal\";\n    ctx.fillText(h.toString(), border * 2, border + 16);\n\n    // coins text\n    ctx.fillText(`$${hero.coins}`, 0, 50);\n\n    ctx.restore();\n  }\n  function renderLevelTitle(time: number) {\n    const c_w = canvas.width;\n    const c_h = canvas.height;\n\n    // render HUD - level\n    ctx.save();\n    ctx.translate(c_w / 2, 60);\n    ctx.fillStyle = \"rgb(255,255,255)\";\n    ctx.textAlign = \"center\";\n    ctx.font = \"20px silkscreennormal\";\n    ctx.fillText(`level ${scene.level.level}`, 0, 0);\n    ctx.restore();\n\n    // render HUD - log info\n    scene.level.log = scene.level.log.slice(-5);\n    ctx.save();\n    ctx.translate(40, c_h - 100);\n    for(let i=0; i<scene.level.log.length; i++) {\n      ctx.fillStyle = \"rgb(255,255,255)\";\n      ctx.font = \"20px silkscreennormal\";\n      ctx.fillText(scene.level.log[i], 0, i * 20);\n    }\n\n    ctx.restore();\n  }\n  function renderYouDead(time: number) {\n    const c_w = canvas.width;\n    const c_h = canvas.height;\n\n    if(scene.level.hero.dead) {\n      ctx.save();\n\n      ctx.fillStyle = \"rgba(0, 0, 0, 0.7)\";\n      ctx.fillRect(0, 0, c_w, c_h);\n\n      ctx.translate(c_w / 2, c_h / 2);\n\n      ctx.fillStyle = \"rgb(255,0,0)\";\n      ctx.textAlign = \"center\";\n      ctx.font = \"200px silkscreennormal\";\n      ctx.fillText(\"YOU DIED\", 0, 0);\n      ctx.restore();\n    }\n  }\n  function renderInventory(time: number) {\n    const c_w = canvas.width;\n    const c_h = canvas.height;\n\n    const cells = scene.level.hero.inventory.cells;\n    const cell_size = 16;\n    const grid_w = cells.length;\n    const grid_spacing = 2;\n\n    const inv_w = scale * (grid_w * (cell_size + grid_spacing) + grid_spacing);\n    const inv_h = scale * (cell_size + grid_spacing + grid_spacing);\n\n    ctx.save();\n    ctx.translate((c_w >> 1) - (inv_w >> 1), c_h - inv_h - 40);\n\n    // background\n    ctx.fillStyle = \"rgb(100,100,100)\";\n    ctx.fillRect(0, 0, inv_w, inv_h);\n\n    ctx.translate(grid_spacing * scale, grid_spacing * scale); // grid spacing\n\n    for (let g_x = 0; g_x < grid_w; g_x++) {\n      const c_x = scale * (g_x * (cell_size + grid_spacing));\n      const c_y = 0;\n\n      ctx.fillStyle = \"rgb(70,70,70)\";\n      ctx.fillRect(c_x, 0, cell_size * scale, cell_size * scale);\n      const cell = cells[g_x];\n      if(cell.item) {\n        const tile = cell.item.tile;\n        let sx = tile.x;\n        const sy = tile.y;\n        const sw = tile.w;\n        const sh = tile.h;\n\n        if (tile.isAnim && tile.numOfFrames > 1) {\n          const sf = Math.floor(time / 100) % tile.numOfFrames;\n          sx = tile.x + sw * sf;\n        }\n\n        const d_scale = sh <= cell_size ? 1 : cell_size / sh;\n        const dw = sw * scale * d_scale;\n        const dh = sh * scale * d_scale;\n        const c_offset_x = ((cell_size * scale) >> 1) - (dw >> 1);\n\n        ctx.drawImage(tile.tileSet, sx, sy, sw, sh, c_x + c_offset_x, c_y, dw, dh);\n        ctx.textAlign = \"end\";\n        ctx.textBaseline = \"top\";\n        ctx.font = \"10px silkscreennormal\";\n        ctx.fillStyle = \"rgb(255,255,255)\";\n        ctx.fillText(cell.count.toString(), c_x + (cell_size * scale), 0, cell_size * scale);\n      }\n    }\n    ctx.restore();\n  }\n\n  function renderMonster(monster: Monster, dx: number, dy: number, time: number) {\n    if(monster && !(monster instanceof MovingMonsterWrapper)) {\n      const sw = monster.tile.w;\n      const sh = monster.tile.h;\n      const sx = monster.tile.x + sw * monster.frame;\n      const sy = monster.tile.y;\n      const dw = sw * scale;\n      const dh = sh * scale;\n\n      const tile_offset_y = dh - 14 * scale;\n\n      let offset_x = 0;\n      let offset_y = 0;\n\n      if(monster.state === MonsterState.Run) {\n        const start = monster.start;\n        const speed = monster.speed;\n        const numOfFrames = monster.tile.numOfFrames;\n        const maxTime = speed * numOfFrames;\n        const delta = Math.min(maxTime, time - start) / maxTime;\n\n        offset_x = scale * 16 * (monster.new_x - monster.x) * delta;\n        offset_y = scale * 16 * (monster.new_y - monster.y) * delta;\n      }\n\n      if(dx + offset_x + dw > 0 && dx + offset_x < ctx.canvas.width &&\n        dy + offset_y + dh > 0 && dy + offset_y < ctx.canvas.height) {\n\n\n        ctx.save();\n        ctx.translate(dx + offset_x, dy + offset_y);\n        if(monster.is_left) {\n          ctx.scale(-1, 1);\n          if(monster.weapon) {\n            ctx.save();\n            const w = monster.weapon.tile;\n            const w_dw = w.w * scale;\n            const w_dh = w.h * scale;\n\n            const w_dy = w_dh - 14 * scale;\n            const w_dx = 4 * scale;\n\n            ctx.translate(-w_dx, -w_dy);\n\n            if(monster.state === MonsterState.Hit) {\n              let angle = 90 * monster.weapon.frame / (monster.weapon.numOfFrames - 1);\n              ctx.translate(w_dw >> 1, w_dh); // to bottom center of tile\n              ctx.rotate(angle * Math.PI / 180); // 90 degree\n              ctx.drawImage(w.tileSet, w.x, w.y, w.w, w.h, -(w_dw >> 1), -w_dh, w_dw, w_dh);\n            } else {\n              ctx.drawImage(w.tileSet, w.x, w.y, w.w, w.h, 0, 0, w_dw, w_dh);\n            }\n            ctx.restore();\n          }\n          ctx.drawImage(monster.tile.tileSet, sx, sy, sw, sh, 0 - dw, -tile_offset_y, dw, dh);\n        } else {\n          if(monster.weapon) {\n            ctx.save();\n            const w = monster.weapon.tile;\n            const w_dw = w.w * scale;\n            const w_dh = w.h * scale;\n\n            const w_dy = w_dh - 14 * scale;\n            const w_dx = 12 * scale;\n\n            ctx.translate(w_dx, -w_dy);\n\n            if(monster.state === MonsterState.Hit) {\n              let angle = 90 * monster.weapon.frame / (monster.weapon.numOfFrames - 1);\n              ctx.translate(w_dw >> 1, w_dh); // to bottom center of tile\n              ctx.rotate(angle * Math.PI / 180); // 90 degree\n              ctx.drawImage(w.tileSet, w.x, w.y, w.w, w.h, -(w_dw >> 1), -w_dh, w_dw, w_dh);\n            }else {\n              ctx.drawImage(w.tileSet, w.x, w.y, w.w, w.h, 0, 0, w_dw, w_dh);\n            }\n            ctx.restore();\n          }\n          ctx.drawImage(monster.tile.tileSet, sx, sy, sw, sh, 0, -tile_offset_y, dw, dh);\n        }\n        ctx.restore();\n      }\n    }\n  }\n\n  function renderTile(tile: Tile, dx: number, dy: number) {\n    if(tile) {\n      const sw = tile.w;\n      const sh = tile.h;\n      const dw = sw * scale;\n      const dh = sh * scale;\n      const offset_y = dh - 16 * scale;\n\n      if(dx + dw > 0 && dx < ctx.canvas.width &&\n        dy - offset_y + dh > 0 && dy - offset_y < ctx.canvas.height) {\n        if (tile.isAnim && tile.numOfFrames > 1) {\n          const time = new Date().getTime();\n          const sf = Math.floor(time / 100) % tile.numOfFrames;\n          const sx = tile.x + sw * sf;\n          const sy = tile.y;\n          ctx.drawImage(tile.tileSet, sx, sy, sw, sh, dx, dy - offset_y, dw, dh);\n        } else {\n          const sx = tile.x;\n          const sy = tile.y;\n          ctx.drawImage(tile.tileSet, sx, sy, sw, sh, dx, dy - offset_y, dw, dh);\n        }\n      }\n    }\n  }\n\n  render();\n})();","import {Inventory} from \"./inventory\";\nimport {Tile, TileRegistry} from \"./tilemap\";\nimport {Joystick} from \"./input\";\nimport {Monster, MonsterState, MovingMonsterWrapper} from \"./monster\";\nimport {Level} from \"./level\";\nimport {Weapon} from \"./drop\";\n\nexport const heroMonsterNames = [\n  \"elf_f\",\n  \"elf_m\",\n  \"knight_f\",\n  \"knight_m\",\n  \"wizard_f\",\n  \"wizard_m\",\n];\n\nexport class HeroMonster implements Monster {\n  private registry: TileRegistry;\n  private joystick: Joystick;\n  x: number;\n  y: number;\n  new_x: number;\n  new_y: number;\n  is_left: boolean;\n  readonly name: string;\n  readonly healthMax: number;\n  health: number;\n  coins: number;\n  private readonly baseDamage: number;\n  dead: boolean;\n  weapon: Weapon;\n  readonly speed: number;\n  readonly inventory: Inventory;\n  private level: Level;\n  state: MonsterState;\n  tile: Tile;\n  frame: number;\n  start: number;\n\n  constructor(registry: TileRegistry, joystick: Joystick, x: number, y: number, name: string, weapon: Weapon, time: number) {\n    this.registry = registry;\n    this.joystick = joystick;\n    this.x = x;\n    this.y = y;\n    this.new_x = x;\n    this.new_y = y;\n    this.is_left = false;\n    this.name = name;\n    this.healthMax = 30;\n    this.health = this.healthMax;\n    this.coins = 0;\n    this.baseDamage = 5;\n    this.dead = false;\n    this.weapon = weapon;\n    this.speed = 100;\n    this.inventory = new Inventory();\n    this.setAnimation(MonsterState.Idle, time);\n  }\n\n  get damage(): number {\n    return this.baseDamage + this.weapon.damage;\n  }\n\n  setLevel(level: Level) {\n    this.level = level;\n  };\n\n  setAnimation(state: MonsterState, time: number) {\n    if (!this.dead) {\n      switch (state) {\n        case MonsterState.Idle:\n          this.state = state;\n          this.tile = this.registry.get(this.name + \"_idle_anim\");\n          this.frame = 0;\n          this.start = time;\n          break;\n        case MonsterState.Run:\n          this.state = state;\n          this.tile = this.registry.get(this.name + \"_run_anim\");\n          this.frame = 0;\n          this.start = time;\n          break;\n        case MonsterState.Hit:\n          this.state = state;\n          this.tile = this.registry.get(this.name + \"_hit_anim\");\n          this.frame = 0;\n          this.weapon.frame = 0;\n          this.start = time;\n          break;\n      }\n    }\n  };\n\n  animate(time: number) {\n    switch (this.state) {\n      case MonsterState.Idle:\n        this.frame = Math.floor((time - this.start) / this.speed);\n        if (!this.action(time)) {\n          if (this.frame >= this.tile.numOfFrames) {\n            this.setAnimation(MonsterState.Idle, time);\n          }\n        }\n        break;\n      case MonsterState.Run:\n        this.frame = Math.floor((time - this.start) / this.speed);\n        if (this.frame >= this.tile.numOfFrames) {\n          this.level.monsters[this.y][this.x] = null;\n          this.level.monsters[this.new_y][this.new_x] = this;\n          this.x = this.new_x;\n          this.y = this.new_y;\n          this.scanDrop();\n          if (!this.action(time)) {\n            this.setAnimation(MonsterState.Idle, time);\n          }\n        }\n        break;\n      case MonsterState.Hit:\n        this.weapon.frame = Math.floor((time - this.start) / this.weapon.speed);\n        if (this.weapon.frame >= this.weapon.numOfFrames) {\n          this.scanHit(time);\n          this.scanDrop();\n          if (!this.action(time)) {\n            this.setAnimation(MonsterState.Idle, time);\n          }\n        }\n        break;\n    }\n  };\n\n  action(time: number) {\n    this.scanDrop();\n    for (let d = 0; d < 10; d++) {\n      const digit = (d + 1) % 10;\n      if (!this.joystick.digit(digit).processed) {\n        this.joystick.digit(digit).processed = true;\n        this.inventory.cells[d].use(this);\n      }\n    }\n\n    if (this.joystick.hit.triggered && !this.joystick.hit.processed) {\n      if (this.level.floor[this.y][this.x].name === \"floor_ladder\") {\n        this.joystick.hit.processed = true;\n        this.level.exit(time);\n        return true;\n      } else {\n        this.setAnimation(MonsterState.Hit, time);\n        return true;\n      }\n    }\n    if (this.joystick.moveUp.triggered || !this.joystick.moveUp.processed) {\n      this.joystick.moveUp.processed = true;\n      if (this.move(0, -1, time)) {\n        return true;\n      }\n    }\n    if (this.joystick.moveDown.triggered || !this.joystick.moveDown.processed) {\n      this.joystick.moveDown.processed = true;\n      if (this.move(0, 1, time)) {\n        return true;\n      }\n    }\n    if (this.joystick.moveLeft.triggered || !this.joystick.moveLeft.processed) {\n      this.joystick.moveLeft.processed = true;\n      this.is_left = true;\n      if (this.move(-1, 0, time)) {\n        return true;\n      }\n    }\n    if (this.joystick.moveRight.triggered || !this.joystick.moveRight.processed) {\n      this.joystick.moveRight.processed = true;\n      this.is_left = false;\n      if (this.move(1, 0, time)) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  scanDrop() {\n    if (this.level.drop[this.y][this.x]) {\n      const drop = this.level.drop[this.y][this.x];\n      if (drop.pickedUp(this)) {\n        this.level.drop[this.y][this.x] = null;\n      }\n    }\n  };\n\n  scanHit(time: number) {\n    const max_distance = this.weapon.distance;\n    // search only left or right path\n    const scan_x_min = this.is_left ? Math.max(0, this.x - max_distance) : this.x;\n    const scan_x_max = this.is_left ? this.x : Math.min(this.level.w, this.x + max_distance);\n\n    const scan_y_min = Math.max(0, this.y - max_distance);\n    const scan_y_max = Math.min(this.level.h, this.y + max_distance);\n\n    for (let s_y = scan_y_min; s_y <= scan_y_max; s_y++) {\n      for (let s_x = scan_x_min; s_x <= scan_x_max; s_x++) {\n        // not self\n        if (!(s_x === this.x && s_y === this.y)) {\n          const monster = this.level.monsters[s_y][s_x];\n          if (monster) {\n            monster.hitDamage(this.damage, this.name, time);\n          }\n        }\n      }\n    }\n  };\n\n  move(d_x: number, d_y: number, time: number) {\n    if (!this.dead && this.state === MonsterState.Idle) {\n      const new_x = this.x + d_x;\n      const new_y = this.y + d_y;\n\n      // check is floor exists\n      if (!this.level.floor[new_y][new_x]) return false;\n\n      // check is no monster\n      if (this.level.monsters[new_y][new_x]) return false;\n\n      // start move animation\n      this.level.monsters[new_y][new_x] = new MovingMonsterWrapper(this); // mark as used\n      this.new_x = new_x;\n      this.new_y = new_y;\n      this.setAnimation(MonsterState.Run, time);\n      return true;\n    }\n    return false;\n  };\n\n  resetPosition(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n    this.new_x = x;\n    this.new_y = y;\n  };\n\n  hitDamage(damage: number, name: string, time: number) {\n    if (!this.dead) {\n      this.level.log.push(`${this.name} damaged ${damage} by ${name}`);\n      this.health = Math.max(0, this.health - damage);\n      if (this.health <= 0) {\n        this.level.log.push(`${this.name} killed by ${name}`);\n        this.setAnimation(MonsterState.Idle, time);\n        this.dead = true;\n      }\n    }\n  };\n\n  hill(health: number) {\n    this.health = Math.min(this.healthMax, this.health + health);\n  };\n\n  addCoins(coins: number) {\n    this.coins = this.coins + coins;\n  };\n}","enum KeyBindState {Await = 1, Pressed = 2}\n\nexport class KeyBind {\n  private readonly code: string;\n  private state: KeyBindState;\n  triggered: boolean;\n  processed: boolean;\n\n  constructor(code: string) {\n    this.code = code;\n    this.state = KeyBindState.Await;\n    this.triggered = false;\n    this.processed = true;\n  }\n\n  keydown(e: KeyboardEvent) {\n    if (e.code === this.code) {\n      e.preventDefault();\n      if (this.state === KeyBindState.Await) {\n        this.triggered = true;\n        this.processed = false;\n        this.state = KeyBindState.Pressed;\n      }\n    }\n  }\n\n  keyup(e: KeyboardEvent) {\n    if (e.code === this.code) {\n      e.preventDefault();\n      if (this.state === KeyBindState.Pressed) {\n        this.triggered = false;\n        this.state = KeyBindState.Await;\n      }\n    }\n  }\n}\n\nexport class Joystick {\n  readonly moveUp: KeyBind;\n  readonly moveLeft: KeyBind;\n  readonly moveDown: KeyBind;\n  readonly moveRight: KeyBind;\n  readonly hit: KeyBind;\n  readonly digit1: KeyBind;\n  readonly digit2: KeyBind;\n  readonly digit3: KeyBind;\n  readonly digit4: KeyBind;\n  readonly digit5: KeyBind;\n  readonly digit6: KeyBind;\n  readonly digit7: KeyBind;\n  readonly digit8: KeyBind;\n  readonly digit9: KeyBind;\n  readonly digit0: KeyBind;\n\n  constructor() {\n    this.moveUp = new KeyBind('KeyW');\n    this.moveLeft = new KeyBind('KeyA');\n    this.moveDown = new KeyBind('KeyS');\n    this.moveRight = new KeyBind('KeyD');\n    this.hit = new KeyBind('KeyF');\n\n    this.digit1 = new KeyBind('Digit1');\n    this.digit2 = new KeyBind('Digit2');\n    this.digit3 = new KeyBind('Digit3');\n    this.digit4 = new KeyBind('Digit4');\n    this.digit5 = new KeyBind('Digit5');\n    this.digit6 = new KeyBind('Digit6');\n    this.digit7 = new KeyBind('Digit7');\n    this.digit8 = new KeyBind('Digit8');\n    this.digit9 = new KeyBind('Digit9');\n    this.digit0 = new KeyBind('Digit0');\n    this.init();\n  }\n\n  digit(num: number): KeyBind {\n    switch (num) {\n      case 1: return this.digit1;\n      case 2: return this.digit2;\n      case 3: return this.digit3;\n      case 4: return this.digit4;\n      case 5: return this.digit5;\n      case 6: return this.digit6;\n      case 7: return this.digit7;\n      case 8: return this.digit8;\n      case 9: return this.digit9;\n      case 0: return this.digit0;\n    }\n  }\n\n  init() {\n    window.addEventListener(\"keydown\", this.keydown.bind(this));\n    window.addEventListener(\"keyup\", this.keyup.bind(this));\n  };\n\n  keydown(e: KeyboardEvent) {\n    this.moveUp.keydown(e);\n    this.moveLeft.keydown(e);\n    this.moveDown.keydown(e);\n    this.moveRight.keydown(e);\n    this.hit.keydown(e);\n    this.digit1.keydown(e);\n    this.digit2.keydown(e);\n    this.digit3.keydown(e);\n    this.digit4.keydown(e);\n    this.digit5.keydown(e);\n    this.digit6.keydown(e);\n    this.digit7.keydown(e);\n    this.digit8.keydown(e);\n    this.digit9.keydown(e);\n    this.digit0.keydown(e);\n  };\n\n  keyup(e: KeyboardEvent) {\n    this.moveUp.keyup(e);\n    this.moveLeft.keyup(e);\n    this.moveDown.keyup(e);\n    this.moveRight.keyup(e);\n    this.hit.keyup(e);\n    this.digit1.keyup(e);\n    this.digit2.keyup(e);\n    this.digit3.keyup(e);\n    this.digit4.keyup(e);\n    this.digit5.keyup(e);\n    this.digit6.keyup(e);\n    this.digit7.keyup(e);\n    this.digit8.keyup(e);\n    this.digit9.keyup(e);\n    this.digit0.keyup(e);\n  };\n}","import {UsableDrop} from \"./drop\";\nimport {HeroMonster} from \"./hero\";\n\nexport class Inventory {\n  readonly cells: InventoryCell[];\n\n  constructor() {\n    this.cells = [];\n    for (let i = 0; i < 10; i++) {\n      this.cells[i] = new InventoryCell();\n    }\n  }\n\n  add(item: UsableDrop) {\n    for (let i = 0; i < this.cells.length; i++) {\n      if (this.cells[i].stack(item)) {\n        return true;\n      }\n    }\n    for (let i = 0; i < this.cells.length; i++) {\n      if (this.cells[i].set(item)) {\n        return true;\n      }\n    }\n    return false;\n  };\n}\n\nexport class InventoryCell {\n  private readonly maxInStack: number;\n  item: UsableDrop;\n  count: number;\n\n  constructor() {\n    this.maxInStack = 3;\n    this.item = null;\n    this.count = 0;\n  }\n\n  stack(item: UsableDrop) {\n    if (this.item && this.item.same(item) && this.count < this.maxInStack) {\n      this.count++;\n      return true;\n    }\n    return false;\n  };\n\n  set(item: UsableDrop) {\n    if (!this.item) {\n      this.item = item;\n      this.count = 1;\n      return true;\n    }\n    return false;\n  };\n\n  use(hero: HeroMonster) {\n    if (this.item && this.count > 0) {\n      this.item.use(this, hero);\n      return true;\n    }\n    return false;\n  };\n}","import {TinyMonster, tinyMonsterNames} from \"./tiny.monster\";\nimport {Coins, Drop, HealthBigFlask, HealthFlask, WeaponConfig} from \"./drop\";\nimport {RNG} from \"./rng\";\nimport {Tile, TileRegistry} from \"./tilemap\";\nimport {Scene} from \"./scene\";\nimport {HeroMonster} from \"./hero\";\nimport {Monster} from \"./monster\";\n\nconst x_dist = 2;\nconst y_dist = 3;\n\nexport class Rect {\n  readonly x: number;\n  readonly y: number;\n  readonly w: number;\n  readonly h: number;\n\n  constructor(x: number, y: number, w: number, h: number) {\n    this.x = x;\n    this.y = y;\n    this.w = w;\n    this.h = h;\n  }\n\n  expand() {\n    const a = this;\n    return new Rect(\n      a.x - x_dist,\n      a.y - y_dist,\n      a.w + x_dist + x_dist,\n      a.h + y_dist + y_dist\n    );\n  }\n\n  expandV() {\n    const a = this;\n    return new Rect(\n      a.x - x_dist,\n      a.y,\n      a.w + x_dist + x_dist,\n      a.h\n    );\n  }\n\n  expandH() {\n    const a = this;\n    return new Rect(\n      a.x,\n      a.y - y_dist,\n      a.w,\n      a.h + y_dist + y_dist\n    );\n  }\n\n  isOverlap(b: Rect) {\n    const a = this;\n    return a.x < b.x + b.w\n      && a.x + a.w > b.x\n      && a.y < b.y + b.h\n      && a.y + a.h > b.y;\n  }\n}\n\nexport class Level {\n  private readonly rng: RNG;\n  private readonly registry: TileRegistry;\n  private readonly scene: Scene;\n  readonly level: number;\n  readonly w: number;\n  readonly h: number;\n  log: string[];\n  private readonly rooms: Rect[];\n  private readonly corridorsV: Rect[];\n  private readonly corridorsH: Rect[];\n  readonly floor: Tile[][];\n  readonly drop: Drop[][];\n  readonly wall: Tile[][];\n\n  monsterList: TinyMonster[];\n  readonly hero: HeroMonster;\n  readonly monsters: Monster[][];\n\n  constructor(rng: RNG, registry: TileRegistry, scene: Scene, hero: HeroMonster, l: number, time: number) {\n    this.rng = rng;\n    this.registry = registry;\n    this.scene = scene;\n    this.level = l;\n    this.w = 200;\n    this.h = 120;\n\n    this.log = [];\n    this.rooms = [];\n    this.corridorsV = [];\n    this.corridorsH = [];\n\n    this.floor = this.createBuffer(() => null);\n    this.drop = this.createBuffer(() => null);\n    this.wall = this.createBuffer(() => null);\n\n    this.monsterList = [];\n    this.hero = hero;\n    this.monsters = this.createBuffer(() => null);\n\n    this.generate(time);\n    this.fill();\n    this.replace();\n  }\n\n  createBuffer<T>(defaultValue: () => T): T[][] {\n    const rows: T[][] = [];\n    for (let y = 0; y < this.h; y++) {\n      const row: T[] = [];\n      rows.push(row);\n      for (let x = 0; x < this.w; x++) {\n        row.push(defaultValue());\n      }\n    }\n    return rows;\n  };\n\n  generate(time: number) {\n    const rooms_total = 1 + this.level;\n    const monsters_total = 3 + this.level;\n    const drop_total = 5 + this.level;\n\n    // create rooms\n    for (let r = 0; r < rooms_total; r++) {\n      this.generateRoom();\n    }\n\n    // create monsters\n    for (let m = 0; m < monsters_total; m++) {\n      const r = this.rng.nextRange(1, this.rooms.length);\n      const room = this.rooms[r];\n      for (let t = 0; t < 10; t++) {\n        const x = room.x + this.rng.nextRange(0, room.w);\n        const y = room.y + this.rng.nextRange(0, room.h);\n        if (!this.monsters[y][x]) {\n          const name = this.rng.choice(tinyMonsterNames);\n          const monster = new TinyMonster(this.rng, this.registry, this, x, y, name, time);\n          this.monsterList.push(monster);\n          this.monsters[y][x] = monster;\n          break;\n        }\n      }\n    }\n\n    // create drop\n    for (let d = 0; d < drop_total; d++) {\n      const room = this.rng.choice(this.rooms);\n      for (let t = 0; t < 10; t++) {\n        const x = room.x + this.rng.nextRange(0, room.w);\n        const y = room.y + this.rng.nextRange(0, room.h);\n        if (!this.drop[y][x]) {\n          this.randomDrop(x, y);\n          break;\n        }\n      }\n    }\n\n    // position of hero\n    {\n      const room = this.rooms[0];\n      const hero_x = room.x + (room.w >> 1);\n      const hero_y = room.y + (room.h >> 1);\n      this.hero.setLevel(this);\n      this.hero.resetPosition(hero_x, hero_y);\n      this.monsters[hero_y][hero_x] = this.hero;\n    }\n  };\n\n  generateRoom() {\n    const room_min_w = 5;\n    const room_min_h = 3;\n    const room_max_w = 15;\n    const room_max_h = 10;\n    const room_min_x = 2;\n    const room_min_y = 2;\n\n    const max_corr_dist = 12;\n\n    while (true) {\n      const room_w = this.rng.nextRange(room_min_w, room_max_w);\n      const room_h = this.rng.nextRange(room_min_h, room_max_h);\n\n      const room = new Rect(\n        this.rng.nextRange(room_min_x, this.w - 2 - room_w),\n        this.rng.nextRange(room_min_y, this.h - 2 - room_h),\n        room_w,\n        room_h\n      );\n\n      if (!this.isOverlap(room.expand())) {\n        // free position found\n        if (this.rooms.length === 0) {\n          this.rooms.push(room);\n          break;\n        } else {\n          // find connection\n          const a = room;\n          let connected = false;\n\n          // find closest room\n          for (let i = 0; i < this.rooms.length; i++) {\n            let b = this.rooms[i];\n\n            // try calculate horizontal distance\n            const max_x = Math.max(a.x, b.x);\n            const min_x_w = Math.min(a.x + a.w, b.x + b.w);\n            if (max_x + 5 <= min_x_w) {\n              let rect;\n              if (a.y + a.h < b.y) {\n                rect = new Rect(\n                  max_x + 2,\n                  a.y + a.h,\n                  min_x_w - max_x - 4,\n                  b.y - a.y - a.h\n                );\n              } else {\n                rect = new Rect(\n                  max_x + 2,\n                  b.y + b.h,\n                  min_x_w - max_x - 4,\n                  a.y - b.y - b.h\n                );\n              }\n              if (rect.h < max_corr_dist && !this.isOverlap(rect.expandV())) {\n                this.corridorsV.push(rect);\n                connected = true;\n              }\n            }\n\n            // try calculate vertical distance\n            const max_y = Math.max(a.y, b.y);\n            const min_y_h = Math.min(a.y + a.h, b.y + b.h);\n            if (max_y + 3 <= min_y_h) {\n              let rect;\n              if (a.x + a.w < b.x) {\n                rect = new Rect(\n                  a.x + a.w,\n                  max_y + 1,\n                  b.x - a.x - a.w,\n                  min_y_h - max_y - 2\n                );\n              } else {\n                rect = new Rect(\n                  b.x + b.w,\n                  max_y + 1,\n                  a.x - b.x - b.w,\n                  min_y_h - max_y - 2,\n                );\n              }\n              if (rect.w < max_corr_dist && !this.isOverlap(rect.expandH())) {\n                this.corridorsH.push(rect);\n                connected = true;\n              }\n            }\n          }\n\n          if (connected) {\n            this.rooms.push(room);\n            break;\n          }\n        }\n      }\n    }\n  }\n\n  isOverlap(a: Rect) {\n    const f = a.isOverlap.bind(a);\n    return this.rooms.some(f) ||\n      this.corridorsV.some(f) ||\n      this.corridorsH.some(f);\n  };\n\n  randomDrop(x: number, y: number) {\n    const weight_coins = 30;\n    const weight_health_flask = 10;\n    const weight_health_big_flask = 10;\n    const weight_weapon = 3;\n\n    const total = weight_coins + weight_health_flask + weight_health_big_flask + weight_weapon;\n    const rnd = this.rng.nextFloat() * total;\n    console.log(rnd);\n\n    if (rnd < weight_weapon) {\n      const available = WeaponConfig.configs.filter(c => c.level <= this.level);\n      this.drop[y][x] = this.rng.choice(available).create(this.registry);\n    } else if (rnd < weight_health_big_flask) {\n      this.drop[y][x] = new HealthBigFlask(this.registry);\n    } else if (rnd < weight_health_flask) {\n      this.drop[y][x] = new HealthFlask(this.registry);\n    } else if (rnd < weight_coins) {\n      this.drop[y][x] = new Coins(this.rng, this.registry);\n    }\n  };\n\n  fill() {\n    this.rooms.forEach(r => this.fillRoom(r.x, r.y, r.w, r.h));\n    this.corridorsH.forEach(r => this.fillCorridorH(r.x, r.y, r.w, r.h));\n    this.corridorsV.forEach(r => this.fillCorridorV(r.x, r.y, r.w, r.h));\n  };\n\n  fillRoom(x: number, y: number, w: number, h: number) {\n    // fill floor\n    for (let r_y = y; r_y < y + h; r_y++) {\n      for (let r_x = x; r_x < x + w; r_x++) {\n        this.floor[r_y][r_x] = this.registry.get(\"floor_1\");\n      }\n    }\n    // fill top wall\n    this.wall[y - 2][x] = this.registry.get(\"wall_corner_top_left\");\n    this.wall[y - 1][x] = this.registry.get(\"wall_corner_left\");\n    if (w > 1) {\n      for (let r_x = x + 1; r_x < x + w - 1; r_x++) {\n        this.wall[y - 2][r_x] = this.registry.get(\"wall_top_mid\");\n        this.wall[y - 1][r_x] = this.registry.get(\"wall_mid\");\n      }\n      this.wall[y - 2][x + w - 1] = this.registry.get(\"wall_corner_top_right\");\n      this.wall[y - 1][x + w - 1] = this.registry.get(\"wall_corner_right\");\n    }\n    // fill bottom wall\n    this.wall[y + h - 1][x] = this.registry.get(\"wall_corner_bottom_left\");\n    this.wall[y + h][x] = this.registry.get(\"wall_left\");\n    if (w > 1) {\n      for (let r_x = x + 1; r_x < x + w - 1; r_x++) {\n        this.wall[y + h - 1][r_x] = this.registry.get(\"wall_top_mid\");\n        this.wall[y + h][r_x] = this.registry.get(\"wall_mid\");\n      }\n      this.wall[y + h - 1][x + w - 1] = this.registry.get(\"wall_corner_bottom_right\");\n      this.wall[y + h][x + w - 1] = this.registry.get(\"wall_right\");\n    }\n    // fill right wall\n    for (let r_y = y; r_y < y + h - 1; r_y++) {\n      this.wall[r_y][x] = this.registry.get(\"wall_side_mid_right\");\n    }\n    // fill left wall\n    for (let r_y = y; r_y < y + h - 1; r_y++) {\n      this.wall[r_y][x + w - 1] = this.registry.get(\"wall_side_mid_left\");\n    }\n  };\n\n  fillCorridorH(x: number, y: number, w: number, h: number) {\n    // fill floor\n    for (let r_y = y; r_y < y + h; r_y++) {\n      for (let r_x = x; r_x < x + w; r_x++) {\n        this.floor[r_y][r_x] = this.registry.get(\"floor_1\");\n      }\n    }\n\n    // connect with room top left\n    switch (this.wall[y - 2][x - 1].name) {\n      case \"wall_corner_top_right\":\n        this.wall[y - 2][x - 1] = this.registry.get(\"wall_top_mid\");\n        break;\n      case \"wall_side_mid_left\":\n        break;\n      default:\n        console.log(\"top left 2\", this.wall[y - 2][x - 1]);\n        break;\n    }\n    switch (this.wall[y - 1][x - 1].name) {\n      case \"wall_corner_right\":\n        this.wall[y - 1][x - 1] = this.registry.get(\"wall_mid\");\n        break;\n      case \"wall_side_mid_left\":\n        this.wall[y - 1][x - 1] = this.registry.get(\"wall_side_front_left\");\n        break;\n      default:\n        console.log(\"top left 1\", this.wall[y - 1][x - 1]);\n        break;\n    }\n\n    // connect with room mid left\n    if (h > 1) {\n      for (let l_y = y; l_y < y + h - 1; l_y++) {\n        switch (this.wall[l_y][x - 1].name) {\n          case \"wall_side_mid_left\":\n            this.wall[l_y][x - 1] = null;\n            break;\n          default:\n            console.log(\"mid left\", this.wall[l_y][x - 1]);\n            break;\n        }\n      }\n    }\n\n    // connect with room bottom left\n    switch (this.wall[y + h - 1][x - 1].name) {\n      case \"wall_side_mid_left\":\n        this.wall[y + h - 1][x - 1] = this.registry.get(\"wall_side_top_left\");\n        break;\n      case \"wall_corner_bottom_right\":\n        this.wall[y + h - 1][x - 1] = this.registry.get(\"wall_top_mid\");\n        break;\n      default:\n        console.log(\"bottom left 0\", this.wall[y + h - 1][x - 1]);\n        break;\n    }\n    switch (this.wall[y + h][x - 1].name) {\n      case \"wall_side_mid_left\":\n        break;\n      case \"wall_right\":\n        this.wall[y + h][x - 1] = this.registry.get(\"wall_mid\");\n        break;\n      default:\n        console.log(\"bottom left 1\", this.wall[y + h][x - 1]);\n        break;\n    }\n\n    // connect with room top right\n    switch (this.wall[y - 2][x + w].name) {\n      case \"wall_corner_top_left\":\n        this.wall[y - 2][x + w] = this.registry.get(\"wall_top_mid\");\n        break;\n      case \"wall_side_mid_right\":\n        break;\n      default:\n        console.log(\"top right 2\", this.wall[y - 2][x + w]);\n        break;\n    }\n    switch (this.wall[y - 1][x + w].name) {\n      case \"wall_corner_left\":\n        this.wall[y - 1][x + w] = this.registry.get(\"wall_mid\");\n        break;\n      case \"wall_side_mid_right\":\n        this.wall[y - 1][x + w] = this.registry.get(\"wall_side_front_right\");\n        break;\n      default:\n        console.log(\"top right 1\", this.wall[y - 1][x + w]);\n        break;\n    }\n\n    // connect with room mid right\n    if (h > 1) {\n      for (let l_y = y; l_y < y + h - 1; l_y++) {\n        switch (this.wall[l_y][x + w].name) {\n          case \"wall_side_mid_right\":\n            this.wall[l_y][x + w] = null;\n            break;\n          default:\n            console.log(\"mid right\", this.wall[l_y][x + w]);\n            break;\n        }\n      }\n    }\n\n    // connect with room bottom right\n    switch (this.wall[y + h - 1][x + w].name) {\n      case \"wall_side_mid_right\":\n        this.wall[y + h - 1][x + w] = this.registry.get(\"wall_side_top_right\");\n        break;\n      case \"wall_corner_bottom_left\":\n        this.wall[y + h - 1][x + w] = this.registry.get(\"wall_top_mid\");\n        break;\n      default:\n        console.log(\"bottom right 0\", this.wall[y + h - 1][x + w]);\n        break;\n    }\n    switch (this.wall[y + h][x + w].name) {\n      case \"wall_side_mid_right\":\n        break;\n      case \"wall_left\":\n        this.wall[y + h][x + w] = this.registry.get(\"wall_mid\");\n        break;\n      default:\n        console.log(\"bottom right +1\", this.wall[y + h][x + w]);\n        break;\n    }\n\n    // fill top wall\n    for (let r_x = x; r_x < x + w; r_x++) {\n      this.wall[y - 2][r_x] = this.registry.get(\"wall_top_mid\");\n      this.wall[y - 1][r_x] = this.registry.get(\"wall_mid\");\n    }\n\n    // fill bottom wall\n    for (let r_x = x; r_x < x + w; r_x++) {\n      this.wall[y + h - 1][r_x] = this.registry.get(\"wall_top_mid\");\n      this.wall[y + h][r_x] = this.registry.get(\"wall_mid\");\n    }\n  };\n\n  fillCorridorV(x: number, y: number, w: number, h: number) {\n    // fill floor\n    for (let r_y = y; r_y < y + h; r_y++) {\n      for (let r_x = x; r_x < x + w; r_x++) {\n        this.floor[r_y][r_x] = this.registry.get(\"floor_1\");\n      }\n    }\n\n    // connect with room top left\n    switch (this.wall[y - 1][x - 1].name) {\n      case \"wall_top_mid\":\n        this.wall[y - 1][x - 1] = this.registry.get(\"wall_corner_top_right\");\n        break;\n      default:\n        console.log(\"top left -1 -1\", this.wall[y - 1][x - 1]);\n        break;\n    }\n    switch (this.wall[y][x - 1].name) {\n      case \"wall_mid\":\n        this.wall[y][x - 1] = this.registry.get(\"wall_corner_right\");\n        break;\n      default:\n        console.log(\"top left 0 -1\", this.wall[y][x - 1]);\n        break;\n    }\n\n    // connect with room top mid\n    for (let r_x = x; r_x < x + w; r_x++) {\n      switch (this.wall[y - 1][r_x].name) {\n        case \"wall_top_mid\":\n          this.wall[y - 1][r_x] = null;\n          break;\n        default:\n          console.log(\"top mid -1\", this.wall[y - 1][r_x]);\n          break;\n      }\n      switch (this.wall[y][r_x].name) {\n        case \"wall_mid\":\n          this.wall[y][r_x] = null;\n          break;\n        default:\n          console.log(\"top mid 0\", this.wall[y][r_x]);\n          break;\n      }\n    }\n\n    // connect with room top right\n    switch (this.wall[y - 1][x + w].name) {\n      case \"wall_top_mid\":\n        this.wall[y - 1][x + w] = this.registry.get(\"wall_corner_top_left\");\n        break;\n      default:\n        console.log(\"top right -1 1\", this.wall[y - 1][x + w]);\n        break;\n    }\n    switch (this.wall[y][x + w].name) {\n      case \"wall_mid\":\n        this.wall[y][x + w] = this.registry.get(\"wall_corner_left\");\n        break;\n      default:\n        console.log(\"top right 0 -1\", this.wall[y][x + w]);\n        break;\n    }\n\n\n    // connect with room bottom left\n    switch (this.wall[y + h - 2][x - 1].name) {\n      case \"wall_top_mid\":\n        this.wall[y + h - 2][x - 1] = this.registry.get(\"wall_corner_bottom_right\");\n        break;\n      default:\n        console.log(\"bottom left -2 -1\", this.wall[y + h - 2][x - 1]);\n        break;\n    }\n    switch (this.wall[y + h - 1][x - 1].name) {\n      case \"wall_mid\":\n        this.wall[y + h - 1][x - 1] = this.registry.get(\"wall_corner_front_right\");\n        break;\n      default:\n        console.log(\"top left 0 -1\", this.wall[y + h - 1][x - 1]);\n        break;\n    }\n\n    // connect with room bottom mid\n    for (let r_x = x; r_x < x + w; r_x++) {\n      switch (this.wall[y + h - 2][r_x].name) {\n        case \"wall_top_mid\":\n          this.wall[y + h - 2][r_x] = null;\n          break;\n        default:\n          console.log(\"bottom mid -2\", this.wall[y + h - 2][r_x]);\n          break;\n      }\n      switch (this.wall[y + h - 1][r_x].name) {\n        case \"wall_mid\":\n          this.wall[y + h - 1][r_x] = null;\n          break;\n        default:\n          console.log(\"bottom mid -1\", this.wall[y + h - 1][r_x]);\n          break;\n      }\n    }\n\n    // connect with room bottom right\n    switch (this.wall[y + h - 2][x + w].name) {\n      case \"wall_top_mid\":\n        this.wall[y + h - 2][x + w] = this.registry.get(\"wall_corner_bottom_left\");\n        break;\n      default:\n        console.log(\"bottom right -2 -1\", this.wall[y + h - 2][x - 1]);\n        break;\n    }\n    switch (this.wall[y + h - 1][x + w].name) {\n      case \"wall_mid\":\n        this.wall[y + h - 1][x + w] = this.registry.get(\"wall_corner_front_left\");\n        break;\n      default:\n        console.log(\"bottom right 0 -1\", this.wall[y + h - 1][x - 1]);\n        break;\n    }\n\n    // fill side walls\n    for (let r_y = y + 1; r_y < y + h - 2; r_y++) {\n      this.wall[r_y][x - 1] = this.registry.get(\"wall_side_mid_left\");\n      this.wall[r_y][x + w] = this.registry.get(\"wall_side_mid_right\");\n    }\n  };\n\n  replace() {\n    this.replaceFloorRandomly();\n    this.replaceLadder();\n    this.replaceWallRandomly();\n  };\n\n  replaceFloorRandomly() {\n    const replacements = [\"floor_2\", \"floor_3\", \"floor_4\", \"floor_5\", \"floor_6\", \"floor_7\", \"floor_8\"];\n    const percent = 0.2;\n    for (let y = 0; y < this.h; y++) {\n      for (let x = 0; x < this.w; x++) {\n        if (this.floor[y][x] && this.rng.nextFloat() < percent) {\n          this.floor[y][x] = this.registry.get(this.rng.choice(replacements));\n        }\n      }\n    }\n  };\n\n  replaceLadder() {\n    // replace one tile in last room as ladder = out from level!\n    const last = this.rooms[this.rooms.length - 1];\n\n    const ladder_x = last.x + (last.w >> 1);\n    const ladder_y = last.y + (last.h >> 1);\n    console.log(ladder_x, ladder_y, last);\n    this.floor[ladder_y][ladder_x] = this.registry.get(\"floor_ladder\");\n  };\n\n  replaceWallRandomly() {\n    const wall_mid_top_replaces = [\n      \"wall_hole_1\",\n      \"wall_hole_2\",\n      \"wall_banner_red\",\n      \"wall_banner_blue\",\n      \"wall_banner_green\",\n      \"wall_banner_yellow\",\n      \"wall_goo\",\n      \"wall_fountain_mid_red_anim\",\n      \"wall_fountain_mid_blue_anim\",\n    ];\n    const wall_mid_bottom_replaces = [\n      \"wall_hole_1\",\n      \"wall_hole_2\",\n    ];\n    const percent = 0.2;\n    for (let y = 0; y < this.h; y++) {\n      for (let x = 0; x < this.w; x++) {\n        if (this.wall[y][x]) {\n          switch (this.wall[y][x].name) {\n            case \"wall_mid\":\n              if (this.rng.nextFloat() < percent) {\n                const is_top = !!this.floor[y + 1][x];\n                let replacements: string[];\n                if (is_top) {\n                  replacements = wall_mid_top_replaces;\n                } else {\n                  replacements = wall_mid_bottom_replaces;\n                }\n                const replacement = this.rng.choice(replacements);\n                switch (replacement) {\n                  case \"wall_goo\":\n                    this.wall[y][x] = this.registry.get(\"wall_goo\");\n                    this.floor[y + 1][x] = this.registry.get(\"wall_goo_base\");\n                    break;\n                  case \"wall_fountain_mid_red_anim\":\n                    this.wall[y - 1][x] = this.registry.get(\"wall_fountain_top\");\n                    this.wall[y][x] = this.registry.get(\"wall_fountain_mid_red_anim\");\n                    this.floor[y + 1][x] = this.registry.get(\"wall_fountain_basin_red_anim\");\n                    break;\n                  case \"wall_fountain_mid_blue_anim\":\n                    this.wall[y - 1][x] = this.registry.get(\"wall_fountain_top\");\n                    this.wall[y][x] = this.registry.get(\"wall_fountain_mid_blue_anim\");\n                    this.floor[y + 1][x] = this.registry.get(\"wall_fountain_basin_blue_anim\");\n                    break;\n                  default:\n                    this.wall[y][x] = this.registry.get(replacement);\n                    break;\n                }\n              }\n              break;\n            default:\n              // console.log(\"replace\", this.wall[y][x]);\n              break;\n          }\n        }\n      }\n    }\n  };\n\n  exit(time: number) {\n    this.scene.setLevel(new Level(this.rng, this.registry, this.scene, this.hero, this.level + 1, time))\n  };\n\n  animate(time: number) {\n    this.monsterList.forEach(m => m.animate(time));\n    this.hero.animate(time);\n  };\n}","import {Tile} from \"./tilemap\";\nimport {Weapon} from \"./drop\";\n\nexport enum MonsterState {\n  Idle = 0, Run = 1, Hit = 2\n}\n\nexport interface Monster {\n  x: number\n  y: number\n  new_x: number\n  new_y: number\n  is_left: boolean\n  frame: number\n  start: number\n  speed: number\n  tile: Tile\n  state: MonsterState\n  weapon: Weapon\n  hitDamage(damage: number, name: string, time: number): void;\n}\n\nexport class MovingMonsterWrapper implements Monster {\n  private readonly monster: Monster;\n\n  constructor(monster: Monster) {\n    this.monster = monster;\n  }\n\n  hitDamage(damage: number, name: string, time: number) {\n    this.monster.hitDamage(damage, name, time);\n  }\n\n  get x(): number {\n    return this.monster.x;\n  }\n\n  get y(): number {\n    return this.monster.y;\n  }\n\n  get new_x(): number {\n    return this.monster.new_x;\n  }\n\n  get new_y(): number {\n    return this.monster.new_y;\n  }\n\n  get is_left(): boolean {\n    return this.monster.is_left;\n  }\n\n  get frame(): number {\n    return this.monster.frame;\n  }\n\n  get start(): number {\n    return this.monster.start;\n  }\n\n  get speed(): number {\n    return this.monster.speed;\n  }\n\n  get tile(): Tile {\n    return this.monster.tile;\n  }\n\n  get state(): MonsterState {\n    return this.monster.state;\n  }\n\n  get weapon(): Weapon {\n    return this.monster.weapon;\n  }\n}","/**\n * https://stackoverflow.com/questions/424292/seedable-javascript-random-number-generator\n * LCG using GCC's constants\n */\n\nconst m = 0x80000000; // 2^31;\nconst a = 1103515245;\nconst c = 12345;\n\nexport class RNG {\n  private state: number;\n\n  constructor(seed: number = null) {\n    this.state = seed ? seed : Math.floor(Math.random() * (m - 1));\n    console.log(\"seed\", this.state);\n  }\n\n  nextInt(): number {\n    this.state = (a * this.state + c) % m;\n    return this.state;\n  }\n\n  nextFloat(): number {\n    return this.nextInt() / (m - 1);\n  }\n\n  nextRange(start: number, end: number): number {\n    const rangeSize = end - start;\n    const randomUnder1 = this.nextInt() / m;\n    return start + Math.floor(randomUnder1 * rangeSize);\n  }\n\n  choice<T>(array: T[]): T {\n    return array[this.nextRange(0, array.length)];\n  }\n}","import {Level} from \"./level\";\n\nexport class Scene {\n  level: Level;\n\n  setLevel(level: Level) {\n    this.level = level;\n  }\n}","// https://0x72.itch.io/dungeontileset-ii\n\nexport class TileRegistry {\n  private readonly tileMap: Record<string, Tile>;\n\n  constructor() {\n    this.tileMap = {};\n  }\n\n  async loadTileSet(): Promise<HTMLImageElement> {\n    return await new Promise<HTMLImageElement>((resolve => {\n      const img = new Image();\n      img.onload = ev => resolve(img);\n      img.src = \"0x72_DungeonTilesetII_v1.2.png\";\n    }));\n  }\n\n  async load() {\n    const tileSet = await this.loadTileSet();\n    const response = await fetch(\"tiles_list_v1.1.txt\");\n    const text = await response.text();\n    const lines = text.split(/(\\r?\\n)/g);\n    lines.forEach((line) => {\n      let m = line.match(/([a-z0-9_]+) +([0-9]+) +([0-9]+) +([0-9]+) +([0-9]+) ?([0-9]?)/);\n      if (m) {\n        const x = parseInt(m[2]);\n        const y = parseInt(m[3]);\n        const w = parseInt(m[4]);\n        const h = parseInt(m[5]);\n        const numOfFrames = parseInt(m[6] || \"0\");\n        const tile = new Tile(tileSet, m[1], x, y, w, h, numOfFrames);\n        this.tileMap[tile.name] = tile;\n      }\n    });\n  }\n\n  get(tileName: string): Tile {\n    return this.tileMap[tileName];\n  }\n}\n\nexport class Tile {\n  readonly tileSet: HTMLImageElement;\n  readonly name: string;\n  readonly x: number;\n  readonly y: number;\n  readonly w: number;\n  readonly h: number;\n  readonly numOfFrames: number;\n  readonly isAnim: boolean;\n\n  constructor(tileSet: HTMLImageElement, name: string, x: number, y: number, w: number, h: number, numOfFrames: number) {\n    this.tileSet = tileSet;\n    this.name = name;\n    this.x = x;\n    this.y = y;\n    this.w = w;\n    this.h = h;\n    this.numOfFrames = numOfFrames;\n    this.isAnim = this.numOfFrames > 1;\n  }\n}","import {RNG} from \"./rng\";\nimport {Tile, TileRegistry} from \"./tilemap\";\nimport {Level} from \"./level\";\nimport {Monster, MonsterState, MovingMonsterWrapper} from \"./monster\";\nimport {Weapon} from \"./drop\";\n\nexport const tinyMonsterNames = [\n  \"tiny_zombie\",\n  \"goblin\",\n  \"imp\",\n  \"skeleton\",\n  \"muddy\",\n  \"swampy\",\n  \"zombie\",\n  \"ice_zombie\",\n];\n\nexport class TinyMonster implements Monster {\n  private readonly rng: RNG;\n  private readonly registry: TileRegistry;\n  private readonly level: Level;\n  x: number;\n  y: number;\n  new_x: number;\n  new_y: number;\n  is_left: boolean;\n  private readonly name: string;\n  private readonly healthMax: number;\n  private health: number;\n  private readonly damage: number;\n  private readonly luck: number;\n  readonly speed: number;\n  state: MonsterState;\n  tile: Tile;\n  frame: number;\n  start: number;\n  weapon: Weapon;\n\n  constructor(rng: RNG, registry: TileRegistry, level: Level, x: number, y: number, name: string, time: number) {\n    this.rng = rng;\n    this.registry = registry;\n    this.level = level;\n    this.x = x;\n    this.y = y;\n    this.new_x = x;\n    this.new_y = y;\n    this.is_left = false;\n    this.name = name;\n    this.healthMax = 10;\n    this.health = this.healthMax;\n    this.damage = 1;\n    this.luck = 0.5;\n    this.speed = 100;\n    this.setAnimation(MonsterState.Idle, time);\n  }\n\n  setAnimation(state: MonsterState, time: number) {\n    switch (state) {\n      case MonsterState.Idle:\n        this.state = state;\n        this.tile = this.registry.get(this.name + \"_idle_anim\");\n        this.frame = 0;\n        this.start = time;\n        break;\n      case MonsterState.Run:\n        this.state = state;\n        this.tile = this.registry.get(this.name + \"_run_anim\");\n        this.frame = 0;\n        this.start = time;\n        break;\n    }\n  };\n\n  animate(time: number) {\n    this.frame = Math.floor((time - this.start) / this.speed);\n    if (this.frame >= this.tile.numOfFrames) {\n      if (this.state === MonsterState.Run) {\n        // console.log(\"finish run animation\");\n        this.level.monsters[this.y][this.x] = null;\n        this.level.monsters[this.new_y][this.new_x] = this;\n        this.x = this.new_x;\n        this.y = this.new_y;\n      }\n\n      this.setAnimation(MonsterState.Idle, time);\n\n      // search hero near\n      const max_distance = 3;\n      const scan_x_min = Math.max(0, this.x - max_distance);\n      const scan_y_min = Math.max(0, this.y - max_distance);\n      const scan_x_max = Math.min(this.level.w, this.x + max_distance);\n      const scan_y_max = Math.min(this.level.h, this.y + max_distance);\n\n      const is_hero_near = !this.level.hero.dead\n        && this.level.hero.x >= scan_x_min && this.level.hero.x <= scan_x_max\n        && this.level.hero.y >= scan_y_min && this.level.hero.y <= scan_y_max;\n\n      // console.log(\"hero is near\", scan_x_min, scan_x_max, scan_y_min, scan_y_max);\n\n      if (is_hero_near) {\n        const dist_x = Math.abs(this.x - this.level.hero.x);\n        const dist_y = Math.abs(this.y - this.level.hero.y);\n\n        if (dist_x > 1) {\n          const move_x = Math.max(-1, Math.min(1, this.level.hero.x - this.x));\n          if (this.move(move_x, 0, time)) {\n            console.log(\"move to hero x\");\n            return;\n          }\n        }\n        if (dist_y > 0) {\n          const move_y = Math.max(-1, Math.min(1, this.level.hero.y - this.y));\n          if (this.move(0, move_y, time)) {\n            console.log(\"move to hero y\");\n            return;\n          }\n        }\n\n        if (dist_x <= 1 && dist_y <= 1 && this.rng.nextFloat() < this.luck) {\n          this.level.hero.hitDamage(this.damage, this.name, time);\n          return;\n        }\n      }\n\n      // random move ?\n      const random_move_percent = 0.1;\n      if (this.rng.nextFloat() < random_move_percent) {\n        const move_x = this.rng.nextRange(-1, 1);\n        const move_y = this.rng.nextRange(-1, 1);\n        // console.log(\"random move\", move_x, move_y);\n        if (this.move(move_x, move_y, time)) {\n          return;\n        }\n      }\n    }\n  };\n\n  move(d_x: number, d_y: number, time: number) {\n    this.is_left = d_x < 0;\n    if (this.state === MonsterState.Idle) {\n      const new_x = this.x + d_x;\n      const new_y = this.y + d_y;\n\n      // check is floor exists\n      if (!this.level.floor[new_y][new_x]) return false;\n\n      // check is no monster\n      if (this.level.monsters[new_y][new_x]) return false;\n\n      // start move animation\n      this.level.monsters[new_y][new_x] = new MovingMonsterWrapper(this); // mark as used\n      this.new_x = new_x;\n      this.new_y = new_y;\n      this.setAnimation(MonsterState.Run, time);\n      return true;\n    }\n    return false;\n  };\n\n  hitDamage(damage: number, name: string, time: number) {\n    this.level.log.push(`${this.name} damaged ${damage} by ${name}`);\n    this.health = Math.max(0, this.health - damage);\n    if (this.health <= 0) {\n      this.level.log.push(`${this.name} killed by ${name}`);\n      this.level.monsters[this.y][this.x] = null;\n      this.level.monsters[this.new_y][this.new_x] = null;\n      this.level.monsterList = this.level.monsterList.filter(s => s !== this);\n      if (this.rng.nextFloat() < this.luck) {\n        this.level.randomDrop(this.x, this.y);\n      }\n    }\n  };\n}"]}