{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/app.ts","src/boss.monster.ts","src/create.hero.ts","src/drop.ts","src/dungeon.ts","src/hero.ts","src/input.ts","src/inventory.ts","src/keybind.scene.ts","src/level.ts","src/monster.ts","src/render.ts","src/rng.ts","src/scene.ts","src/tilemap.ts","src/tiny.monster.ts"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","input_1","tilemap_1","scene_1","rng_1","render_1","keybind_scene_1","registry","TileRegistry","load","render","Render","rng","RNG","joystick","Joystick","controller","SceneController","setScene","KeyBindScene","renderFrame","window","requestAnimationFrame","monster_1","mossMonsterNames","BossMonster","[object Object]","level","x","y","name","time","this","new_x","new_y","is_left","healthMax","Math","floor","health","damage","luck","speed","wrapper","MovingMonsterWrapper","setAnimation","MonsterState","Idle","state","tile","get","frame","start","Run","numOfFrames","monsters","max_distance","scan_x_min","max","scan_y_min","scan_x_max","min","w","scan_y_max","h","hero","dead","dist_x","abs","dist_y","move_x","move","console","log","move_y","nextFloat","hitDamage","random_move_percent","nextRange","d_x","d_y","test_x","test_y","m","push","boss","randomDrop","hero_1","drop_1","dungeon_1","SelectHeroScene","selected","handleInput","Date","getTime","c_w","canvas","width","c_h","height","ctx","save","fillStyle","fillRect","renderTitle","renderHeroes","restore","textAlign","textBaseline","font","fillText","total","heroMonsterNames","margin","heroName","d_w","scale","d_h","sw","isAnim","drawImage","tileSet","moveLeft","processed","moveRight","hit","reset","hero_weapon","WeaponConfig","configs","create","HeroMonster","scene","DungeonScene","Coins","coins","addCoins","HealthFlask","inventory","add","item","cell","hill","count","HealthBigFlask","weaponNames","tileName","distance","Weapon","prev","weapon","level_1","create_hero_1","Level","animate","renderLevel","renderHUD","buffer","b_ctx","globalCompositeOperation","renderLight","t_x","t_y","maxTime","delta","l_x","l_y","renderTile","drop","wall","m_y","renderMonster","globalAlpha","radius","diameter","box_x","box_y","grd","createRadialGradient","addColorStop","renderHealth","renderLevelTitle","renderYouDead","renderInventory","h_m","translate","border","toString","max_width","point_w","b_w","h_w","slice","cells","grid_w","inv_w","grid_spacing","g_x","c_x","c_y","cell_size","sx","sy","sh","sf","d_scale","dw","dh","c_offset_x","monster","dx","dy","tile_offset_y","offset_x","offset_y","w_dw","w_dh","w_dy","w_dx","Hit","angle","rotate","PI","inventory_1","baseDamage","Inventory","action","scanDrop","scanHit","restart","d","digit","use","dropWeapon","triggered","exit","moveUp","moveDown","left_x","right_x","min_y","max_y","b_y","scan_x","scan_y","s_x","j","s_y","dist_r","pickedUp","KeyBindState","KeyBind","Await","preventDefault","Pressed","Reset","digit1","digit2","digit3","digit4","digit5","digit6","digit7","digit8","digit9","digit0","init","num","addEventListener","keydown","bind","keyup","InventoryCell","stack","set","maxInStack","same","renderText","bindings","text","tiny_monster_1","boss_monster_1","Rect","b","l","rooms","corridorsV","corridorsH","createBuffer","monsterList","generate","fill","replace","defaultValue","rows","row","rooms_total","monsters_total","drop_total","is_boss","generateRoom","max_room","room","choice","tinyMonsterNames","TinyMonster","hero_x","hero_y","setLevel","resetPosition","retry","room_w","room_h","isOverlap","expand","connected","max_x","min_x_w","rect","expandV","min_y_h","expandH","some","rnd","weight_coins","available","filter","forEach","fillRoom","fillCorridorH","fillCorridorV","r_y","r_x","replaceFloorRandomly","replaceLadder","replaceWallRandomly","replacements","last","ladder_x","ladder_y","wall_mid_top_replaces","wall_mid_bottom_replaces","replacement","id","document","getElementById","getContext","imageSmoothingEnabled","createElement","seed","random","nextInt","end","rangeSize","randomUnder1","array","tileMap","Promise","resolve","img","Image","onload","ev","src","loadTileSet","response","fetch","split","line","match","parseInt","Tile","s"],"mappings":"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","file":"bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","import {Joystick} from \"./input\";\nimport {TileRegistry} from \"./tilemap\";\nimport {SceneController} from \"./scene\";\nimport {RNG} from \"./rng\";\nimport {Render} from \"./render\";\nimport {KeyBindScene} from \"./keybind.scene\";\n\n\n(async function () {\n  const registry = new TileRegistry();\n  await registry.load();\n\n  const render = new Render();\n\n  const rng = new RNG();\n  const joystick = new Joystick();\n  const controller = new SceneController();\n  controller.setScene(new KeyBindScene(rng, joystick, registry, controller));\n\n  function renderFrame() {\n    controller.render(render);\n    window.requestAnimationFrame(renderFrame);\n  }\n  renderFrame();\n})();","import {RNG} from \"./rng\";\nimport {Tile, TileRegistry} from \"./tilemap\";\nimport {Level} from \"./level\";\nimport {Monster, MonsterState, MovingMonsterWrapper} from \"./monster\";\nimport {Weapon} from \"./drop\";\n\nexport const mossMonsterNames = [\n  \"ogre\",\n  \"big_zombie\",\n  \"big_demon\",\n];\n\nexport class BossMonster implements Monster {\n  private readonly rng: RNG;\n  private readonly registry: TileRegistry;\n  private readonly level: Level;\n  x: number;\n  y: number;\n  new_x: number;\n  new_y: number;\n  is_left: boolean;\n  readonly name: string;\n  readonly healthMax: number;\n  health: number;\n  private readonly damage: number;\n  private readonly luck: number;\n  readonly speed: number;\n  state: MonsterState;\n  tile: Tile;\n  frame: number;\n  start: number;\n  weapon: Weapon;\n  private readonly wrapper: MovingMonsterWrapper;\n\n  constructor(rng: RNG, registry: TileRegistry, level: Level, x: number, y: number, name: string, time: number) {\n    this.rng = rng;\n    this.registry = registry;\n    this.level = level;\n    this.x = x;\n    this.y = y;\n    this.new_x = x;\n    this.new_y = y;\n    this.is_left = false;\n    this.name = name;\n    this.healthMax = 50 + Math.floor(level.level * 10);\n    this.health = this.healthMax;\n    this.damage = 7;\n    this.luck = 0.5;\n    this.speed = 100;\n    this.wrapper = new MovingMonsterWrapper(this);\n    this.setAnimation(MonsterState.Idle, time);\n  }\n\n  setAnimation(state: MonsterState, time: number) {\n    switch (state) {\n      case MonsterState.Idle:\n        this.state = state;\n        this.tile = this.registry.get(this.name + \"_idle_anim\");\n        this.frame = 0;\n        this.start = time;\n        break;\n      case MonsterState.Run:\n        this.state = state;\n        this.tile = this.registry.get(this.name + \"_run_anim\");\n        this.frame = 0;\n        this.start = time;\n        break;\n    }\n  };\n\n  animate(time: number) {\n    this.frame = Math.floor((time - this.start) / this.speed);\n    if (this.frame >= this.tile.numOfFrames) {\n      if (this.state === MonsterState.Run) {\n        // console.log(\"finish run animation\");\n        // clear prev\n        this.level.monsters[this.y][this.x] = null;\n        this.level.monsters[this.y][this.x + 1] = null;\n        this.level.monsters[this.y - 1][this.x] = null;\n        this.level.monsters[this.y - 1][this.x + 1] = null;\n\n        // mark new\n        this.level.monsters[this.new_y][this.new_x] = this;\n        this.level.monsters[this.new_y][this.new_x + 1] = this.wrapper;\n        this.level.monsters[this.new_y - 1][this.new_x] = this.wrapper;\n        this.level.monsters[this.new_y - 1][this.new_x + 1] = this.wrapper;\n\n        this.x = this.new_x;\n        this.y = this.new_y;\n      }\n\n      this.setAnimation(MonsterState.Idle, time);\n\n      // search hero near\n      const max_distance = 5;\n      const scan_x_min = Math.max(0, this.x - max_distance);\n      const scan_y_min = Math.max(0, this.y - max_distance);\n      const scan_x_max = Math.min(this.level.w, this.x + max_distance);\n      const scan_y_max = Math.min(this.level.h, this.y + max_distance);\n\n      const is_hero_near = !this.level.hero.dead\n        && this.level.hero.x >= scan_x_min && this.level.hero.x <= scan_x_max\n        && this.level.hero.y >= scan_y_min && this.level.hero.y <= scan_y_max;\n\n      // console.log(\"hero is near\", scan_x_min, scan_x_max, scan_y_min, scan_y_max);\n\n      if (is_hero_near) {\n        const dist_x = Math.abs(this.x - this.level.hero.x);\n        const dist_y = Math.abs(this.y - this.level.hero.y);\n\n        if (dist_x > 1) {\n          const move_x = Math.max(-1, Math.min(1, this.level.hero.x - this.x));\n          if (this.move(move_x, 0, time)) {\n            console.log(\"move to hero x\");\n            return;\n          }\n        }\n        if (dist_y > 0) {\n          const move_y = Math.max(-1, Math.min(1, this.level.hero.y - this.y));\n          if (this.move(0, move_y, time)) {\n            console.log(\"move to hero y\");\n            return;\n          }\n        }\n\n        if (dist_x <= 1 && dist_y <= 1 && this.rng.nextFloat() < this.luck) {\n          this.level.hero.hitDamage(this.damage, this.name, time);\n          return;\n        }\n      }\n\n      // random move ?\n      const random_move_percent = 0.5;\n      if (this.rng.nextFloat() < random_move_percent) {\n        const move_x = this.rng.nextRange(-1, 2);\n        const move_y = this.rng.nextRange(-1, 2);\n        console.log(\"random move\", move_x, move_y);\n        if (this.move(move_x, move_y, time)) {\n          return;\n        }\n      }\n    }\n  };\n\n  move(d_x: number, d_y: number, time: number) {\n    this.is_left = d_x < 0;\n    if (this.state === MonsterState.Idle) {\n      // monster use space [x..x+1; y..y-1]\n\n      const new_x = this.x + d_x;\n      const new_y = this.y + d_y;\n\n      for (let test_x = new_x; test_x <= new_x + 1; test_x++) {\n        for (let test_y = new_y - 1; test_y <= new_y; test_y++) {\n          // check is floor exists\n          if (!this.level.floor[test_y][test_x]) {\n            return false;\n          }\n          // check is no monster\n          const m = this.level.monsters[test_y][test_x];\n          if (m && m !== this && m !== this.wrapper) {\n            return false;\n          }\n        }\n      }\n\n      // start move animation\n      // mark as used\n      this.level.monsters[new_y][new_x] = this.wrapper;\n      this.level.monsters[new_y][new_x + 1] = this.wrapper;\n      this.level.monsters[new_y - 1][new_x] = this.wrapper;\n      this.level.monsters[new_y - 1][new_x + 1] = this.wrapper;\n      // reuse current level, because prev mark can override it\n      this.level.monsters[this.y][this.x] = this;\n      this.new_x = new_x;\n      this.new_y = new_y;\n      this.setAnimation(MonsterState.Run, time);\n      return true;\n    }\n    return false;\n  };\n\n  hitDamage(damage: number, name: string, time: number) {\n    this.level.log.push(`${this.name} damaged ${damage} by ${name}`);\n    this.health = Math.max(0, this.health - damage);\n    if (this.health <= 0) {\n      this.level.log.push(`${this.name} killed by ${name}`);\n\n      this.level.monsters[this.y][this.x] = null;\n      this.level.monsters[this.y][this.x + 1] = null;\n      this.level.monsters[this.y - 1][this.x] = null;\n      this.level.monsters[this.y - 1][this.x + 1] = null;\n\n\n      this.level.monsters[this.new_y][this.new_x] = null;\n      this.level.monsters[this.new_y][this.new_x + 1] = null;\n      this.level.monsters[this.new_y - 1][this.new_x] = null;\n      this.level.monsters[this.new_y - 1][this.new_x + 1] = null;\n\n      this.level.boss = null;\n      if (this.rng.nextFloat() < this.luck) {\n        this.level.randomDrop(this.x, this.y);\n      }\n    }\n  };\n}","import {Scene, SceneController} from \"./scene\";\nimport {Render} from \"./render\";\nimport {RNG} from \"./rng\";\nimport {Joystick} from \"./input\";\nimport {TileRegistry} from \"./tilemap\";\nimport {HeroMonster, heroMonsterNames} from \"./hero\";\nimport {WeaponConfig} from \"./drop\";\nimport {DungeonScene} from \"./dungeon\";\n\nexport class SelectHeroScene implements Scene {\n  private readonly rng: RNG;\n  private readonly joystick: Joystick;\n  private readonly registry: TileRegistry;\n  private readonly controller: SceneController;\n\n  private selected = 0;\n\n  constructor(rng: RNG, joystick: Joystick, registry: TileRegistry, controller: SceneController) {\n    this.rng = rng;\n    this.joystick = joystick;\n    this.registry = registry;\n    this.controller = controller;\n  }\n\n  render(render: Render): void {\n    this.handleInput();\n\n    const time = new Date().getTime();\n    const c_w = render.canvas.width;\n    const c_h = render.canvas.height;\n\n    render.ctx.save();\n    render.ctx.fillStyle = \"rgb(34,34,34)\";\n    render.ctx.fillRect(0, 0, c_w, c_h);\n\n    this.renderTitle(render);\n    this.renderHeroes(render, time);\n\n    render.ctx.restore();\n  }\n\n  renderTitle(render: Render) {\n    render.ctx.textAlign = \"center\";\n    render.ctx.textBaseline = \"top\";\n    render.ctx.font = \"100px silkscreennormal\";\n    render.ctx.fillStyle = \"rgb(255,255,255)\";\n    render.ctx.fillText(\"ROGUELIKE DUNGEON\", render.canvas.width >> 1, 100);\n  }\n\n  renderHeroes(render: Render, time: number) {\n    const c_w = render.canvas.width;\n    const c_h = render.canvas.height;\n\n    const total = heroMonsterNames.length;\n    const width = Math.floor(c_w / total);\n    const margin = Math.floor(width / 10);\n\n    for (let i = 0; i < total; i++) {\n      const heroName = heroMonsterNames[i];\n      const tile = this.registry.get(heroName + \"_idle_anim\");\n\n      const d_x = width * i + margin;\n      const d_y = (c_h >> 1) - (width >> 1);\n\n      const d_w = width - (margin << 1);\n      const scale = Math.floor(d_w / tile.w);\n      const d_h = Math.floor(tile.h * scale);\n\n      let sw = 0;\n      if (tile.isAnim && tile.numOfFrames > 1) {\n        const sf = Math.floor(time / 100) % tile.numOfFrames;\n        sw = sf * tile.w;\n      }\n      if (this.selected === i) {\n        render.ctx.fillStyle = \"rgb(90, 90, 90)\";\n      } else {\n        render.ctx.fillStyle = \"rgb(50, 50, 50)\";\n      }\n\n      render.ctx.fillRect(d_x - (margin >> 1), d_y + margin, d_w + margin, d_h);\n\n      render.ctx.drawImage(tile.tileSet, tile.x + sw, tile.y, tile.w, tile.h, d_x, d_y, d_w, d_h);\n\n      if (this.selected === i) {\n        render.ctx.textAlign = \"center\";\n        render.ctx.textBaseline = \"top\";\n        render.ctx.font = \"20px silkscreennormal\";\n        render.ctx.fillStyle = \"rgb(255,255,255)\";\n        render.ctx.fillText(heroName, d_x + (d_w >> 1), d_y - 20, d_w);\n      }\n    }\n  }\n\n  handleInput() {\n    if (!this.joystick.moveLeft.processed) {\n      this.joystick.moveLeft.processed = true;\n      if (this.selected === 0) this.selected = heroMonsterNames.length - 1;\n      else this.selected--;\n    }\n    if (!this.joystick.moveRight.processed) {\n      this.joystick.moveRight.processed = true;\n      this.selected = (this.selected + 1) % heroMonsterNames.length;\n    }\n    if (!this.joystick.hit.processed) {\n      this.joystick.hit.reset();\n      const name = heroMonsterNames[this.selected];\n      const hero_weapon = WeaponConfig.configs[0].create(this.registry);\n      const hero = new HeroMonster(this.registry, this.joystick, 0, 0, name, hero_weapon, 0);\n      const scene = new DungeonScene(this.rng, this.joystick, this.registry, this.controller, hero);\n      this.controller.setScene(scene);\n    }\n  }\n}","import {RNG} from \"./rng\";\nimport {HeroMonster} from \"./hero\";\nimport {Tile, TileRegistry} from \"./tilemap\";\nimport {InventoryCell} from \"./inventory\";\n\nexport interface Drop {\n  readonly tile: Tile\n  pickedUp(hero: HeroMonster): boolean;\n}\n\nexport interface UsableDrop extends Drop {\n  same(item: UsableDrop): boolean;\n  use(cell: InventoryCell, hero: HeroMonster): void;\n}\n\nexport class Coins implements Drop {\n  readonly tile: Tile;\n  private readonly coins: number;\n\n  constructor(rng: RNG, registry: TileRegistry) {\n    this.tile = registry.get(\"coin_anim\");\n    this.coins = rng.nextRange(1, 30)\n  }\n\n  pickedUp(hero: HeroMonster): boolean {\n    hero.addCoins(this.coins);\n    return true;\n  };\n}\n\nexport class HealthFlask implements UsableDrop {\n  readonly tile: Tile;\n  private readonly health: number;\n\n  constructor(registry: TileRegistry) {\n    this.tile = registry.get(\"flask_red\");\n    this.health = 2;\n  }\n\n  pickedUp(hero: HeroMonster): boolean {\n    return hero.inventory.add(this);\n\n  };\n\n  same(item: UsableDrop): boolean {\n    return item instanceof HealthFlask;\n  };\n\n  use(cell: InventoryCell, hero: HeroMonster) {\n    hero.hill(this.health);\n    cell.count--;\n    if (cell.count <= 0) {\n      cell.item = null;\n      cell.count = 0;\n    }\n  };\n}\n\nexport class HealthBigFlask implements UsableDrop {\n  readonly tile: Tile;\n  private readonly health: number;\n\n  constructor(registry: TileRegistry) {\n    this.tile = registry.get(\"flask_big_red\");\n    this.health = 5;\n  }\n\n  pickedUp(hero: HeroMonster): boolean {\n    return hero.inventory.add(this);\n  };\n\n  same(item: UsableDrop): boolean {\n    return item instanceof HealthBigFlask;\n  };\n\n  use(cell: InventoryCell, hero: HeroMonster) {\n    hero.hill(this.health);\n    cell.count--;\n    if (cell.count <= 0) {\n      cell.item = null;\n      cell.count = 0;\n    }\n  };\n}\n\nexport const weaponNames = [\n  \"weapon_knife\",\n  \"weapon_rusty_sword\",\n  \"weapon_regular_sword\",\n  \"weapon_red_gem_sword\",\n  \"weapon_big_hammer\",\n  \"weapon_hammer\",\n  \"weapon_baton_with_spikes\",\n  \"weapon_mace\",\n  \"weapon_katana\",\n  \"weapon_saw_sword\",\n  \"weapon_anime_sword\",\n  \"weapon_axe\",\n  \"weapon_machete\",\n  \"weapon_cleaver\",\n  \"weapon_duel_sword\",\n  \"weapon_knight_sword\",\n  \"weapon_golden_sword\",\n  \"weapon_lavish_sword\",\n  \"weapon_red_magic_staff\",\n  \"weapon_green_magic_staff\",\n];\n\nexport class WeaponConfig {\n  readonly tileName: string;\n  readonly speed: number;\n  readonly distance: number;\n  readonly damage: number;\n  readonly level: number;\n\n  constructor(tileName: string, speed: number, distance: number, damage: number, level: number) {\n    this.tileName = tileName;\n    this.speed = speed;\n    this.distance = distance;\n    this.damage = damage;\n    this.level = level;\n  }\n\n  create(registry: TileRegistry): Weapon {\n    return new Weapon(registry.get(this.tileName), this.speed, this.distance, this.damage);\n  }\n\n  static configs: WeaponConfig[] = [\n    new WeaponConfig(\"weapon_knife\", 100, 1, 3, 1),\n    new WeaponConfig(\"weapon_rusty_sword\", 100, 1, 4, 1),\n    new WeaponConfig(\"weapon_regular_sword\", 100, 1, 5, 3),\n    new WeaponConfig(\"weapon_red_gem_sword\", 100, 1, 6, 3),\n\n    new WeaponConfig(\"weapon_big_hammer\", 300, 2, 10, 5),\n    new WeaponConfig(\"weapon_hammer\", 200, 1, 7, 5),\n    new WeaponConfig(\"weapon_baton_with_spikes\", 200, 1, 7, 5),\n    new WeaponConfig(\"weapon_mace\", 200, 1, 7, 5),\n\n    new WeaponConfig(\"weapon_katana\", 100, 1, 8, 7),\n    new WeaponConfig(\"weapon_saw_sword\", 200, 1, 9, 7),\n    new WeaponConfig(\"weapon_anime_sword\", 200, 1, 12, 7),\n    new WeaponConfig(\"weapon_axe\", 200, 1, 12, 7),\n\n    new WeaponConfig(\"weapon_machete\", 100, 1, 11, 9),\n    new WeaponConfig(\"weapon_cleaver\", 100, 1, 12, 9),\n    new WeaponConfig(\"weapon_duel_sword\", 100, 1, 13, 9),\n    new WeaponConfig(\"weapon_knight_sword\", 100, 1, 14, 9),\n\n    new WeaponConfig(\"weapon_golden_sword\", 100, 1, 15, 11),\n    new WeaponConfig(\"weapon_lavish_sword\", 100, 1, 16, 11),\n  ];\n}\n\nexport class Weapon implements UsableDrop {\n  readonly tile: Tile;\n  frame: number;\n  readonly numOfFrames: number;\n  readonly speed: number;\n  readonly distance: number;\n  readonly damage: number;\n\n  constructor(tile: Tile, speed: number, distance: number, damage: number) {\n    this.tile = tile;\n    this.frame = 0;\n    this.numOfFrames = 4;\n    this.speed = speed;\n    this.distance = distance;\n    this.damage = damage;\n  }\n\n  pickedUp(hero: HeroMonster): boolean {\n    return hero.inventory.add(this);\n  }\n\n  same(item: UsableDrop): boolean {\n    return false;\n  }\n\n  use(cell: InventoryCell, hero: HeroMonster): void {\n    const prev = hero.weapon;\n    hero.weapon = this;\n    if (prev) {\n      cell.item = prev;\n      cell.count = 1;\n    } else {\n      cell.item = null;\n      cell.count = 0;\n    }\n  }\n}","import {Joystick} from \"./input\";\nimport {Tile, TileRegistry} from \"./tilemap\";\nimport {HeroMonster} from \"./hero\";\nimport {Level} from \"./level\";\nimport {RNG} from \"./rng\";\nimport {Monster, MonsterState, MovingMonsterWrapper} from \"./monster\";\nimport {Render} from \"./render\";\nimport {Scene, SceneController} from \"./scene\";\nimport {SelectHeroScene} from \"./create.hero\";\n\nconst scale = 2;\n\nexport class DungeonScene implements Scene {\n  private readonly rng: RNG;\n  private readonly joystick: Joystick;\n  private readonly registry: TileRegistry;\n  private readonly controller: SceneController;\n\n  private level: Level;\n\n  constructor(rng: RNG, joystick: Joystick, registry: TileRegistry, controller: SceneController, hero: HeroMonster) {\n    this.rng = rng;\n    this.joystick = joystick;\n    this.registry = registry;\n    this.controller = controller;\n    const start = new Date().getTime();\n    this.level = new Level(rng, registry, this, hero, 1, start);\n  }\n\n  setLevel(level: Level) {\n    this.level = level;\n  }\n\n  restart() {\n    this.controller.setScene(new SelectHeroScene(this.rng, this.joystick, this.registry, this.controller));\n  }\n\n  render(render: Render) {\n    const time = new Date().getTime();\n    this.level.animate(time);\n    this.renderLevel(render, time);\n    this.renderHUD(render, time);\n  }\n\n  renderLevel(render: Render, time: number) {\n    const c_w = render.canvas.width;\n    const c_h = render.canvas.height;\n    render.buffer.width = c_w;\n    render.buffer.height = c_h;\n\n    render.ctx.save();\n    render.ctx.fillStyle = \"rgb(34,34,34)\";\n    render.ctx.fillRect(0, 0, c_w, c_h);\n\n    render.b_ctx.save();\n    render.b_ctx.fillStyle = \"black\";\n    render.b_ctx.fillRect(0, 0, c_w, c_h);\n    render.b_ctx.globalCompositeOperation = \"lighter\";\n\n    // render hero light\n    this.renderLight(render, c_w >> 1, c_h >> 1, 16 * scale * 6);\n\n    let t_x = this.level.hero.x * 16 * scale + 8 - c_w / 2;\n    let t_y = this.level.hero.y * 16 * scale + 8 - c_h / 2;\n\n    // translate level to hero position\n    if (this.level.hero.state === MonsterState.Run) {\n      const start = this.level.hero.start;\n      const speed = this.level.hero.speed;\n      const numOfFrames = this.level.hero.tile.numOfFrames;\n      const maxTime = speed * numOfFrames;\n      const delta = Math.min(maxTime, time - start) / maxTime;\n\n      const t_offset_x = scale * 16 * (this.level.hero.new_x - this.level.hero.x) * delta;\n      const t_offset_y = scale * 16 * (this.level.hero.new_y - this.level.hero.y) * delta;\n\n      t_x = t_x + t_offset_x;\n      t_y = t_y + t_offset_y;\n    }\n\n    // render floor, drop\n    for (let l_x = 0; l_x < this.level.w; l_x++) {\n      for (let l_y = 0; l_y < this.level.h; l_y++) {\n        const d_x = -t_x + l_x * 16 * scale;\n        const d_y = -t_y + l_y * 16 * scale;\n        this.renderTile(render, this.level.floor[l_y][l_x], d_x, d_y, time);\n        if (this.level.drop[l_y][l_x]) {\n          this.renderTile(render, this.level.drop[l_y][l_x].tile, d_x, d_y, time);\n        }\n      }\n    }\n    // render wall, monsters\n    for (let l_y = 0; l_y < this.level.h; l_y++) {\n      for (let l_x = 0; l_x < this.level.w; l_x++) {\n        const d_x = -t_x + l_x * 16 * scale;\n        const d_y = -t_y + l_y * 16 * scale;\n        const tile = this.level.wall[l_y][l_x];\n        if (tile) {\n          this.renderTile(render, tile, d_x, d_y, time);\n          if (tile.name === \"wall_fountain_mid_red_anim\" || tile.name === \"wall_fountain_mid_blue_anim\") {\n            this.renderLight(render, d_x + 8 * scale, d_y + 8 * scale, 16 * scale * 4);\n          }\n        }\n      }\n      if (l_y < this.level.h - 1) {\n        for (let l_x = 0; l_x < this.level.w; l_x++) {\n          const m_y = l_y + 1;\n          const d_x = -t_x + l_x * 16 * scale;\n          const d_y = -t_y + m_y * 16 * scale;\n          this.renderMonster(render, this.level.monsters[m_y][l_x], d_x, d_y, time);\n        }\n      }\n    }\n\n    render.ctx.restore();\n\n    render.ctx.save();\n    render.ctx.globalAlpha = 0.8;\n    render.ctx.globalCompositeOperation = \"multiply\";\n    render.ctx.drawImage(render.buffer, 0, 0);\n    render.ctx.restore();\n  }\n\n  renderLight(render: Render, x: number, y: number, radius: number) {\n    const diameter = radius << 1;\n    const box_x = x - radius;\n    const box_y = y - radius;\n\n    const grd = render.b_ctx.createRadialGradient(x, y, 16, x, y, radius);\n    grd.addColorStop(0.5, \"rgb(255,255,255)\");\n    grd.addColorStop(1, \"transparent\");\n    render.b_ctx.fillStyle = grd;\n    render.b_ctx.fillRect(box_x, box_y, diameter, diameter);\n  }\n\n  renderHUD(render: Render, time: number) {\n    this.renderHealth(render, time);\n    this.renderLevelTitle(render, time);\n    this.renderYouDead(render, time);\n    this.renderInventory(render, time);\n  }\n\n  renderHealth(render: Render, time: number) {\n    const border = 4;\n    const height = 20;\n    const point_w = 10;\n    const h_m = this.level.hero.healthMax;\n    const h = this.level.hero.health;\n\n    // render HUD - hero health\n    render.ctx.save();\n    render.ctx.translate(40, 40);\n\n    // background\n    render.ctx.fillStyle = \"rgb(0,0,0)\";\n    render.ctx.fillRect(0, 0, border * 2 + point_w * h_m, border * 2 + height);\n\n    // health red line\n    render.ctx.fillStyle = \"rgb(255,0,0)\";\n    render.ctx.fillRect(border, border, point_w * h, height);\n\n    // health points text\n    render.ctx.fillStyle = \"rgb(255,255,255)\";\n    render.ctx.font = \"20px silkscreennormal\";\n    render.ctx.fillText(h.toString(), border * 2, border + 16);\n\n    // coins text\n    render.ctx.fillText(`$${this.level.hero.coins}`, 0, 50);\n\n    render.ctx.restore();\n  }\n\n  renderLevelTitle(render: Render, time: number) {\n    const c_w = render.canvas.width;\n    const c_h = render.canvas.height;\n\n    // render HUD - level\n    render.ctx.save();\n    render.ctx.translate(c_w / 2, 60);\n    render.ctx.fillStyle = \"rgb(255,255,255)\";\n    render.ctx.textAlign = \"center\";\n    render.ctx.font = \"20px silkscreennormal\";\n    render.ctx.fillText(`level ${this.level.level}`, 0, 0);\n    render.ctx.restore();\n\n    // render HUD - boss health\n    if (this.level.boss) {\n      render.ctx.save();\n      render.ctx.translate(c_w / 2, 100);\n\n      const border = 4;\n      const height = 20;\n      const max_width = 500;\n\n      const h_m = this.level.boss.healthMax;\n      const h = this.level.boss.health;\n\n      const point_w = Math.min(10, Math.floor(max_width / h_m));\n\n      // background\n      const b_w = border * 2 + point_w * h_m;\n      render.ctx.fillStyle = \"rgb(0,0,0)\";\n      render.ctx.fillRect(-(b_w >> 1), 0, b_w, border * 2 + height);\n\n      // health red line\n      const h_w = point_w * h;\n      render.ctx.fillStyle = \"rgb(255,0,0)\";\n      render.ctx.fillRect(border - ((point_w * h_m) >> 1), border, h_w, height);\n\n      // health points text\n      render.ctx.fillStyle = \"rgb(255,255,255)\";\n      render.ctx.font = \"20px silkscreennormal\";\n      render.ctx.fillText(`${this.level.boss.name} - ${h}`, border * 2 - ((point_w * h_m) >> 1), border + 16);\n      render.ctx.restore();\n    }\n\n    // render HUD - log info\n    this.level.log = this.level.log.slice(-5);\n    render.ctx.save();\n    render.ctx.translate(40, c_h - 100);\n    for (let i = 0; i < this.level.log.length; i++) {\n      render.ctx.fillStyle = \"rgb(255,255,255)\";\n      render.ctx.font = \"20px silkscreennormal\";\n      render.ctx.fillText(this.level.log[i], 0, i * 20);\n    }\n    render.ctx.restore();\n  }\n\n  renderYouDead(render: Render, time: number) {\n    const c_w = render.canvas.width;\n    const c_h = render.canvas.height;\n\n    if (this.level.hero.dead) {\n      render.ctx.save();\n\n      render.ctx.fillStyle = \"rgba(0, 0, 0, 0.7)\";\n      render.ctx.fillRect(0, 0, c_w, c_h);\n\n      render.ctx.translate(c_w / 2, c_h / 2);\n\n      render.ctx.fillStyle = \"rgb(255,0,0)\";\n      render.ctx.textAlign = \"center\";\n      render.ctx.font = \"200px silkscreennormal\";\n      render.ctx.fillText(\"YOU DIED\", 0, 0);\n\n      render.ctx.fillStyle = \"rgb(255,255,255)\";\n      render.ctx.textAlign = \"center\";\n      render.ctx.font = \"40px silkscreennormal\";\n      render.ctx.fillText(\"PRESS F TO RESTART\", 0, 200);\n\n      render.ctx.restore();\n    }\n  }\n\n  renderInventory(render: Render, time: number) {\n    const c_w = render.canvas.width;\n    const c_h = render.canvas.height;\n\n    const cells = this.level.hero.inventory.cells;\n    const cell_size = 16;\n    const grid_w = cells.length;\n    const grid_spacing = 2;\n\n    const inv_w = scale * (grid_w * (cell_size + grid_spacing) + grid_spacing);\n    const inv_h = scale * (cell_size + grid_spacing + grid_spacing);\n\n    render.ctx.save();\n    render.ctx.translate((c_w >> 1) - (inv_w >> 1), c_h - inv_h - 40);\n\n    // background\n    render.ctx.fillStyle = \"rgb(100,100,100)\";\n    render.ctx.fillRect(0, 0, inv_w, inv_h);\n\n    render.ctx.translate(grid_spacing * scale, grid_spacing * scale); // grid spacing\n\n    for (let g_x = 0; g_x < grid_w; g_x++) {\n      const c_x = scale * (g_x * (cell_size + grid_spacing));\n      const c_y = 0;\n\n      render.ctx.fillStyle = \"rgb(70,70,70)\";\n      render.ctx.fillRect(c_x, 0, cell_size * scale, cell_size * scale);\n      const cell = cells[g_x];\n      if (cell.item) {\n        const tile = cell.item.tile;\n        let sx = tile.x;\n        const sy = tile.y;\n        const sw = tile.w;\n        const sh = tile.h;\n\n        if (tile.isAnim && tile.numOfFrames > 1) {\n          const sf = Math.floor(time / 100) % tile.numOfFrames;\n          sx = tile.x + sw * sf;\n        }\n\n        const d_scale = sh <= cell_size ? 1 : cell_size / sh;\n        const dw = sw * scale * d_scale;\n        const dh = sh * scale * d_scale;\n        const c_offset_x = ((cell_size * scale) >> 1) - (dw >> 1);\n\n        render.ctx.drawImage(tile.tileSet, sx, sy, sw, sh, c_x + c_offset_x, c_y, dw, dh);\n        render.ctx.textAlign = \"end\";\n        render.ctx.textBaseline = \"top\";\n        render.ctx.font = \"10px silkscreennormal\";\n        render.ctx.fillStyle = \"rgb(255,255,255)\";\n        render.ctx.fillText(cell.count.toString(), c_x + (cell_size * scale), 0, cell_size * scale);\n      }\n    }\n    render.ctx.restore();\n  }\n\n  renderMonster(render: Render, monster: Monster, dx: number, dy: number, time: number) {\n    if (monster && !(monster instanceof MovingMonsterWrapper)) {\n      const sw = monster.tile.w;\n      const sh = monster.tile.h;\n      const sx = monster.tile.x + sw * monster.frame;\n      const sy = monster.tile.y;\n      const dw = sw * scale;\n      const dh = sh * scale;\n\n      const tile_offset_y = dh - 14 * scale;\n\n      let offset_x = 0;\n      let offset_y = 0;\n\n      if (monster.state === MonsterState.Run) {\n        const start = monster.start;\n        const speed = monster.speed;\n        const numOfFrames = monster.tile.numOfFrames;\n        const maxTime = speed * numOfFrames;\n        const delta = Math.min(maxTime, time - start) / maxTime;\n\n        offset_x = scale * 16 * (monster.new_x - monster.x) * delta;\n        offset_y = scale * 16 * (monster.new_y - monster.y) * delta;\n      }\n\n      if (dx + offset_x + dw > 0 && dx + offset_x < render.canvas.width &&\n        dy + offset_y + dh > 0 && dy + offset_y < render.canvas.height) {\n\n\n        render.ctx.save();\n        render.ctx.translate(dx + offset_x, dy + offset_y);\n        if (monster.is_left) {\n          render.ctx.scale(-1, 1);\n          if (monster.weapon) {\n            render.ctx.save();\n            const w = monster.weapon.tile;\n            const w_dw = w.w * scale;\n            const w_dh = w.h * scale;\n\n            const w_dy = w_dh - 14 * scale;\n            const w_dx = 4 * scale;\n\n            render.ctx.translate(-w_dx, -w_dy);\n\n            if (monster.state === MonsterState.Hit) {\n              let angle = 90 * monster.weapon.frame / (monster.weapon.numOfFrames - 1);\n              render.ctx.translate(w_dw >> 1, w_dh); // to bottom center of tile\n              render.ctx.rotate(angle * Math.PI / 180); // 90 degree\n              render.ctx.drawImage(w.tileSet, w.x, w.y, w.w, w.h, -(w_dw >> 1), -w_dh, w_dw, w_dh);\n            } else {\n              render.ctx.drawImage(w.tileSet, w.x, w.y, w.w, w.h, 0, 0, w_dw, w_dh);\n            }\n            render.ctx.restore();\n          }\n          render.ctx.drawImage(monster.tile.tileSet, sx, sy, sw, sh, 0 - dw, -tile_offset_y, dw, dh);\n        } else {\n          if (monster.weapon) {\n            render.ctx.save();\n            const w = monster.weapon.tile;\n            const w_dw = w.w * scale;\n            const w_dh = w.h * scale;\n\n            const w_dy = w_dh - 14 * scale;\n            const w_dx = 12 * scale;\n\n            render.ctx.translate(w_dx, -w_dy);\n\n            if (monster.state === MonsterState.Hit) {\n              let angle = 90 * monster.weapon.frame / (monster.weapon.numOfFrames - 1);\n              render.ctx.translate(w_dw >> 1, w_dh); // to bottom center of tile\n              render.ctx.rotate(angle * Math.PI / 180); // 90 degree\n              render.ctx.drawImage(w.tileSet, w.x, w.y, w.w, w.h, -(w_dw >> 1), -w_dh, w_dw, w_dh);\n            } else {\n              render.ctx.drawImage(w.tileSet, w.x, w.y, w.w, w.h, 0, 0, w_dw, w_dh);\n            }\n            render.ctx.restore();\n          }\n          render.ctx.drawImage(monster.tile.tileSet, sx, sy, sw, sh, 0, -tile_offset_y, dw, dh);\n        }\n        render.ctx.restore();\n      }\n    }\n  }\n\n  renderTile(render: Render, tile: Tile, dx: number, dy: number, time: number) {\n    if (tile) {\n      const sw = tile.w;\n      const sh = tile.h;\n      const dw = sw * scale;\n      const dh = sh * scale;\n      const offset_y = dh - 16 * scale;\n      const offset_x = (16 * scale - dw) >> 1;\n\n      if (dx + dw > 0 && dx < render.ctx.canvas.width &&\n        dy - offset_y + dh > 0 && dy - offset_y < render.ctx.canvas.height) {\n        if (tile.isAnim && tile.numOfFrames > 1) {\n          const sf = Math.floor(time / 100) % tile.numOfFrames;\n          const sx = tile.x + sw * sf;\n          const sy = tile.y;\n          render.ctx.drawImage(tile.tileSet, sx, sy, sw, sh, dx + offset_x, dy - offset_y, dw, dh);\n        } else {\n          const sx = tile.x;\n          const sy = tile.y;\n          render.ctx.drawImage(tile.tileSet, sx, sy, sw, sh, dx + offset_x, dy - offset_y, dw, dh);\n        }\n      }\n    }\n  }\n}","import {Inventory} from \"./inventory\";\nimport {Tile, TileRegistry} from \"./tilemap\";\nimport {Joystick} from \"./input\";\nimport {Monster, MonsterState, MovingMonsterWrapper} from \"./monster\";\nimport {Level} from \"./level\";\nimport {Weapon} from \"./drop\";\n\nexport const heroMonsterNames = [\n  \"elf_f\",\n  \"elf_m\",\n  \"knight_f\",\n  \"knight_m\",\n  \"wizard_f\",\n  \"wizard_m\",\n];\n\nexport class HeroMonster implements Monster {\n  private registry: TileRegistry;\n  private joystick: Joystick;\n  x: number;\n  y: number;\n  new_x: number;\n  new_y: number;\n  is_left: boolean;\n  readonly name: string;\n  readonly healthMax: number;\n  health: number;\n  coins: number;\n  private readonly baseDamage: number;\n  dead: boolean;\n  weapon: Weapon;\n  readonly speed: number;\n  readonly inventory: Inventory;\n  private level: Level;\n  state: MonsterState;\n  tile: Tile;\n  frame: number;\n  start: number;\n\n  constructor(registry: TileRegistry, joystick: Joystick, x: number, y: number, name: string, weapon: Weapon, time: number) {\n    this.registry = registry;\n    this.joystick = joystick;\n    this.x = x;\n    this.y = y;\n    this.new_x = x;\n    this.new_y = y;\n    this.is_left = false;\n    this.name = name;\n    this.healthMax = 30;\n    this.health = this.healthMax;\n    this.coins = 0;\n    this.baseDamage = 1;\n    this.dead = false;\n    this.weapon = weapon;\n    this.speed = 100;\n    this.inventory = new Inventory();\n    this.setAnimation(MonsterState.Idle, time);\n  }\n\n  get damage(): number {\n    return this.baseDamage + (this.weapon ? this.weapon.damage : 0);\n  }\n\n  setLevel(level: Level) {\n    this.level = level;\n  };\n\n  setAnimation(state: MonsterState, time: number) {\n    switch (state) {\n      case MonsterState.Idle:\n        this.state = state;\n        this.tile = this.registry.get(this.name + \"_idle_anim\");\n        this.frame = 0;\n        this.start = time;\n        break;\n      case MonsterState.Run:\n        if (!this.dead) {\n          this.state = state;\n          this.tile = this.registry.get(this.name + \"_run_anim\");\n          this.frame = 0;\n          this.start = time;\n        }\n        break;\n      case MonsterState.Hit:\n        if (!this.dead) {\n          this.state = state;\n          this.tile = this.registry.get(this.name + \"_hit_anim\");\n          this.frame = 0;\n          if (this.weapon) {\n            this.weapon.frame = 0;\n          }\n          this.start = time;\n        }\n        break;\n    }\n  }\n\n  animate(time: number) {\n    switch (this.state) {\n      case MonsterState.Idle:\n        this.frame = Math.floor((time - this.start) / this.speed);\n        if (!this.action(time)) {\n          if (this.frame >= this.tile.numOfFrames) {\n            this.setAnimation(MonsterState.Idle, time);\n          }\n        }\n        break;\n      case MonsterState.Run:\n        this.frame = Math.floor((time - this.start) / this.speed);\n        if (this.frame >= this.tile.numOfFrames) {\n          this.level.monsters[this.y][this.x] = null;\n          this.level.monsters[this.new_y][this.new_x] = this;\n          this.x = this.new_x;\n          this.y = this.new_y;\n          this.scanDrop();\n          if (!this.action(time)) {\n            this.setAnimation(MonsterState.Idle, time);\n          }\n        }\n        break;\n      case MonsterState.Hit:\n        if (this.weapon) {\n          this.weapon.frame = Math.floor((time - this.start) / this.weapon.speed);\n          if (this.weapon.frame >= this.weapon.numOfFrames) {\n            this.scanHit(time);\n            this.scanDrop();\n            if (!this.action(time)) {\n              this.setAnimation(MonsterState.Idle, time);\n            }\n          }\n        } else {\n          this.frame = Math.floor((time - this.start) / this.speed);\n          if (this.frame >= this.tile.numOfFrames) {\n            this.scanHit(time);\n            this.scanDrop();\n            if (!this.action(time)) {\n              this.setAnimation(MonsterState.Idle, time);\n            }\n          }\n        }\n        break;\n    }\n  };\n\n  action(time: number) {\n    if (this.dead) {\n      if (!this.joystick.hit.processed) {\n        this.joystick.hit.reset();\n        this.level.restart();\n      }\n    } else {\n      this.scanDrop();\n      for (let d = 0; d < 10; d++) {\n        const digit = (d + 1) % 10;\n        if (!this.joystick.digit(digit).processed) {\n          this.joystick.digit(digit).processed = true;\n          this.inventory.cells[d].use(this);\n        }\n      }\n      if (!this.joystick.drop.processed) {\n        this.joystick.drop.processed = true;\n        this.dropWeapon();\n      }\n\n      if (this.joystick.hit.triggered || !this.joystick.hit.processed) {\n        this.joystick.hit.processed = true;\n        if (this.level.floor[this.y][this.x].name === \"floor_ladder\") {\n          this.level.exit(time);\n        } else {\n          this.setAnimation(MonsterState.Hit, time);\n        }\n        return true;\n      }\n      if (this.joystick.moveUp.triggered || !this.joystick.moveUp.processed) {\n        this.joystick.moveUp.processed = true;\n        if (this.move(0, -1, time)) {\n          return true;\n        }\n      }\n      if (this.joystick.moveDown.triggered || !this.joystick.moveDown.processed) {\n        this.joystick.moveDown.processed = true;\n        if (this.move(0, 1, time)) {\n          return true;\n        }\n      }\n      if (this.joystick.moveLeft.triggered || !this.joystick.moveLeft.processed) {\n        this.joystick.moveLeft.processed = true;\n        this.is_left = true;\n        if (this.move(-1, 0, time)) {\n          return true;\n        }\n      }\n      if (this.joystick.moveRight.triggered || !this.joystick.moveRight.processed) {\n        this.joystick.moveRight.processed = true;\n        this.is_left = false;\n        if (this.move(1, 0, time)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  };\n\n  dropWeapon() {\n    if (this.weapon) {\n      const max_distance = 5;\n      let left_x = this.x;\n      let right_x = this.x;\n      let min_y = this.y;\n      let max_y = this.y;\n      // find free floor cell;\n\n      // scan from center by x\n      for (let dist_x = 0; dist_x < max_distance; dist_x++) {\n        left_x--;\n        right_x++;\n        min_y--;\n        max_y++;\n\n        // scan from center by y\n        let t_y = this.y;\n        let b_y = this.y;\n        for (let dist_y = 0; dist_y <= dist_x; dist_y++) {\n          let scan_x = this.is_left ? [left_x, right_x] : [right_x, left_x];\n          let scan_y = [t_y, b_y];\n\n          for (let i = 0; i < 2; i++) {\n            let s_x = scan_x[i];\n            for (let j = 0; j < 2; j++) {\n              let s_y = scan_y[j];\n              if (s_x >= 0 && s_y >= 0) {\n                if (!this.level.drop[s_y][s_x] && this.level.floor[s_y][s_x]) {\n                  const drop = this.weapon;\n                  this.weapon = null;\n                  this.level.drop[s_y][s_x] = drop;\n                  return;\n                }\n              }\n            }\n          }\n\n          t_y--;\n          b_y++;\n        }\n\n        // after reach max y, scan to center by x\n        for (let dist_r = 0; dist_r < dist_x; dist_x++) {\n          left_x++;\n          right_x--;\n\n          let scan_x = this.is_left ? [left_x, right_x] : [right_x, left_x];\n          let scan_y = [t_y, b_y];\n\n          for (let i = 0; i < 2; i++) {\n            let s_x = scan_x[i];\n            for (let j = 0; j < 2; j++) {\n              let s_y = scan_y[j];\n              if (s_x >= 0 && s_y >= 0) {\n                if (!this.level.drop[s_y][s_x] && this.level.floor[s_y][s_x]) {\n                  const drop = this.weapon;\n                  this.weapon = null;\n                  this.level.drop[s_y][s_x] = drop;\n                  return;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  scanDrop() {\n    if (this.level.drop[this.y][this.x]) {\n      const drop = this.level.drop[this.y][this.x];\n      if (drop.pickedUp(this)) {\n        this.level.drop[this.y][this.x] = null;\n      }\n    }\n  };\n\n  scanHit(time: number) {\n    const max_distance = this.weapon ? this.weapon.distance : 1;\n    // search only left or right path\n    const scan_x_min = this.is_left ? Math.max(0, this.x - max_distance) : this.x;\n    const scan_x_max = this.is_left ? this.x : Math.min(this.level.w, this.x + max_distance);\n\n    const scan_y_min = Math.max(0, this.y - max_distance);\n    const scan_y_max = Math.min(this.level.h, this.y + max_distance);\n\n    for (let s_y = scan_y_min; s_y <= scan_y_max; s_y++) {\n      for (let s_x = scan_x_min; s_x <= scan_x_max; s_x++) {\n        // not self\n        if (!(s_x === this.x && s_y === this.y)) {\n          const monster = this.level.monsters[s_y][s_x];\n          if (monster) {\n            monster.hitDamage(this.damage, this.name, time);\n          }\n        }\n      }\n    }\n  };\n\n  move(d_x: number, d_y: number, time: number) {\n    if (!this.dead && this.state === MonsterState.Idle) {\n      const new_x = this.x + d_x;\n      const new_y = this.y + d_y;\n\n      // check is floor exists\n      if (!this.level.floor[new_y][new_x]) return false;\n\n      // check is no monster\n      if (this.level.monsters[new_y][new_x]) return false;\n\n      // start move animation\n      this.level.monsters[new_y][new_x] = new MovingMonsterWrapper(this); // mark as used\n      this.new_x = new_x;\n      this.new_y = new_y;\n      this.setAnimation(MonsterState.Run, time);\n      return true;\n    }\n    return false;\n  };\n\n  resetPosition(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n    this.new_x = x;\n    this.new_y = y;\n  };\n\n  hitDamage(damage: number, name: string, time: number) {\n    if (!this.dead) {\n      this.level.log.push(`${this.name} damaged ${damage} by ${name}`);\n      this.health = Math.max(0, this.health - damage);\n      if (this.health <= 0) {\n        this.level.log.push(`${this.name} killed by ${name}`);\n        this.setAnimation(MonsterState.Idle, time);\n        this.dead = true;\n      }\n    }\n  };\n\n  hill(health: number) {\n    this.health = Math.min(this.healthMax, this.health + health);\n  };\n\n  addCoins(coins: number) {\n    this.coins = this.coins + coins;\n  };\n}","enum KeyBindState {Await = 1, Pressed = 2, Reset = 3}\n\nexport class KeyBind {\n  private readonly code: string;\n  private state: KeyBindState;\n  triggered: boolean;\n  processed: boolean;\n\n  constructor(code: string) {\n    this.code = code;\n    this.state = KeyBindState.Await;\n    this.triggered = false;\n    this.processed = true;\n  }\n\n  keydown(e: KeyboardEvent) {\n    if (e.code === this.code) {\n      e.preventDefault();\n      if (this.state === KeyBindState.Await) {\n        this.triggered = true;\n        this.processed = false;\n        this.state = KeyBindState.Pressed;\n      }\n    }\n  }\n\n  keyup(e: KeyboardEvent) {\n    if (e.code === this.code) {\n      e.preventDefault();\n      if (this.state === KeyBindState.Pressed || this.state === KeyBindState.Reset) {\n        this.triggered = false;\n        this.state = KeyBindState.Await;\n      }\n    }\n  }\n\n  reset() {\n    this.state = KeyBindState.Reset;\n    this.triggered = false;\n    this.processed = true;\n  }\n}\n\nexport class Joystick {\n  readonly moveUp: KeyBind;\n  readonly moveLeft: KeyBind;\n  readonly moveDown: KeyBind;\n  readonly moveRight: KeyBind;\n  readonly hit: KeyBind;\n  readonly drop: KeyBind;\n  readonly digit1: KeyBind;\n  readonly digit2: KeyBind;\n  readonly digit3: KeyBind;\n  readonly digit4: KeyBind;\n  readonly digit5: KeyBind;\n  readonly digit6: KeyBind;\n  readonly digit7: KeyBind;\n  readonly digit8: KeyBind;\n  readonly digit9: KeyBind;\n  readonly digit0: KeyBind;\n\n  constructor() {\n    this.moveUp = new KeyBind('KeyW');\n    this.moveLeft = new KeyBind('KeyA');\n    this.moveDown = new KeyBind('KeyS');\n    this.moveRight = new KeyBind('KeyD');\n    this.hit = new KeyBind('KeyF');\n    this.drop = new KeyBind('KeyQ');\n\n    this.digit1 = new KeyBind('Digit1');\n    this.digit2 = new KeyBind('Digit2');\n    this.digit3 = new KeyBind('Digit3');\n    this.digit4 = new KeyBind('Digit4');\n    this.digit5 = new KeyBind('Digit5');\n    this.digit6 = new KeyBind('Digit6');\n    this.digit7 = new KeyBind('Digit7');\n    this.digit8 = new KeyBind('Digit8');\n    this.digit9 = new KeyBind('Digit9');\n    this.digit0 = new KeyBind('Digit0');\n    this.init();\n  }\n\n  digit(num: number): KeyBind {\n    switch (num) {\n      case 1:\n        return this.digit1;\n      case 2:\n        return this.digit2;\n      case 3:\n        return this.digit3;\n      case 4:\n        return this.digit4;\n      case 5:\n        return this.digit5;\n      case 6:\n        return this.digit6;\n      case 7:\n        return this.digit7;\n      case 8:\n        return this.digit8;\n      case 9:\n        return this.digit9;\n      case 0:\n        return this.digit0;\n    }\n  }\n\n  init() {\n    window.addEventListener(\"keydown\", this.keydown.bind(this));\n    window.addEventListener(\"keyup\", this.keyup.bind(this));\n  };\n\n  keydown(e: KeyboardEvent) {\n    this.moveUp.keydown(e);\n    this.moveLeft.keydown(e);\n    this.moveDown.keydown(e);\n    this.moveRight.keydown(e);\n    this.hit.keydown(e);\n    this.drop.keydown(e);\n    this.digit1.keydown(e);\n    this.digit2.keydown(e);\n    this.digit3.keydown(e);\n    this.digit4.keydown(e);\n    this.digit5.keydown(e);\n    this.digit6.keydown(e);\n    this.digit7.keydown(e);\n    this.digit8.keydown(e);\n    this.digit9.keydown(e);\n    this.digit0.keydown(e);\n  };\n\n  keyup(e: KeyboardEvent) {\n    this.moveUp.keyup(e);\n    this.moveLeft.keyup(e);\n    this.moveDown.keyup(e);\n    this.moveRight.keyup(e);\n    this.hit.keyup(e);\n    this.drop.keyup(e);\n    this.digit1.keyup(e);\n    this.digit2.keyup(e);\n    this.digit3.keyup(e);\n    this.digit4.keyup(e);\n    this.digit5.keyup(e);\n    this.digit6.keyup(e);\n    this.digit7.keyup(e);\n    this.digit8.keyup(e);\n    this.digit9.keyup(e);\n    this.digit0.keyup(e);\n  };\n}","import {UsableDrop} from \"./drop\";\nimport {HeroMonster} from \"./hero\";\n\nexport class Inventory {\n  readonly cells: InventoryCell[];\n\n  constructor() {\n    this.cells = [];\n    for (let i = 0; i < 10; i++) {\n      this.cells[i] = new InventoryCell();\n    }\n  }\n\n  add(item: UsableDrop) {\n    for (let i = 0; i < this.cells.length; i++) {\n      if (this.cells[i].stack(item)) {\n        return true;\n      }\n    }\n    for (let i = 0; i < this.cells.length; i++) {\n      if (this.cells[i].set(item)) {\n        return true;\n      }\n    }\n    return false;\n  };\n}\n\nexport class InventoryCell {\n  private readonly maxInStack: number;\n  item: UsableDrop;\n  count: number;\n\n  constructor() {\n    this.maxInStack = 3;\n    this.item = null;\n    this.count = 0;\n  }\n\n  stack(item: UsableDrop) {\n    if (this.item && this.item.same(item) && this.count < this.maxInStack) {\n      this.count++;\n      return true;\n    }\n    return false;\n  };\n\n  set(item: UsableDrop) {\n    if (!this.item) {\n      this.item = item;\n      this.count = 1;\n      return true;\n    }\n    return false;\n  };\n\n  use(hero: HeroMonster) {\n    if (this.item && this.count > 0) {\n      this.item.use(this, hero);\n      return true;\n    }\n    return false;\n  };\n}","import {Scene, SceneController} from \"./scene\";\nimport {RNG} from \"./rng\";\nimport {Joystick} from \"./input\";\nimport {TileRegistry} from \"./tilemap\";\nimport {Render} from \"./render\";\nimport {SelectHeroScene} from \"./create.hero\";\n\nexport class KeyBindScene implements Scene {\n  private readonly rng: RNG;\n  private readonly joystick: Joystick;\n  private readonly registry: TileRegistry;\n  private readonly controller: SceneController;\n\n  constructor(rng: RNG, joystick: Joystick, registry: TileRegistry, controller: SceneController) {\n    this.rng = rng;\n    this.joystick = joystick;\n    this.registry = registry;\n    this.controller = controller;\n  }\n\n  render(render: Render): void {\n    this.handleInput();\n\n    const c_w = render.canvas.width;\n    const c_h = render.canvas.height;\n\n    render.ctx.save();\n    render.ctx.fillStyle = \"rgb(34,34,34)\";\n    render.ctx.fillRect(0, 0, c_w, c_h);\n\n    this.renderTitle(render);\n    this.renderText(render);\n\n    render.ctx.restore();\n  }\n\n  renderTitle(render: Render) {\n    render.ctx.textAlign = \"center\";\n    render.ctx.textBaseline = \"top\";\n    render.ctx.font = \"100px silkscreennormal\";\n    render.ctx.fillStyle = \"rgb(255,255,255)\";\n    render.ctx.fillText(\"ROGUELIKE DUNGEON\", render.canvas.width >> 1, 100);\n  }\n\n  renderText(render: Render) {\n    const bindings = [\n      \"WASD - top, left, bottom, right\",\n      \"F - action\",\n      \"Q - drop weapon\",\n      \"1 ... 0 - inventory\",\n      \"\",\n      \"PRESS F TO CONTINUE\",\n    ];\n    for (let i = 0; i < bindings.length; i++) {\n      const text = bindings[i];\n      if (text.length > 0) {\n        render.ctx.textAlign = \"start\";\n        render.ctx.textBaseline = \"top\";\n        render.ctx.font = \"20px silkscreennormal\";\n        render.ctx.fillStyle = \"rgb(255,255,255)\";\n        render.ctx.fillText(text, 40, 200 + i * 30);\n      }\n    }\n  }\n\n  handleInput() {\n    if (!this.joystick.hit.processed) {\n      this.joystick.hit.reset();\n      this.controller.setScene(new SelectHeroScene(this.rng, this.joystick, this.registry, this.controller))\n    }\n  }\n}","import {TinyMonster, tinyMonsterNames} from \"./tiny.monster\";\nimport {Coins, Drop, HealthBigFlask, HealthFlask, WeaponConfig} from \"./drop\";\nimport {RNG} from \"./rng\";\nimport {Tile, TileRegistry} from \"./tilemap\";\nimport {HeroMonster} from \"./hero\";\nimport {Monster} from \"./monster\";\nimport {BossMonster, mossMonsterNames} from \"./boss.monster\";\nimport {DungeonScene} from \"./dungeon\";\n\nconst x_dist = 2;\nconst y_dist = 3;\n\nexport class Rect {\n  readonly x: number;\n  readonly y: number;\n  readonly w: number;\n  readonly h: number;\n\n  constructor(x: number, y: number, w: number, h: number) {\n    this.x = x;\n    this.y = y;\n    this.w = w;\n    this.h = h;\n  }\n\n  expand() {\n    const a = this;\n    return new Rect(\n      a.x - x_dist,\n      a.y - y_dist,\n      a.w + x_dist + x_dist,\n      a.h + y_dist + y_dist\n    );\n  }\n\n  expandV() {\n    const a = this;\n    return new Rect(\n      a.x - x_dist,\n      a.y,\n      a.w + x_dist + x_dist,\n      a.h\n    );\n  }\n\n  expandH() {\n    const a = this;\n    return new Rect(\n      a.x,\n      a.y - y_dist,\n      a.w,\n      a.h + y_dist + y_dist\n    );\n  }\n\n  isOverlap(b: Rect) {\n    const a = this;\n    return a.x < b.x + b.w\n      && a.x + a.w > b.x\n      && a.y < b.y + b.h\n      && a.y + a.h > b.y;\n  }\n}\n\nexport class Level {\n  private readonly rng: RNG;\n  private readonly registry: TileRegistry;\n  private readonly scene: DungeonScene;\n  readonly level: number;\n  readonly w: number;\n  readonly h: number;\n  log: string[];\n  private readonly rooms: Rect[];\n  private readonly corridorsV: Rect[];\n  private readonly corridorsH: Rect[];\n  readonly floor: Tile[][];\n  readonly drop: Drop[][];\n  readonly wall: Tile[][];\n\n  boss: BossMonster;\n  monsterList: TinyMonster[];\n  readonly hero: HeroMonster;\n  readonly monsters: Monster[][];\n\n  constructor(rng: RNG, registry: TileRegistry, scene: DungeonScene, hero: HeroMonster, l: number, time: number) {\n    this.rng = rng;\n    this.registry = registry;\n    this.scene = scene;\n    this.level = l;\n    this.w = 200;\n    this.h = 120;\n\n    this.log = [];\n    this.rooms = [];\n    this.corridorsV = [];\n    this.corridorsH = [];\n\n    this.floor = this.createBuffer(() => null);\n    this.drop = this.createBuffer(() => null);\n    this.wall = this.createBuffer(() => null);\n\n    this.monsterList = [];\n    this.hero = hero;\n    this.monsters = this.createBuffer(() => null);\n\n    this.generate(time);\n    this.fill();\n    this.replace();\n  }\n\n  createBuffer<T>(defaultValue: () => T): T[][] {\n    const rows: T[][] = [];\n    for (let y = 0; y < this.h; y++) {\n      const row: T[] = [];\n      rows.push(row);\n      for (let x = 0; x < this.w; x++) {\n        row.push(defaultValue());\n      }\n    }\n    return rows;\n  };\n\n  generate(time: number) {\n    const rooms_total = 1 + this.level;\n    const monsters_total = 3 + this.level;\n    const drop_total = 5 + this.level;\n    const is_boss = this.level % 5 === 0;\n\n    // create rooms\n    for (let r = 0; r < rooms_total; r++) {\n      this.generateRoom();\n    }\n\n    // create monsters\n    const max_room = this.rooms.length - (is_boss ? 1 : 0);\n    if (max_room > 1) {\n      for (let m = 0; m < monsters_total; m++) {\n        const r = this.rng.nextRange(1, max_room);\n        const room = this.rooms[r];\n        for (let t = 0; t < 10; t++) {\n          const x = room.x + this.rng.nextRange(0, room.w);\n          const y = room.y + this.rng.nextRange(0, room.h);\n          if (!this.monsters[y][x]) {\n            const name = this.rng.choice(tinyMonsterNames);\n            const monster = new TinyMonster(this.rng, this.registry, this, x, y, name, time);\n            this.monsterList.push(monster);\n            this.monsters[y][x] = monster;\n            break;\n          }\n        }\n      }\n    }\n\n    // generate boss\n    if (is_boss) {\n      const room = this.rooms[this.rooms.length - 1];\n      for (let t = 0; t < 10; t++) {\n        const x = room.x + this.rng.nextRange(1, room.w);\n        const y = room.y + this.rng.nextRange(1, room.h);\n        if (\n          !this.monsters[y][x] && !this.monsters[y][x + 1] &&\n          !this.monsters[y - 1][x] && !this.monsters[y - 1][x + 1]\n        ) {\n          const name = mossMonsterNames[Math.floor(this.level / 5) % mossMonsterNames.length];\n          const monster = new BossMonster(this.rng, this.registry, this, x, y, name, time);\n          this.boss = monster;\n          this.monsters[y][x] = monster;\n          break;\n        }\n      }\n    }\n\n    // create drop\n    for (let d = 0; d < drop_total; d++) {\n      const room = this.rng.choice(this.rooms);\n      for (let t = 0; t < 10; t++) {\n        const x = room.x + this.rng.nextRange(0, room.w);\n        const y = room.y + this.rng.nextRange(0, room.h);\n        if (!this.drop[y][x]) {\n          this.randomDrop(x, y);\n          break;\n        }\n      }\n    }\n\n    // position of hero\n    {\n      const room = this.rooms[0];\n      const hero_x = room.x + (room.w >> 1);\n      const hero_y = room.y + (room.h >> 1);\n      this.hero.setLevel(this);\n      this.hero.resetPosition(hero_x, hero_y);\n      this.monsters[hero_y][hero_x] = this.hero;\n    }\n  };\n\n  generateRoom() {\n    const room_min_w = 5;\n    const room_min_h = 3;\n    const room_max_w = 15;\n    const room_max_h = 10;\n    const room_min_x = 2;\n    const room_min_y = 2;\n\n    const max_corr_dist = 12;\n\n    for (let retry = 0; retry < 1000; retry++) {\n      const room_w = this.rng.nextRange(room_min_w, room_max_w);\n      const room_h = this.rng.nextRange(room_min_h, room_max_h);\n\n      const room = new Rect(\n        this.rng.nextRange(room_min_x, this.w - 2 - room_w),\n        this.rng.nextRange(room_min_y, this.h - 2 - room_h),\n        room_w,\n        room_h\n      );\n\n      if (!this.isOverlap(room.expand())) {\n        // free position found\n        if (this.rooms.length === 0) {\n          this.rooms.push(room);\n          break;\n        } else {\n          // find connection\n          const a = room;\n          let connected = false;\n\n          // find closest room\n          for (let i = 0; i < this.rooms.length; i++) {\n            let b = this.rooms[i];\n\n            // try calculate horizontal distance\n            const max_x = Math.max(a.x, b.x);\n            const min_x_w = Math.min(a.x + a.w, b.x + b.w);\n            if (max_x + 5 <= min_x_w) {\n              let rect;\n              if (a.y + a.h < b.y) {\n                rect = new Rect(\n                  max_x + 2,\n                  a.y + a.h,\n                  min_x_w - max_x - 4,\n                  b.y - a.y - a.h\n                );\n              } else {\n                rect = new Rect(\n                  max_x + 2,\n                  b.y + b.h,\n                  min_x_w - max_x - 4,\n                  a.y - b.y - b.h\n                );\n              }\n              if (rect.h < max_corr_dist && !this.isOverlap(rect.expandV())) {\n                this.corridorsV.push(rect);\n                connected = true;\n              }\n            }\n\n            // try calculate vertical distance\n            const max_y = Math.max(a.y, b.y);\n            const min_y_h = Math.min(a.y + a.h, b.y + b.h);\n            if (max_y + 3 <= min_y_h) {\n              let rect;\n              if (a.x + a.w < b.x) {\n                rect = new Rect(\n                  a.x + a.w,\n                  max_y + 1,\n                  b.x - a.x - a.w,\n                  min_y_h - max_y - 2\n                );\n              } else {\n                rect = new Rect(\n                  b.x + b.w,\n                  max_y + 1,\n                  a.x - b.x - b.w,\n                  min_y_h - max_y - 2,\n                );\n              }\n              if (rect.w < max_corr_dist && !this.isOverlap(rect.expandH())) {\n                this.corridorsH.push(rect);\n                connected = true;\n              }\n            }\n          }\n\n          if (connected) {\n            console.log(\"add room\", room);\n            this.rooms.push(room);\n            break;\n          }\n        }\n      }\n    }\n  }\n\n  isOverlap(a: Rect) {\n    const f = a.isOverlap.bind(a);\n    return this.rooms.some(f) ||\n      this.corridorsV.some(f) ||\n      this.corridorsH.some(f);\n  };\n\n  randomDrop(x: number, y: number) {\n    const weight_coins = 30;\n    const weight_health_flask = 10;\n    const weight_health_big_flask = 10;\n    const weight_weapon = 3;\n\n    const total = weight_coins + weight_health_flask + weight_health_big_flask + weight_weapon;\n    const rnd = this.rng.nextFloat() * total;\n\n    if (rnd < weight_weapon) {\n      const available = WeaponConfig.configs.filter(c => c.level <= this.level);\n      this.drop[y][x] = this.rng.choice(available).create(this.registry);\n    } else if (rnd < weight_health_big_flask) {\n      this.drop[y][x] = new HealthBigFlask(this.registry);\n    } else if (rnd < weight_health_flask) {\n      this.drop[y][x] = new HealthFlask(this.registry);\n    } else if (rnd < weight_coins) {\n      this.drop[y][x] = new Coins(this.rng, this.registry);\n    }\n  };\n\n  fill() {\n    this.rooms.forEach(r => this.fillRoom(r.x, r.y, r.w, r.h));\n    this.corridorsH.forEach(r => this.fillCorridorH(r.x, r.y, r.w, r.h));\n    this.corridorsV.forEach(r => this.fillCorridorV(r.x, r.y, r.w, r.h));\n  };\n\n  fillRoom(x: number, y: number, w: number, h: number) {\n    // fill floor\n    for (let r_y = y; r_y < y + h; r_y++) {\n      for (let r_x = x; r_x < x + w; r_x++) {\n        this.floor[r_y][r_x] = this.registry.get(\"floor_1\");\n      }\n    }\n    // fill top wall\n    this.wall[y - 2][x] = this.registry.get(\"wall_corner_top_left\");\n    this.wall[y - 1][x] = this.registry.get(\"wall_corner_left\");\n    if (w > 1) {\n      for (let r_x = x + 1; r_x < x + w - 1; r_x++) {\n        this.wall[y - 2][r_x] = this.registry.get(\"wall_top_mid\");\n        this.wall[y - 1][r_x] = this.registry.get(\"wall_mid\");\n      }\n      this.wall[y - 2][x + w - 1] = this.registry.get(\"wall_corner_top_right\");\n      this.wall[y - 1][x + w - 1] = this.registry.get(\"wall_corner_right\");\n    }\n    // fill bottom wall\n    this.wall[y + h - 1][x] = this.registry.get(\"wall_corner_bottom_left\");\n    this.wall[y + h][x] = this.registry.get(\"wall_left\");\n    if (w > 1) {\n      for (let r_x = x + 1; r_x < x + w - 1; r_x++) {\n        this.wall[y + h - 1][r_x] = this.registry.get(\"wall_top_mid\");\n        this.wall[y + h][r_x] = this.registry.get(\"wall_mid\");\n      }\n      this.wall[y + h - 1][x + w - 1] = this.registry.get(\"wall_corner_bottom_right\");\n      this.wall[y + h][x + w - 1] = this.registry.get(\"wall_right\");\n    }\n    // fill right wall\n    for (let r_y = y; r_y < y + h - 1; r_y++) {\n      this.wall[r_y][x] = this.registry.get(\"wall_side_mid_right\");\n    }\n    // fill left wall\n    for (let r_y = y; r_y < y + h - 1; r_y++) {\n      this.wall[r_y][x + w - 1] = this.registry.get(\"wall_side_mid_left\");\n    }\n  };\n\n  fillCorridorH(x: number, y: number, w: number, h: number) {\n    // fill floor\n    for (let r_y = y; r_y < y + h; r_y++) {\n      for (let r_x = x; r_x < x + w; r_x++) {\n        this.floor[r_y][r_x] = this.registry.get(\"floor_1\");\n      }\n    }\n\n    // connect with room top left\n    switch (this.wall[y - 2][x - 1].name) {\n      case \"wall_corner_top_right\":\n        this.wall[y - 2][x - 1] = this.registry.get(\"wall_top_mid\");\n        break;\n      case \"wall_side_mid_left\":\n        break;\n      default:\n        console.log(\"top left 2\", this.wall[y - 2][x - 1]);\n        break;\n    }\n    switch (this.wall[y - 1][x - 1].name) {\n      case \"wall_corner_right\":\n        this.wall[y - 1][x - 1] = this.registry.get(\"wall_mid\");\n        break;\n      case \"wall_side_mid_left\":\n        this.wall[y - 1][x - 1] = this.registry.get(\"wall_side_front_left\");\n        break;\n      default:\n        console.log(\"top left 1\", this.wall[y - 1][x - 1]);\n        break;\n    }\n\n    // connect with room mid left\n    if (h > 1) {\n      for (let l_y = y; l_y < y + h - 1; l_y++) {\n        switch (this.wall[l_y][x - 1].name) {\n          case \"wall_side_mid_left\":\n            this.wall[l_y][x - 1] = null;\n            break;\n          default:\n            console.log(\"mid left\", this.wall[l_y][x - 1]);\n            break;\n        }\n      }\n    }\n\n    // connect with room bottom left\n    switch (this.wall[y + h - 1][x - 1].name) {\n      case \"wall_side_mid_left\":\n        this.wall[y + h - 1][x - 1] = this.registry.get(\"wall_side_top_left\");\n        break;\n      case \"wall_corner_bottom_right\":\n        this.wall[y + h - 1][x - 1] = this.registry.get(\"wall_top_mid\");\n        break;\n      default:\n        console.log(\"bottom left 0\", this.wall[y + h - 1][x - 1]);\n        break;\n    }\n    switch (this.wall[y + h][x - 1].name) {\n      case \"wall_side_mid_left\":\n        break;\n      case \"wall_right\":\n        this.wall[y + h][x - 1] = this.registry.get(\"wall_mid\");\n        break;\n      default:\n        console.log(\"bottom left 1\", this.wall[y + h][x - 1]);\n        break;\n    }\n\n    // connect with room top right\n    switch (this.wall[y - 2][x + w].name) {\n      case \"wall_corner_top_left\":\n        this.wall[y - 2][x + w] = this.registry.get(\"wall_top_mid\");\n        break;\n      case \"wall_side_mid_right\":\n        break;\n      default:\n        console.log(\"top right 2\", this.wall[y - 2][x + w]);\n        break;\n    }\n    switch (this.wall[y - 1][x + w].name) {\n      case \"wall_corner_left\":\n        this.wall[y - 1][x + w] = this.registry.get(\"wall_mid\");\n        break;\n      case \"wall_side_mid_right\":\n        this.wall[y - 1][x + w] = this.registry.get(\"wall_side_front_right\");\n        break;\n      default:\n        console.log(\"top right 1\", this.wall[y - 1][x + w]);\n        break;\n    }\n\n    // connect with room mid right\n    if (h > 1) {\n      for (let l_y = y; l_y < y + h - 1; l_y++) {\n        switch (this.wall[l_y][x + w].name) {\n          case \"wall_side_mid_right\":\n            this.wall[l_y][x + w] = null;\n            break;\n          default:\n            console.log(\"mid right\", this.wall[l_y][x + w]);\n            break;\n        }\n      }\n    }\n\n    // connect with room bottom right\n    switch (this.wall[y + h - 1][x + w].name) {\n      case \"wall_side_mid_right\":\n        this.wall[y + h - 1][x + w] = this.registry.get(\"wall_side_top_right\");\n        break;\n      case \"wall_corner_bottom_left\":\n        this.wall[y + h - 1][x + w] = this.registry.get(\"wall_top_mid\");\n        break;\n      default:\n        console.log(\"bottom right 0\", this.wall[y + h - 1][x + w]);\n        break;\n    }\n    switch (this.wall[y + h][x + w].name) {\n      case \"wall_side_mid_right\":\n        break;\n      case \"wall_left\":\n        this.wall[y + h][x + w] = this.registry.get(\"wall_mid\");\n        break;\n      default:\n        console.log(\"bottom right +1\", this.wall[y + h][x + w]);\n        break;\n    }\n\n    // fill top wall\n    for (let r_x = x; r_x < x + w; r_x++) {\n      this.wall[y - 2][r_x] = this.registry.get(\"wall_top_mid\");\n      this.wall[y - 1][r_x] = this.registry.get(\"wall_mid\");\n    }\n\n    // fill bottom wall\n    for (let r_x = x; r_x < x + w; r_x++) {\n      this.wall[y + h - 1][r_x] = this.registry.get(\"wall_top_mid\");\n      this.wall[y + h][r_x] = this.registry.get(\"wall_mid\");\n    }\n  };\n\n  fillCorridorV(x: number, y: number, w: number, h: number) {\n    // fill floor\n    for (let r_y = y; r_y < y + h; r_y++) {\n      for (let r_x = x; r_x < x + w; r_x++) {\n        this.floor[r_y][r_x] = this.registry.get(\"floor_1\");\n      }\n    }\n\n    // connect with room top left\n    switch (this.wall[y - 1][x - 1].name) {\n      case \"wall_top_mid\":\n        this.wall[y - 1][x - 1] = this.registry.get(\"wall_corner_top_right\");\n        break;\n      default:\n        console.log(\"top left -1 -1\", this.wall[y - 1][x - 1]);\n        break;\n    }\n    switch (this.wall[y][x - 1].name) {\n      case \"wall_mid\":\n        this.wall[y][x - 1] = this.registry.get(\"wall_corner_right\");\n        break;\n      default:\n        console.log(\"top left 0 -1\", this.wall[y][x - 1]);\n        break;\n    }\n\n    // connect with room top mid\n    for (let r_x = x; r_x < x + w; r_x++) {\n      switch (this.wall[y - 1][r_x].name) {\n        case \"wall_top_mid\":\n          this.wall[y - 1][r_x] = null;\n          break;\n        default:\n          console.log(\"top mid -1\", this.wall[y - 1][r_x]);\n          break;\n      }\n      switch (this.wall[y][r_x].name) {\n        case \"wall_mid\":\n          this.wall[y][r_x] = null;\n          break;\n        default:\n          console.log(\"top mid 0\", this.wall[y][r_x]);\n          break;\n      }\n    }\n\n    // connect with room top right\n    switch (this.wall[y - 1][x + w].name) {\n      case \"wall_top_mid\":\n        this.wall[y - 1][x + w] = this.registry.get(\"wall_corner_top_left\");\n        break;\n      default:\n        console.log(\"top right -1 1\", this.wall[y - 1][x + w]);\n        break;\n    }\n    switch (this.wall[y][x + w].name) {\n      case \"wall_mid\":\n        this.wall[y][x + w] = this.registry.get(\"wall_corner_left\");\n        break;\n      default:\n        console.log(\"top right 0 -1\", this.wall[y][x + w]);\n        break;\n    }\n\n\n    // connect with room bottom left\n    switch (this.wall[y + h - 2][x - 1].name) {\n      case \"wall_top_mid\":\n        this.wall[y + h - 2][x - 1] = this.registry.get(\"wall_corner_bottom_right\");\n        break;\n      default:\n        console.log(\"bottom left -2 -1\", this.wall[y + h - 2][x - 1]);\n        break;\n    }\n    switch (this.wall[y + h - 1][x - 1].name) {\n      case \"wall_mid\":\n        this.wall[y + h - 1][x - 1] = this.registry.get(\"wall_corner_front_right\");\n        break;\n      default:\n        console.log(\"top left 0 -1\", this.wall[y + h - 1][x - 1]);\n        break;\n    }\n\n    // connect with room bottom mid\n    for (let r_x = x; r_x < x + w; r_x++) {\n      switch (this.wall[y + h - 2][r_x].name) {\n        case \"wall_top_mid\":\n          this.wall[y + h - 2][r_x] = null;\n          break;\n        default:\n          console.log(\"bottom mid -2\", this.wall[y + h - 2][r_x]);\n          break;\n      }\n      switch (this.wall[y + h - 1][r_x].name) {\n        case \"wall_mid\":\n          this.wall[y + h - 1][r_x] = null;\n          break;\n        default:\n          console.log(\"bottom mid -1\", this.wall[y + h - 1][r_x]);\n          break;\n      }\n    }\n\n    // connect with room bottom right\n    switch (this.wall[y + h - 2][x + w].name) {\n      case \"wall_top_mid\":\n        this.wall[y + h - 2][x + w] = this.registry.get(\"wall_corner_bottom_left\");\n        break;\n      default:\n        console.log(\"bottom right -2 -1\", this.wall[y + h - 2][x - 1]);\n        break;\n    }\n    switch (this.wall[y + h - 1][x + w].name) {\n      case \"wall_mid\":\n        this.wall[y + h - 1][x + w] = this.registry.get(\"wall_corner_front_left\");\n        break;\n      default:\n        console.log(\"bottom right 0 -1\", this.wall[y + h - 1][x - 1]);\n        break;\n    }\n\n    // fill side walls\n    for (let r_y = y + 1; r_y < y + h - 2; r_y++) {\n      this.wall[r_y][x - 1] = this.registry.get(\"wall_side_mid_left\");\n      this.wall[r_y][x + w] = this.registry.get(\"wall_side_mid_right\");\n    }\n  };\n\n  replace() {\n    this.replaceFloorRandomly();\n    this.replaceLadder();\n    this.replaceWallRandomly();\n  };\n\n  replaceFloorRandomly() {\n    const replacements = [\"floor_2\", \"floor_3\", \"floor_4\", \"floor_5\", \"floor_6\", \"floor_7\", \"floor_8\"];\n    const percent = 0.2;\n    for (let y = 0; y < this.h; y++) {\n      for (let x = 0; x < this.w; x++) {\n        if (this.floor[y][x] && this.rng.nextFloat() < percent) {\n          this.floor[y][x] = this.registry.get(this.rng.choice(replacements));\n        }\n      }\n    }\n  };\n\n  replaceLadder() {\n    // replace one tile in last room as ladder = out from level!\n    const last = this.rooms[this.rooms.length - 1];\n\n    const ladder_x = last.x + (last.w >> 1);\n    const ladder_y = last.y + (last.h >> 1);\n    console.log(ladder_x, ladder_y, last);\n    this.floor[ladder_y][ladder_x] = this.registry.get(\"floor_ladder\");\n  };\n\n  replaceWallRandomly() {\n    const wall_mid_top_replaces = [\n      \"wall_hole_1\",\n      \"wall_hole_2\",\n      \"wall_banner_red\",\n      \"wall_banner_blue\",\n      \"wall_banner_green\",\n      \"wall_banner_yellow\",\n      \"wall_goo\",\n      \"wall_fountain_mid_red_anim\",\n      \"wall_fountain_mid_blue_anim\",\n    ];\n    const wall_mid_bottom_replaces = [\n      \"wall_hole_1\",\n      \"wall_hole_2\",\n    ];\n    const percent = 0.2;\n    for (let y = 0; y < this.h; y++) {\n      for (let x = 0; x < this.w; x++) {\n        if (this.wall[y][x]) {\n          switch (this.wall[y][x].name) {\n            case \"wall_mid\":\n              if (this.rng.nextFloat() < percent) {\n                const is_top = !!this.floor[y + 1][x];\n                let replacements: string[];\n                if (is_top) {\n                  replacements = wall_mid_top_replaces;\n                } else {\n                  replacements = wall_mid_bottom_replaces;\n                }\n                const replacement = this.rng.choice(replacements);\n                switch (replacement) {\n                  case \"wall_goo\":\n                    this.wall[y][x] = this.registry.get(\"wall_goo\");\n                    this.floor[y + 1][x] = this.registry.get(\"wall_goo_base\");\n                    break;\n                  case \"wall_fountain_mid_red_anim\":\n                    this.wall[y - 1][x] = this.registry.get(\"wall_fountain_top\");\n                    this.wall[y][x] = this.registry.get(\"wall_fountain_mid_red_anim\");\n                    this.floor[y + 1][x] = this.registry.get(\"wall_fountain_basin_red_anim\");\n                    break;\n                  case \"wall_fountain_mid_blue_anim\":\n                    this.wall[y - 1][x] = this.registry.get(\"wall_fountain_top\");\n                    this.wall[y][x] = this.registry.get(\"wall_fountain_mid_blue_anim\");\n                    this.floor[y + 1][x] = this.registry.get(\"wall_fountain_basin_blue_anim\");\n                    break;\n                  default:\n                    this.wall[y][x] = this.registry.get(replacement);\n                    break;\n                }\n              }\n              break;\n            default:\n              // console.log(\"replace\", this.wall[y][x]);\n              break;\n          }\n        }\n      }\n    }\n  };\n\n  exit(time: number) {\n    this.scene.setLevel(new Level(this.rng, this.registry, this.scene, this.hero, this.level + 1, time))\n  };\n\n  restart() {\n    this.scene.restart();\n  }\n\n  animate(time: number) {\n    this.hero.animate(time);\n    if(this.boss) this.boss.animate(time);\n    this.monsterList.forEach(m => m.animate(time));\n  };\n}","import {Tile} from \"./tilemap\";\nimport {Weapon} from \"./drop\";\n\nexport enum MonsterState {\n  Idle = 0, Run = 1, Hit = 2\n}\n\nexport interface Monster {\n  x: number\n  y: number\n  new_x: number\n  new_y: number\n  is_left: boolean\n  frame: number\n  start: number\n  speed: number\n  tile: Tile\n  state: MonsterState\n  weapon: Weapon\n  hitDamage(damage: number, name: string, time: number): void;\n  animate(time: number): void;\n}\n\nexport class MovingMonsterWrapper implements Monster {\n  private readonly monster: Monster;\n\n  constructor(monster: Monster) {\n    this.monster = monster;\n  }\n\n  hitDamage(damage: number, name: string, time: number) {\n    this.monster.hitDamage(damage, name, time);\n  }\n\n  get x(): number {\n    return this.monster.x;\n  }\n\n  get y(): number {\n    return this.monster.y;\n  }\n\n  get new_x(): number {\n    return this.monster.new_x;\n  }\n\n  get new_y(): number {\n    return this.monster.new_y;\n  }\n\n  get is_left(): boolean {\n    return this.monster.is_left;\n  }\n\n  get frame(): number {\n    return this.monster.frame;\n  }\n\n  get start(): number {\n    return this.monster.start;\n  }\n\n  get speed(): number {\n    return this.monster.speed;\n  }\n\n  get tile(): Tile {\n    return this.monster.tile;\n  }\n\n  get state(): MonsterState {\n    return this.monster.state;\n  }\n\n  get weapon(): Weapon {\n    return this.monster.weapon;\n  }\n\n  animate(time: number): void {\n  }\n}","export class Render {\n  readonly canvas: HTMLCanvasElement;\n  readonly ctx: CanvasRenderingContext2D;\n\n  readonly buffer: HTMLCanvasElement;\n  readonly b_ctx: CanvasRenderingContext2D;\n\n  constructor(id: string = \"dungeon\") {\n    this.canvas = document.getElementById(id) as HTMLCanvasElement;\n    this.ctx = this.canvas.getContext(\"2d\");\n    this.ctx.imageSmoothingEnabled = false;\n\n    this.buffer = document.createElement(\"canvas\");\n    this.b_ctx = this.buffer.getContext(\"2d\");\n    this.b_ctx.imageSmoothingEnabled = false;\n  }\n}","/**\n * https://stackoverflow.com/questions/424292/seedable-javascript-random-number-generator\n * LCG using GCC's constants\n */\n\nconst m = 0x80000000; // 2^31;\nconst a = 1103515245;\nconst c = 12345;\n\nexport class RNG {\n  private state: number;\n\n  constructor(seed: number = null) {\n    this.state = seed ? seed : Math.floor(Math.random() * (m - 1));\n    console.log(\"seed\", this.state);\n  }\n\n  nextInt(): number {\n    this.state = (a * this.state + c) % m;\n    return this.state;\n  }\n\n  nextFloat(): number {\n    return this.nextInt() / (m - 1);\n  }\n\n  nextRange(start: number, end: number): number {\n    const rangeSize = end - start;\n    const randomUnder1 = this.nextInt() / m;\n    return start + Math.floor(randomUnder1 * rangeSize);\n  }\n\n  choice<T>(array: T[]): T {\n    return array[this.nextRange(0, array.length)];\n  }\n}","import {Render} from \"./render\";\n\nexport interface Scene {\n  render(render: Render): void;\n}\n\nexport class SceneController {\n  private scene: Scene;\n\n  setScene(scene: Scene) {\n    this.scene = scene;\n  }\n\n  render(render: Render) {\n    this.scene.render(render);\n  }\n}","// https://0x72.itch.io/dungeontileset-ii\n\nexport class TileRegistry {\n  private readonly tileMap: Record<string, Tile>;\n\n  constructor() {\n    this.tileMap = {};\n  }\n\n  async loadTileSet(): Promise<HTMLImageElement> {\n    return await new Promise<HTMLImageElement>((resolve => {\n      const img = new Image();\n      img.onload = ev => resolve(img);\n      img.src = \"0x72_DungeonTilesetII_v1.2.png\";\n    }));\n  }\n\n  async load() {\n    const tileSet = await this.loadTileSet();\n    const response = await fetch(\"tiles_list_v1.1.txt\");\n    const text = await response.text();\n    const lines = text.split(/(\\r?\\n)/g);\n    lines.forEach((line) => {\n      let m = line.match(/([a-z0-9_]+) +([0-9]+) +([0-9]+) +([0-9]+) +([0-9]+) ?([0-9]?)/);\n      if (m) {\n        const x = parseInt(m[2]);\n        const y = parseInt(m[3]);\n        const w = parseInt(m[4]);\n        const h = parseInt(m[5]);\n        const numOfFrames = parseInt(m[6] || \"0\");\n        const tile = new Tile(tileSet, m[1], x, y, w, h, numOfFrames);\n        this.tileMap[tile.name] = tile;\n      }\n    });\n  }\n\n  get(tileName: string): Tile {\n    return this.tileMap[tileName];\n  }\n}\n\nexport class Tile {\n  readonly tileSet: HTMLImageElement;\n  readonly name: string;\n  readonly x: number;\n  readonly y: number;\n  readonly w: number;\n  readonly h: number;\n  readonly numOfFrames: number;\n  readonly isAnim: boolean;\n\n  constructor(tileSet: HTMLImageElement, name: string, x: number, y: number, w: number, h: number, numOfFrames: number) {\n    this.tileSet = tileSet;\n    this.name = name;\n    this.x = x;\n    this.y = y;\n    this.w = w;\n    this.h = h;\n    this.numOfFrames = numOfFrames;\n    this.isAnim = this.numOfFrames > 1;\n  }\n}","import {RNG} from \"./rng\";\nimport {Tile, TileRegistry} from \"./tilemap\";\nimport {Level} from \"./level\";\nimport {Monster, MonsterState, MovingMonsterWrapper} from \"./monster\";\nimport {Weapon} from \"./drop\";\n\nexport const tinyMonsterNames = [\n  \"tiny_zombie\",\n  \"goblin\",\n  \"imp\",\n  \"skeleton\",\n  \"muddy\",\n  \"swampy\",\n  \"zombie\",\n  \"ice_zombie\",\n];\n\nexport class TinyMonster implements Monster {\n  private readonly rng: RNG;\n  private readonly registry: TileRegistry;\n  private readonly level: Level;\n  x: number;\n  y: number;\n  new_x: number;\n  new_y: number;\n  is_left: boolean;\n  private readonly name: string;\n  private readonly healthMax: number;\n  private health: number;\n  private readonly damage: number;\n  private readonly luck: number;\n  readonly speed: number;\n  state: MonsterState;\n  tile: Tile;\n  frame: number;\n  start: number;\n  weapon: Weapon;\n\n  constructor(rng: RNG, registry: TileRegistry, level: Level, x: number, y: number, name: string, time: number) {\n    this.rng = rng;\n    this.registry = registry;\n    this.level = level;\n    this.x = x;\n    this.y = y;\n    this.new_x = x;\n    this.new_y = y;\n    this.is_left = false;\n    this.name = name;\n    this.healthMax = 10;\n    this.health = this.healthMax;\n    this.damage = 3;\n    this.luck = 0.5;\n    this.speed = 100;\n    this.setAnimation(MonsterState.Idle, time);\n  }\n\n  setAnimation(state: MonsterState, time: number) {\n    switch (state) {\n      case MonsterState.Idle:\n        this.state = state;\n        this.tile = this.registry.get(this.name + \"_idle_anim\");\n        this.frame = 0;\n        this.start = time;\n        break;\n      case MonsterState.Run:\n        this.state = state;\n        this.tile = this.registry.get(this.name + \"_run_anim\");\n        this.frame = 0;\n        this.start = time;\n        break;\n    }\n  };\n\n  animate(time: number) {\n    this.frame = Math.floor((time - this.start) / this.speed);\n    if (this.frame >= this.tile.numOfFrames) {\n      if (this.state === MonsterState.Run) {\n        // console.log(\"finish run animation\");\n        this.level.monsters[this.y][this.x] = null;\n        this.level.monsters[this.new_y][this.new_x] = this;\n        this.x = this.new_x;\n        this.y = this.new_y;\n      }\n\n      this.setAnimation(MonsterState.Idle, time);\n\n      // search hero near\n      const max_distance = 3;\n      const scan_x_min = Math.max(0, this.x - max_distance);\n      const scan_y_min = Math.max(0, this.y - max_distance);\n      const scan_x_max = Math.min(this.level.w, this.x + max_distance);\n      const scan_y_max = Math.min(this.level.h, this.y + max_distance);\n\n      const is_hero_near = !this.level.hero.dead\n        && this.level.hero.x >= scan_x_min && this.level.hero.x <= scan_x_max\n        && this.level.hero.y >= scan_y_min && this.level.hero.y <= scan_y_max;\n\n      // console.log(\"hero is near\", scan_x_min, scan_x_max, scan_y_min, scan_y_max);\n\n      if (is_hero_near) {\n        const dist_x = Math.abs(this.x - this.level.hero.x);\n        const dist_y = Math.abs(this.y - this.level.hero.y);\n\n        if (dist_x > 1) {\n          const move_x = Math.max(-1, Math.min(1, this.level.hero.x - this.x));\n          if (this.move(move_x, 0, time)) {\n            console.log(\"move to hero x\");\n            return;\n          }\n        }\n        if (dist_y > 0) {\n          const move_y = Math.max(-1, Math.min(1, this.level.hero.y - this.y));\n          if (this.move(0, move_y, time)) {\n            console.log(\"move to hero y\");\n            return;\n          }\n        }\n\n        if (dist_x <= 1 && dist_y <= 1 && this.rng.nextFloat() < this.luck) {\n          this.level.hero.hitDamage(this.damage, this.name, time);\n          return;\n        }\n      }\n\n      // random move ?\n      const random_move_percent = 0.1;\n      if (this.rng.nextFloat() < random_move_percent) {\n        const move_x = this.rng.nextRange(-1, 2);\n        const move_y = this.rng.nextRange(-1, 2);\n        // console.log(\"random move\", move_x, move_y);\n        if (this.move(move_x, move_y, time)) {\n          return;\n        }\n      }\n    }\n  };\n\n  move(d_x: number, d_y: number, time: number) {\n    this.is_left = d_x < 0;\n    if (this.state === MonsterState.Idle) {\n      const new_x = this.x + d_x;\n      const new_y = this.y + d_y;\n\n      // check is floor exists\n      if (!this.level.floor[new_y][new_x]) return false;\n\n      // check is no monster\n      if (this.level.monsters[new_y][new_x]) return false;\n\n      // start move animation\n      this.level.monsters[new_y][new_x] = new MovingMonsterWrapper(this); // mark as used\n      this.new_x = new_x;\n      this.new_y = new_y;\n      this.setAnimation(MonsterState.Run, time);\n      return true;\n    }\n    return false;\n  };\n\n  hitDamage(damage: number, name: string, time: number) {\n    this.level.log.push(`${this.name} damaged ${damage} by ${name}`);\n    this.health = Math.max(0, this.health - damage);\n    if (this.health <= 0) {\n      this.level.log.push(`${this.name} killed by ${name}`);\n      this.level.monsters[this.y][this.x] = null;\n      this.level.monsters[this.new_y][this.new_x] = null;\n      this.level.monsterList = this.level.monsterList.filter(s => s !== this);\n      if (this.rng.nextFloat() < this.luck) {\n        this.level.randomDrop(this.x, this.y);\n      }\n    }\n  };\n}"]}