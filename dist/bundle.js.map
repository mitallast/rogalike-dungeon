{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/boss.monster.ts","src/drop.ts","src/dungeon.ts","src/hero.ts","src/input.ts","src/inventory.ts","src/level.ts","src/monster.ts","src/rng.ts","src/scene.ts","src/tilemap.ts","src/tiny.monster.ts"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","monster_1","mossMonsterNames","BossMonster","[object Object]","rng","registry","level","x","y","name","time","this","new_x","new_y","is_left","healthMax","Math","floor","health","damage","luck","speed","wrapper","MovingMonsterWrapper","setAnimation","MonsterState","Idle","state","tile","get","frame","start","Run","numOfFrames","monsters","max_distance","scan_x_min","max","scan_y_min","scan_x_max","min","w","scan_y_max","h","hero","dead","dist_x","abs","dist_y","move_x","move","console","log","move_y","nextFloat","hitDamage","random_move_percent","nextRange","d_x","d_y","test_x","test_y","m","push","boss","randomDrop","Coins","coins","addCoins","HealthFlask","inventory","add","item","cell","hill","count","HealthBigFlask","weaponNames","WeaponConfig","tileName","distance","Weapon","configs","prev","weapon","input_1","tilemap_1","hero_1","level_1","scene_1","rng_1","drop_1","TileRegistry","load","canvas","document","getElementById","ctx","getContext","imageSmoothingEnabled","buffer","createElement","b_ctx","Date","getTime","RNG","joystick","Joystick","hero_weapon","create","HeroMonster","scene","Scene","setLevel","Level","renderLight","radius","diameter","box_x","box_y","grd","createRadialGradient","addColorStop","fillStyle","fillRect","renderMonster","monster","dx","dy","sw","sh","sx","sy","dw","dh","tile_offset_y","offset_x","offset_y","maxTime","delta","scale","width","height","save","translate","w_dw","w_dh","w_dy","w_dx","Hit","angle","rotate","PI","drawImage","tileSet","restore","renderTile","isAnim","sf","render","animate","c_w","c_h","globalCompositeOperation","t_x","t_y","t_offset_x","t_offset_y","l_x","l_y","drop","wall","m_y","globalAlpha","renderLevel","h_m","border","font","fillText","toString","renderHealth","textAlign","max_width","point_w","b_w","h_w","slice","renderLevelTitle","renderYouDead","cells","grid_w","inv_w","grid_spacing","g_x","c_x","c_y","cell_size","d_scale","c_offset_x","textBaseline","renderInventory","renderHUD","window","requestAnimationFrame","inventory_1","heroMonsterNames","baseDamage","Inventory","action","scanDrop","scanHit","d","digit","processed","use","dropWeapon","hit","triggered","exit","moveUp","moveDown","moveLeft","moveRight","left_x","right_x","min_y","max_y","b_y","scan_x","scan_y","s_x","j","s_y","dist_r","pickedUp","KeyBindState","KeyBind","Await","preventDefault","Pressed","digit1","digit2","digit3","digit4","digit5","digit6","digit7","digit8","digit9","digit0","init","num","addEventListener","keydown","bind","keyup","InventoryCell","stack","set","maxInStack","same","tiny_monster_1","boss_monster_1","Rect","b","l","rooms","corridorsV","corridorsH","createBuffer","monsterList","generate","fill","replace","defaultValue","rows","row","rooms_total","monsters_total","drop_total","is_boss","generateRoom","max_room","room","choice","tinyMonsterNames","TinyMonster","hero_x","hero_y","resetPosition","retry","room_w","room_h","isOverlap","expand","connected","max_x","min_x_w","rect","expandV","min_y_h","expandH","some","rnd","weight_coins","available","filter","forEach","fillRoom","fillCorridorH","fillCorridorV","r_y","r_x","replaceFloorRandomly","replaceLadder","replaceWallRandomly","replacements","last","ladder_x","ladder_y","wall_mid_top_replaces","wall_mid_bottom_replaces","replacement","seed","random","nextInt","end","rangeSize","randomUnder1","array","tileMap","Promise","resolve","img","Image","onload","ev","src","loadTileSet","response","fetch","text","split","line","match","parseInt","Tile","s"],"mappings":"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","file":"bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","import {RNG} from \"./rng\";\nimport {Tile, TileRegistry} from \"./tilemap\";\nimport {Level} from \"./level\";\nimport {Monster, MonsterState, MovingMonsterWrapper} from \"./monster\";\nimport {Weapon} from \"./drop\";\n\nexport const mossMonsterNames = [\n  \"ogre\",\n  \"big_zombie\",\n  \"big_demon\",\n];\n\nexport class BossMonster implements Monster {\n  private readonly rng: RNG;\n  private readonly registry: TileRegistry;\n  private readonly level: Level;\n  x: number;\n  y: number;\n  new_x: number;\n  new_y: number;\n  is_left: boolean;\n  readonly name: string;\n  readonly healthMax: number;\n  health: number;\n  private readonly damage: number;\n  private readonly luck: number;\n  readonly speed: number;\n  state: MonsterState;\n  tile: Tile;\n  frame: number;\n  start: number;\n  weapon: Weapon;\n  private readonly wrapper: MovingMonsterWrapper;\n\n  constructor(rng: RNG, registry: TileRegistry, level: Level, x: number, y: number, name: string, time: number) {\n    this.rng = rng;\n    this.registry = registry;\n    this.level = level;\n    this.x = x;\n    this.y = y;\n    this.new_x = x;\n    this.new_y = y;\n    this.is_left = false;\n    this.name = name;\n    this.healthMax = 50 + Math.floor(level.level * 10);\n    this.health = this.healthMax;\n    this.damage = 7;\n    this.luck = 0.5;\n    this.speed = 100;\n    this.wrapper = new MovingMonsterWrapper(this);\n    this.setAnimation(MonsterState.Idle, time);\n  }\n\n  setAnimation(state: MonsterState, time: number) {\n    switch (state) {\n      case MonsterState.Idle:\n        this.state = state;\n        this.tile = this.registry.get(this.name + \"_idle_anim\");\n        this.frame = 0;\n        this.start = time;\n        break;\n      case MonsterState.Run:\n        this.state = state;\n        this.tile = this.registry.get(this.name + \"_run_anim\");\n        this.frame = 0;\n        this.start = time;\n        break;\n    }\n  };\n\n  animate(time: number) {\n    this.frame = Math.floor((time - this.start) / this.speed);\n    if (this.frame >= this.tile.numOfFrames) {\n      if (this.state === MonsterState.Run) {\n        // console.log(\"finish run animation\");\n        // clear prev\n        this.level.monsters[this.y][this.x] = null;\n        this.level.monsters[this.y][this.x + 1] = null;\n        this.level.monsters[this.y - 1][this.x] = null;\n        this.level.monsters[this.y - 1][this.x + 1] = null;\n\n        // mark new\n        this.level.monsters[this.new_y][this.new_x] = this;\n        this.level.monsters[this.new_y][this.new_x + 1] = this.wrapper;\n        this.level.monsters[this.new_y - 1][this.new_x] = this.wrapper;\n        this.level.monsters[this.new_y - 1][this.new_x + 1] = this.wrapper;\n\n        this.x = this.new_x;\n        this.y = this.new_y;\n      }\n\n      this.setAnimation(MonsterState.Idle, time);\n\n      // search hero near\n      const max_distance = 5;\n      const scan_x_min = Math.max(0, this.x - max_distance);\n      const scan_y_min = Math.max(0, this.y - max_distance);\n      const scan_x_max = Math.min(this.level.w, this.x + max_distance);\n      const scan_y_max = Math.min(this.level.h, this.y + max_distance);\n\n      const is_hero_near = !this.level.hero.dead\n        && this.level.hero.x >= scan_x_min && this.level.hero.x <= scan_x_max\n        && this.level.hero.y >= scan_y_min && this.level.hero.y <= scan_y_max;\n\n      // console.log(\"hero is near\", scan_x_min, scan_x_max, scan_y_min, scan_y_max);\n\n      if (is_hero_near) {\n        const dist_x = Math.abs(this.x - this.level.hero.x);\n        const dist_y = Math.abs(this.y - this.level.hero.y);\n\n        if (dist_x > 1) {\n          const move_x = Math.max(-1, Math.min(1, this.level.hero.x - this.x));\n          if (this.move(move_x, 0, time)) {\n            console.log(\"move to hero x\");\n            return;\n          }\n        }\n        if (dist_y > 0) {\n          const move_y = Math.max(-1, Math.min(1, this.level.hero.y - this.y));\n          if (this.move(0, move_y, time)) {\n            console.log(\"move to hero y\");\n            return;\n          }\n        }\n\n        if (dist_x <= 1 && dist_y <= 1 && this.rng.nextFloat() < this.luck) {\n          this.level.hero.hitDamage(this.damage, this.name, time);\n          return;\n        }\n      }\n\n      // random move ?\n      const random_move_percent = 0.5;\n      if (this.rng.nextFloat() < random_move_percent) {\n        const move_x = this.rng.nextRange(-1, 2);\n        const move_y = this.rng.nextRange(-1, 2);\n        console.log(\"random move\", move_x, move_y);\n        if (this.move(move_x, move_y, time)) {\n          return;\n        }\n      }\n    }\n  };\n\n  move(d_x: number, d_y: number, time: number) {\n    this.is_left = d_x < 0;\n    if (this.state === MonsterState.Idle) {\n      // monster use space [x..x+1; y..y-1]\n\n      const new_x = this.x + d_x;\n      const new_y = this.y + d_y;\n\n      for (let test_x = new_x; test_x <= new_x + 1; test_x++) {\n        for (let test_y = new_y - 1; test_y <= new_y; test_y++) {\n          // check is floor exists\n          if (!this.level.floor[test_y][test_x]) {\n            return false;\n          }\n          // check is no monster\n          const m = this.level.monsters[test_y][test_x];\n          if (m && m !== this && m !== this.wrapper) {\n            return false;\n          }\n        }\n      }\n\n      // start move animation\n      // mark as used\n      this.level.monsters[new_y][new_x] = this.wrapper;\n      this.level.monsters[new_y][new_x + 1] = this.wrapper;\n      this.level.monsters[new_y - 1][new_x] = this.wrapper;\n      this.level.monsters[new_y - 1][new_x + 1] = this.wrapper;\n      // reuse current level, because prev mark can override it\n      this.level.monsters[this.y][this.x] = this;\n      this.new_x = new_x;\n      this.new_y = new_y;\n      this.setAnimation(MonsterState.Run, time);\n      return true;\n    }\n    return false;\n  };\n\n  hitDamage(damage: number, name: string, time: number) {\n    this.level.log.push(`${this.name} damaged ${damage} by ${name}`);\n    this.health = Math.max(0, this.health - damage);\n    if (this.health <= 0) {\n      this.level.log.push(`${this.name} killed by ${name}`);\n\n      this.level.monsters[this.y][this.x] = null;\n      this.level.monsters[this.y][this.x + 1] = null;\n      this.level.monsters[this.y - 1][this.x] = null;\n      this.level.monsters[this.y - 1][this.x + 1] = null;\n\n\n      this.level.monsters[this.new_y][this.new_x] = null;\n      this.level.monsters[this.new_y][this.new_x + 1] = null;\n      this.level.monsters[this.new_y - 1][this.new_x] = null;\n      this.level.monsters[this.new_y - 1][this.new_x + 1] = null;\n\n      this.level.boss = null;\n      if (this.rng.nextFloat() < this.luck) {\n        this.level.randomDrop(this.x, this.y);\n      }\n    }\n  };\n}","import {RNG} from \"./rng\";\nimport {HeroMonster} from \"./hero\";\nimport {Tile, TileRegistry} from \"./tilemap\";\nimport {InventoryCell} from \"./inventory\";\n\nexport interface Drop {\n  readonly tile: Tile\n  pickedUp(hero: HeroMonster): boolean;\n}\n\nexport interface UsableDrop extends Drop {\n  same(item: UsableDrop): boolean;\n  use(cell: InventoryCell, hero: HeroMonster): void;\n}\n\nexport class Coins implements Drop {\n  readonly tile: Tile;\n  private readonly coins: number;\n\n  constructor(rng: RNG, registry: TileRegistry) {\n    this.tile = registry.get(\"coin_anim\");\n    this.coins = rng.nextRange(1, 30)\n  }\n\n  pickedUp(hero: HeroMonster): boolean {\n    hero.addCoins(this.coins);\n    return true;\n  };\n}\n\nexport class HealthFlask implements UsableDrop {\n  readonly tile: Tile;\n  private readonly health: number;\n\n  constructor(registry: TileRegistry) {\n    this.tile = registry.get(\"flask_red\");\n    this.health = 2;\n  }\n\n  pickedUp(hero: HeroMonster): boolean {\n    return hero.inventory.add(this);\n\n  };\n\n  same(item: UsableDrop): boolean {\n    return item instanceof HealthFlask;\n  };\n\n  use(cell: InventoryCell, hero: HeroMonster) {\n    hero.hill(this.health);\n    cell.count--;\n    if (cell.count <= 0) {\n      cell.item = null;\n      cell.count = 0;\n    }\n  };\n}\n\nexport class HealthBigFlask implements UsableDrop {\n  readonly tile: Tile;\n  private readonly health: number;\n\n  constructor(registry: TileRegistry) {\n    this.tile = registry.get(\"flask_big_red\");\n    this.health = 5;\n  }\n\n  pickedUp(hero: HeroMonster): boolean {\n    return hero.inventory.add(this);\n  };\n\n  same(item: UsableDrop): boolean {\n    return item instanceof HealthBigFlask;\n  };\n\n  use(cell: InventoryCell, hero: HeroMonster) {\n    hero.hill(this.health);\n    cell.count--;\n    if (cell.count <= 0) {\n      cell.item = null;\n      cell.count = 0;\n    }\n  };\n}\n\nexport const weaponNames = [\n  \"weapon_knife\",\n  \"weapon_rusty_sword\",\n  \"weapon_regular_sword\",\n  \"weapon_red_gem_sword\",\n  \"weapon_big_hammer\",\n  \"weapon_hammer\",\n  \"weapon_baton_with_spikes\",\n  \"weapon_mace\",\n  \"weapon_katana\",\n  \"weapon_saw_sword\",\n  \"weapon_anime_sword\",\n  \"weapon_axe\",\n  \"weapon_machete\",\n  \"weapon_cleaver\",\n  \"weapon_duel_sword\",\n  \"weapon_knight_sword\",\n  \"weapon_golden_sword\",\n  \"weapon_lavish_sword\",\n  \"weapon_red_magic_staff\",\n  \"weapon_green_magic_staff\",\n];\n\nexport class WeaponConfig {\n  readonly tileName: string;\n  readonly speed: number;\n  readonly distance: number;\n  readonly damage: number;\n  readonly level: number;\n\n  constructor(tileName: string, speed: number, distance: number, damage: number, level: number) {\n    this.tileName = tileName;\n    this.speed = speed;\n    this.distance = distance;\n    this.damage = damage;\n    this.level = level;\n  }\n\n  create(registry: TileRegistry): Weapon {\n    return new Weapon(registry.get(this.tileName), this.speed, this.distance, this.damage);\n  }\n\n  static configs: WeaponConfig[] = [\n    new WeaponConfig(\"weapon_knife\", 100, 1, 3, 1),\n    new WeaponConfig(\"weapon_rusty_sword\", 100, 1, 4, 1),\n    new WeaponConfig(\"weapon_regular_sword\", 100, 1, 5, 3),\n    new WeaponConfig(\"weapon_red_gem_sword\", 100, 1, 6, 3),\n\n    new WeaponConfig(\"weapon_big_hammer\", 300, 2, 10, 5),\n    new WeaponConfig(\"weapon_hammer\", 200, 1, 7, 5),\n    new WeaponConfig(\"weapon_baton_with_spikes\", 200, 1, 7, 5),\n    new WeaponConfig(\"weapon_mace\", 200, 1, 7, 5),\n\n    new WeaponConfig(\"weapon_katana\", 100, 1, 8, 7),\n    new WeaponConfig(\"weapon_saw_sword\", 200, 1, 9, 7),\n    new WeaponConfig(\"weapon_anime_sword\", 200, 1, 12, 7),\n    new WeaponConfig(\"weapon_axe\", 200, 1, 12, 7),\n\n    new WeaponConfig(\"weapon_machete\", 100, 1, 11, 9),\n    new WeaponConfig(\"weapon_cleaver\", 100, 1, 12, 9),\n    new WeaponConfig(\"weapon_duel_sword\", 100, 1, 13, 9),\n    new WeaponConfig(\"weapon_knight_sword\", 100, 1, 14, 9),\n\n    new WeaponConfig(\"weapon_golden_sword\", 100, 1, 15, 11),\n    new WeaponConfig(\"weapon_lavish_sword\", 100, 1, 16, 11),\n  ];\n}\n\nexport class Weapon implements UsableDrop {\n  readonly tile: Tile;\n  frame: number;\n  readonly numOfFrames: number;\n  readonly speed: number;\n  readonly distance: number;\n  readonly damage: number;\n\n  constructor(tile: Tile, speed: number, distance: number, damage: number) {\n    this.tile = tile;\n    this.frame = 0;\n    this.numOfFrames = 4;\n    this.speed = speed;\n    this.distance = distance;\n    this.damage = damage;\n  }\n\n  pickedUp(hero: HeroMonster): boolean {\n    return hero.inventory.add(this);\n  }\n\n  same(item: UsableDrop): boolean {\n    return false;\n  }\n\n  use(cell: InventoryCell, hero: HeroMonster): void {\n    const prev = hero.weapon;\n    hero.weapon = this;\n    if (prev) {\n      cell.item = prev;\n      cell.count = 1;\n    } else {\n      cell.item = null;\n      cell.count = 0;\n    }\n  }\n}","import {Joystick} from \"./input\";\nimport {Tile, TileRegistry} from \"./tilemap\";\nimport {HeroMonster} from \"./hero\";\nimport {Level} from \"./level\";\nimport {Scene} from \"./scene\";\nimport {RNG} from \"./rng\";\nimport {Monster, MonsterState, MovingMonsterWrapper} from \"./monster\";\nimport {Weapon, WeaponConfig} from \"./drop\";\n\n(async function () {\n\n  // https://0x72.itch.io/dungeontileset-ii\n\n  const registry = new TileRegistry();\n  await registry.load();\n\n  const canvas: HTMLCanvasElement = document.getElementById(\"dungeon\") as HTMLCanvasElement;\n  const ctx = canvas.getContext(\"2d\");\n  ctx.imageSmoothingEnabled = false;\n\n  const buffer = document.createElement(\"canvas\");\n  const b_ctx = buffer.getContext(\"2d\");\n  b_ctx.imageSmoothingEnabled = false;\n\n  const start = new Date().getTime();\n  const rng = new RNG();\n  const joystick = new Joystick();\n  const hero_weapon = WeaponConfig.configs[0].create(registry);\n  const hero = new HeroMonster(registry, joystick, 0, 0, \"knight_f\", hero_weapon, start);\n  const scene = new Scene();\n  scene.setLevel(new Level(rng, registry, scene, hero, 1, start));\n\n  const scale = 2;\n\n  function render() {\n    const time = new Date().getTime();\n    scene.level.animate(time);\n    renderLevel(time);\n    renderHUD(time);\n    window.requestAnimationFrame(render);\n  }\n\n  function renderLevel(time: number) {\n    const c_w = canvas.width;\n    const c_h = canvas.height;\n    buffer.width = c_w;\n    buffer.height = c_h;\n\n    ctx.save();\n    ctx.fillStyle = \"rgb(34,34,34)\";\n    ctx.fillRect(0, 0, c_w, c_h);\n\n    b_ctx.save();\n    b_ctx.fillStyle = \"black\";\n    b_ctx.fillRect(0, 0, c_w, c_h);\n    b_ctx.globalCompositeOperation = \"lighter\";\n\n    // render hero light\n    renderLight(c_w >> 1, c_h >> 1, 16 * scale * 6);\n\n    let t_x = scene.level.hero.x * 16 * scale + 8 - c_w / 2;\n    let t_y = scene.level.hero.y * 16 * scale + 8 - c_h / 2;\n\n    // translate level to hero position\n    if (scene.level.hero.state === MonsterState.Run) {\n      const start = scene.level.hero.start;\n      const speed = scene.level.hero.speed;\n      const numOfFrames = scene.level.hero.tile.numOfFrames;\n      const maxTime = speed * numOfFrames;\n      const delta = Math.min(maxTime, time - start) / maxTime;\n\n      const t_offset_x = scale * 16 * (scene.level.hero.new_x - scene.level.hero.x) * delta;\n      const t_offset_y = scale * 16 * (scene.level.hero.new_y - scene.level.hero.y) * delta;\n\n      t_x = t_x + t_offset_x;\n      t_y = t_y + t_offset_y;\n    }\n\n    // render floor, drop\n    for (let l_x = 0; l_x < scene.level.w; l_x++) {\n      for (let l_y = 0; l_y < scene.level.h; l_y++) {\n        const d_x = -t_x + l_x * 16 * scale;\n        const d_y = -t_y + l_y * 16 * scale;\n        renderTile(scene.level.floor[l_y][l_x], d_x, d_y);\n        if (scene.level.drop[l_y][l_x]) {\n          renderTile(scene.level.drop[l_y][l_x].tile, d_x, d_y);\n        }\n      }\n    }\n    // render wall, monsters\n    for (let l_y = 0; l_y < scene.level.h; l_y++) {\n      for (let l_x = 0; l_x < scene.level.w; l_x++) {\n        const d_x = -t_x + l_x * 16 * scale;\n        const d_y = -t_y + l_y * 16 * scale;\n        const tile = scene.level.wall[l_y][l_x];\n        if (tile) {\n          renderTile(tile, d_x, d_y);\n          if (tile.name === \"wall_fountain_mid_red_anim\" || tile.name === \"wall_fountain_mid_blue_anim\") {\n            renderLight(d_x + 8 * scale, d_y + 8 * scale, 16 * scale * 4);\n          }\n        }\n      }\n      if (l_y < scene.level.h - 1) {\n        for (let l_x = 0; l_x < scene.level.w; l_x++) {\n          const m_y = l_y + 1;\n          const d_x = -t_x + l_x * 16 * scale;\n          const d_y = -t_y + m_y * 16 * scale;\n          renderMonster(scene.level.monsters[m_y][l_x], d_x, d_y, time);\n        }\n      }\n    }\n\n    ctx.restore();\n\n    ctx.save();\n    ctx.globalAlpha = 0.8;\n    ctx.globalCompositeOperation = \"multiply\";\n    ctx.drawImage(buffer, 0, 0);\n    ctx.restore();\n  }\n\n  function renderLight(x: number, y: number, radius: number) {\n    const diameter = radius << 1;\n    const box_x = x - radius;\n    const box_y = y - radius;\n\n    const grd = b_ctx.createRadialGradient(x, y, 16, x, y, radius);\n    grd.addColorStop(0.5, \"rgb(255,255,255)\");\n    grd.addColorStop(1, \"transparent\");\n    b_ctx.fillStyle = grd;\n    b_ctx.fillRect(box_x, box_y, diameter, diameter);\n  }\n\n  function renderHUD(time: number) {\n    renderHealth(time);\n    renderLevelTitle(time);\n    renderYouDead(time);\n    renderInventory(time);\n  }\n\n  function renderHealth(time: number) {\n    const border = 4;\n    const height = 20;\n    const point_w = 10;\n    const h_m = scene.level.hero.healthMax;\n    const h = scene.level.hero.health;\n\n    // render HUD - hero health\n    ctx.save();\n    ctx.translate(40, 40);\n\n    // background\n    ctx.fillStyle = \"rgb(0,0,0)\";\n    ctx.fillRect(0, 0, border * 2 + point_w * h_m, border * 2 + height);\n\n    // health red line\n    ctx.fillStyle = \"rgb(255,0,0)\";\n    ctx.fillRect(border, border, point_w * h, height);\n\n    // health points text\n    ctx.fillStyle = \"rgb(255,255,255)\";\n    ctx.font = \"20px silkscreennormal\";\n    ctx.fillText(h.toString(), border * 2, border + 16);\n\n    // coins text\n    ctx.fillText(`$${hero.coins}`, 0, 50);\n\n    ctx.restore();\n  }\n\n  function renderLevelTitle(time: number) {\n    const c_w = canvas.width;\n    const c_h = canvas.height;\n\n    // render HUD - level\n    ctx.save();\n    ctx.translate(c_w / 2, 60);\n    ctx.fillStyle = \"rgb(255,255,255)\";\n    ctx.textAlign = \"center\";\n    ctx.font = \"20px silkscreennormal\";\n    ctx.fillText(`level ${scene.level.level}`, 0, 0);\n    ctx.restore();\n\n    // render HUD - boss health\n    if (scene.level.boss) {\n      ctx.save();\n      ctx.translate(c_w / 2, 100);\n\n      const border = 4;\n      const height = 20;\n      const max_width = 500;\n\n      const h_m = scene.level.boss.healthMax;\n      const h = scene.level.boss.health;\n\n      const point_w = Math.min(10, Math.floor(max_width / h_m));\n\n      // background\n      const b_w = border * 2 + point_w * h_m;\n      ctx.fillStyle = \"rgb(0,0,0)\";\n      ctx.fillRect(-(b_w >> 1), 0, b_w, border * 2 + height);\n\n      // health red line\n      const h_w = point_w * h;\n      ctx.fillStyle = \"rgb(255,0,0)\";\n      ctx.fillRect(border - ((point_w * h_m) >> 1), border, h_w, height);\n\n      // health points text\n      ctx.fillStyle = \"rgb(255,255,255)\";\n      ctx.font = \"20px silkscreennormal\";\n      ctx.fillText(`${scene.level.boss.name} - ${h}`, border * 2 - ((point_w * h_m) >> 1), border + 16);\n      ctx.restore();\n    }\n\n    // render HUD - log info\n    scene.level.log = scene.level.log.slice(-5);\n    ctx.save();\n    ctx.translate(40, c_h - 100);\n    for (let i = 0; i < scene.level.log.length; i++) {\n      ctx.fillStyle = \"rgb(255,255,255)\";\n      ctx.font = \"20px silkscreennormal\";\n      ctx.fillText(scene.level.log[i], 0, i * 20);\n    }\n    ctx.restore();\n  }\n\n  function renderYouDead(time: number) {\n    const c_w = canvas.width;\n    const c_h = canvas.height;\n\n    if (scene.level.hero.dead) {\n      ctx.save();\n\n      ctx.fillStyle = \"rgba(0, 0, 0, 0.7)\";\n      ctx.fillRect(0, 0, c_w, c_h);\n\n      ctx.translate(c_w / 2, c_h / 2);\n\n      ctx.fillStyle = \"rgb(255,0,0)\";\n      ctx.textAlign = \"center\";\n      ctx.font = \"200px silkscreennormal\";\n      ctx.fillText(\"YOU DIED\", 0, 0);\n      ctx.restore();\n    }\n  }\n\n  function renderInventory(time: number) {\n    const c_w = canvas.width;\n    const c_h = canvas.height;\n\n    const cells = scene.level.hero.inventory.cells;\n    const cell_size = 16;\n    const grid_w = cells.length;\n    const grid_spacing = 2;\n\n    const inv_w = scale * (grid_w * (cell_size + grid_spacing) + grid_spacing);\n    const inv_h = scale * (cell_size + grid_spacing + grid_spacing);\n\n    ctx.save();\n    ctx.translate((c_w >> 1) - (inv_w >> 1), c_h - inv_h - 40);\n\n    // background\n    ctx.fillStyle = \"rgb(100,100,100)\";\n    ctx.fillRect(0, 0, inv_w, inv_h);\n\n    ctx.translate(grid_spacing * scale, grid_spacing * scale); // grid spacing\n\n    for (let g_x = 0; g_x < grid_w; g_x++) {\n      const c_x = scale * (g_x * (cell_size + grid_spacing));\n      const c_y = 0;\n\n      ctx.fillStyle = \"rgb(70,70,70)\";\n      ctx.fillRect(c_x, 0, cell_size * scale, cell_size * scale);\n      const cell = cells[g_x];\n      if (cell.item) {\n        const tile = cell.item.tile;\n        let sx = tile.x;\n        const sy = tile.y;\n        const sw = tile.w;\n        const sh = tile.h;\n\n        if (tile.isAnim && tile.numOfFrames > 1) {\n          const sf = Math.floor(time / 100) % tile.numOfFrames;\n          sx = tile.x + sw * sf;\n        }\n\n        const d_scale = sh <= cell_size ? 1 : cell_size / sh;\n        const dw = sw * scale * d_scale;\n        const dh = sh * scale * d_scale;\n        const c_offset_x = ((cell_size * scale) >> 1) - (dw >> 1);\n\n        ctx.drawImage(tile.tileSet, sx, sy, sw, sh, c_x + c_offset_x, c_y, dw, dh);\n        ctx.textAlign = \"end\";\n        ctx.textBaseline = \"top\";\n        ctx.font = \"10px silkscreennormal\";\n        ctx.fillStyle = \"rgb(255,255,255)\";\n        ctx.fillText(cell.count.toString(), c_x + (cell_size * scale), 0, cell_size * scale);\n      }\n    }\n    ctx.restore();\n  }\n\n  function renderMonster(monster: Monster, dx: number, dy: number, time: number) {\n    if (monster && !(monster instanceof MovingMonsterWrapper)) {\n      const sw = monster.tile.w;\n      const sh = monster.tile.h;\n      const sx = monster.tile.x + sw * monster.frame;\n      const sy = monster.tile.y;\n      const dw = sw * scale;\n      const dh = sh * scale;\n\n      const tile_offset_y = dh - 14 * scale;\n\n      let offset_x = 0;\n      let offset_y = 0;\n\n      if (monster.state === MonsterState.Run) {\n        const start = monster.start;\n        const speed = monster.speed;\n        const numOfFrames = monster.tile.numOfFrames;\n        const maxTime = speed * numOfFrames;\n        const delta = Math.min(maxTime, time - start) / maxTime;\n\n        offset_x = scale * 16 * (monster.new_x - monster.x) * delta;\n        offset_y = scale * 16 * (monster.new_y - monster.y) * delta;\n      }\n\n      if (dx + offset_x + dw > 0 && dx + offset_x < ctx.canvas.width &&\n        dy + offset_y + dh > 0 && dy + offset_y < ctx.canvas.height) {\n\n\n        ctx.save();\n        ctx.translate(dx + offset_x, dy + offset_y);\n        if (monster.is_left) {\n          ctx.scale(-1, 1);\n          if (monster.weapon) {\n            ctx.save();\n            const w = monster.weapon.tile;\n            const w_dw = w.w * scale;\n            const w_dh = w.h * scale;\n\n            const w_dy = w_dh - 14 * scale;\n            const w_dx = 4 * scale;\n\n            ctx.translate(-w_dx, -w_dy);\n\n            if (monster.state === MonsterState.Hit) {\n              let angle = 90 * monster.weapon.frame / (monster.weapon.numOfFrames - 1);\n              ctx.translate(w_dw >> 1, w_dh); // to bottom center of tile\n              ctx.rotate(angle * Math.PI / 180); // 90 degree\n              ctx.drawImage(w.tileSet, w.x, w.y, w.w, w.h, -(w_dw >> 1), -w_dh, w_dw, w_dh);\n            } else {\n              ctx.drawImage(w.tileSet, w.x, w.y, w.w, w.h, 0, 0, w_dw, w_dh);\n            }\n            ctx.restore();\n          }\n          ctx.drawImage(monster.tile.tileSet, sx, sy, sw, sh, 0 - dw, -tile_offset_y, dw, dh);\n        } else {\n          if (monster.weapon) {\n            ctx.save();\n            const w = monster.weapon.tile;\n            const w_dw = w.w * scale;\n            const w_dh = w.h * scale;\n\n            const w_dy = w_dh - 14 * scale;\n            const w_dx = 12 * scale;\n\n            ctx.translate(w_dx, -w_dy);\n\n            if (monster.state === MonsterState.Hit) {\n              let angle = 90 * monster.weapon.frame / (monster.weapon.numOfFrames - 1);\n              ctx.translate(w_dw >> 1, w_dh); // to bottom center of tile\n              ctx.rotate(angle * Math.PI / 180); // 90 degree\n              ctx.drawImage(w.tileSet, w.x, w.y, w.w, w.h, -(w_dw >> 1), -w_dh, w_dw, w_dh);\n            } else {\n              ctx.drawImage(w.tileSet, w.x, w.y, w.w, w.h, 0, 0, w_dw, w_dh);\n            }\n            ctx.restore();\n          }\n          ctx.drawImage(monster.tile.tileSet, sx, sy, sw, sh, 0, -tile_offset_y, dw, dh);\n        }\n        ctx.restore();\n      }\n    }\n  }\n\n  function renderTile(tile: Tile, dx: number, dy: number) {\n    if (tile) {\n      const sw = tile.w;\n      const sh = tile.h;\n      const dw = sw * scale;\n      const dh = sh * scale;\n      const offset_y = dh - 16 * scale;\n      const offset_x = (16 * scale - dw) >> 1;\n\n      if (dx + dw > 0 && dx < ctx.canvas.width &&\n        dy - offset_y + dh > 0 && dy - offset_y < ctx.canvas.height) {\n        if (tile.isAnim && tile.numOfFrames > 1) {\n          const time = new Date().getTime();\n          const sf = Math.floor(time / 100) % tile.numOfFrames;\n          const sx = tile.x + sw * sf;\n          const sy = tile.y;\n          ctx.drawImage(tile.tileSet, sx, sy, sw, sh, dx + offset_x, dy - offset_y, dw, dh);\n        } else {\n          const sx = tile.x;\n          const sy = tile.y;\n          ctx.drawImage(tile.tileSet, sx, sy, sw, sh, dx + offset_x, dy - offset_y, dw, dh);\n        }\n      }\n    }\n  }\n\n  render();\n})();","import {Inventory} from \"./inventory\";\nimport {Tile, TileRegistry} from \"./tilemap\";\nimport {Joystick} from \"./input\";\nimport {Monster, MonsterState, MovingMonsterWrapper} from \"./monster\";\nimport {Level} from \"./level\";\nimport {Weapon} from \"./drop\";\n\nexport const heroMonsterNames = [\n  \"elf_f\",\n  \"elf_m\",\n  \"knight_f\",\n  \"knight_m\",\n  \"wizard_f\",\n  \"wizard_m\",\n];\n\nexport class HeroMonster implements Monster {\n  private registry: TileRegistry;\n  private joystick: Joystick;\n  x: number;\n  y: number;\n  new_x: number;\n  new_y: number;\n  is_left: boolean;\n  readonly name: string;\n  readonly healthMax: number;\n  health: number;\n  coins: number;\n  private readonly baseDamage: number;\n  dead: boolean;\n  weapon: Weapon;\n  readonly speed: number;\n  readonly inventory: Inventory;\n  private level: Level;\n  state: MonsterState;\n  tile: Tile;\n  frame: number;\n  start: number;\n\n  constructor(registry: TileRegistry, joystick: Joystick, x: number, y: number, name: string, weapon: Weapon, time: number) {\n    this.registry = registry;\n    this.joystick = joystick;\n    this.x = x;\n    this.y = y;\n    this.new_x = x;\n    this.new_y = y;\n    this.is_left = false;\n    this.name = name;\n    this.healthMax = 30;\n    this.health = this.healthMax;\n    this.coins = 0;\n    this.baseDamage = 1;\n    this.dead = false;\n    this.weapon = weapon;\n    this.speed = 100;\n    this.inventory = new Inventory();\n    this.setAnimation(MonsterState.Idle, time);\n  }\n\n  get damage(): number {\n    return this.baseDamage + (this.weapon ? this.weapon.damage : 0);\n  }\n\n  setLevel(level: Level) {\n    this.level = level;\n  };\n\n  setAnimation(state: MonsterState, time: number) {\n    switch (state) {\n      case MonsterState.Idle:\n        this.state = state;\n        this.tile = this.registry.get(this.name + \"_idle_anim\");\n        this.frame = 0;\n        this.start = time;\n        break;\n      case MonsterState.Run:\n        if (!this.dead) {\n          this.state = state;\n          this.tile = this.registry.get(this.name + \"_run_anim\");\n          this.frame = 0;\n          this.start = time;\n        }\n        break;\n      case MonsterState.Hit:\n        if (!this.dead) {\n          this.state = state;\n          this.tile = this.registry.get(this.name + \"_hit_anim\");\n          this.frame = 0;\n          if (this.weapon) {\n            this.weapon.frame = 0;\n          }\n          this.start = time;\n        }\n        break;\n    }\n  }\n\n  animate(time: number) {\n    switch (this.state) {\n      case MonsterState.Idle:\n        this.frame = Math.floor((time - this.start) / this.speed);\n        if (!this.action(time)) {\n          if (this.frame >= this.tile.numOfFrames) {\n            this.setAnimation(MonsterState.Idle, time);\n          }\n        }\n        break;\n      case MonsterState.Run:\n        this.frame = Math.floor((time - this.start) / this.speed);\n        if (this.frame >= this.tile.numOfFrames) {\n          this.level.monsters[this.y][this.x] = null;\n          this.level.monsters[this.new_y][this.new_x] = this;\n          this.x = this.new_x;\n          this.y = this.new_y;\n          this.scanDrop();\n          if (!this.action(time)) {\n            this.setAnimation(MonsterState.Idle, time);\n          }\n        }\n        break;\n      case MonsterState.Hit:\n        if (this.weapon) {\n          this.weapon.frame = Math.floor((time - this.start) / this.weapon.speed);\n          if (this.weapon.frame >= this.weapon.numOfFrames) {\n            this.scanHit(time);\n            this.scanDrop();\n            if (!this.action(time)) {\n              this.setAnimation(MonsterState.Idle, time);\n            }\n          }\n        } else {\n          this.frame = Math.floor((time - this.start) / this.speed);\n          if (this.frame >= this.tile.numOfFrames) {\n            this.scanHit(time);\n            this.scanDrop();\n            if (!this.action(time)) {\n              this.setAnimation(MonsterState.Idle, time);\n            }\n          }\n        }\n        break;\n    }\n  };\n\n  action(time: number) {\n    if (!this.dead) {\n      this.scanDrop();\n      for (let d = 0; d < 10; d++) {\n        const digit = (d + 1) % 10;\n        if (!this.joystick.digit(digit).processed) {\n          this.joystick.digit(digit).processed = true;\n          this.inventory.cells[d].use(this);\n        }\n      }\n      if (!this.joystick.drop.processed) {\n        this.joystick.drop.processed = true;\n        this.dropWeapon();\n      }\n\n      if (this.joystick.hit.triggered && !this.joystick.hit.processed) {\n        if (this.level.floor[this.y][this.x].name === \"floor_ladder\") {\n          this.joystick.hit.processed = true;\n          this.level.exit(time);\n          return true;\n        } else {\n          this.setAnimation(MonsterState.Hit, time);\n          return true;\n        }\n      }\n      if (this.joystick.moveUp.triggered || !this.joystick.moveUp.processed) {\n        this.joystick.moveUp.processed = true;\n        if (this.move(0, -1, time)) {\n          return true;\n        }\n      }\n      if (this.joystick.moveDown.triggered || !this.joystick.moveDown.processed) {\n        this.joystick.moveDown.processed = true;\n        if (this.move(0, 1, time)) {\n          return true;\n        }\n      }\n      if (this.joystick.moveLeft.triggered || !this.joystick.moveLeft.processed) {\n        this.joystick.moveLeft.processed = true;\n        this.is_left = true;\n        if (this.move(-1, 0, time)) {\n          return true;\n        }\n      }\n      if (this.joystick.moveRight.triggered || !this.joystick.moveRight.processed) {\n        this.joystick.moveRight.processed = true;\n        this.is_left = false;\n        if (this.move(1, 0, time)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  };\n\n  dropWeapon() {\n    if (this.weapon) {\n      const max_distance = 5;\n      let left_x = this.x;\n      let right_x = this.x;\n      let min_y = this.y;\n      let max_y = this.y;\n      // find free floor cell;\n\n      // scan from center by x\n      for (let dist_x = 0; dist_x < max_distance; dist_x++) {\n        left_x--;\n        right_x++;\n        min_y--;\n        max_y++;\n\n        // scan from center by y\n        let t_y = this.y;\n        let b_y = this.y;\n        for (let dist_y = 0; dist_y <= dist_x; dist_y++) {\n          let scan_x = this.is_left ? [left_x, right_x] : [right_x, left_x];\n          let scan_y = [t_y, b_y];\n\n          for (let i = 0; i < 2; i++) {\n            let s_x = scan_x[i];\n            for (let j = 0; j < 2; j++) {\n              let s_y = scan_y[j];\n              if (s_x >= 0 && s_y >= 0) {\n                if (!this.level.drop[s_y][s_x] && this.level.floor[s_y][s_x]) {\n                  const drop = this.weapon;\n                  this.weapon = null;\n                  this.level.drop[s_y][s_x] = drop;\n                  return;\n                }\n              }\n            }\n          }\n\n          t_y--;\n          b_y++;\n        }\n\n        // after reach max y, scan to center by x\n        for (let dist_r = 0; dist_r < dist_x; dist_x++) {\n          left_x++;\n          right_x--;\n\n          let scan_x = this.is_left ? [left_x, right_x] : [right_x, left_x];\n          let scan_y = [t_y, b_y];\n\n          for (let i = 0; i < 2; i++) {\n            let s_x = scan_x[i];\n            for (let j = 0; j < 2; j++) {\n              let s_y = scan_y[j];\n              if (s_x >= 0 && s_y >= 0) {\n                if (!this.level.drop[s_y][s_x] && this.level.floor[s_y][s_x]) {\n                  const drop = this.weapon;\n                  this.weapon = null;\n                  this.level.drop[s_y][s_x] = drop;\n                  return;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  scanDrop() {\n    if (this.level.drop[this.y][this.x]) {\n      const drop = this.level.drop[this.y][this.x];\n      if (drop.pickedUp(this)) {\n        this.level.drop[this.y][this.x] = null;\n      }\n    }\n  };\n\n  scanHit(time: number) {\n    const max_distance = this.weapon ? this.weapon.distance : 1;\n    // search only left or right path\n    const scan_x_min = this.is_left ? Math.max(0, this.x - max_distance) : this.x;\n    const scan_x_max = this.is_left ? this.x : Math.min(this.level.w, this.x + max_distance);\n\n    const scan_y_min = Math.max(0, this.y - max_distance);\n    const scan_y_max = Math.min(this.level.h, this.y + max_distance);\n\n    for (let s_y = scan_y_min; s_y <= scan_y_max; s_y++) {\n      for (let s_x = scan_x_min; s_x <= scan_x_max; s_x++) {\n        // not self\n        if (!(s_x === this.x && s_y === this.y)) {\n          const monster = this.level.monsters[s_y][s_x];\n          if (monster) {\n            monster.hitDamage(this.damage, this.name, time);\n          }\n        }\n      }\n    }\n  };\n\n  move(d_x: number, d_y: number, time: number) {\n    if (!this.dead && this.state === MonsterState.Idle) {\n      const new_x = this.x + d_x;\n      const new_y = this.y + d_y;\n\n      // check is floor exists\n      if (!this.level.floor[new_y][new_x]) return false;\n\n      // check is no monster\n      if (this.level.monsters[new_y][new_x]) return false;\n\n      // start move animation\n      this.level.monsters[new_y][new_x] = new MovingMonsterWrapper(this); // mark as used\n      this.new_x = new_x;\n      this.new_y = new_y;\n      this.setAnimation(MonsterState.Run, time);\n      return true;\n    }\n    return false;\n  };\n\n  resetPosition(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n    this.new_x = x;\n    this.new_y = y;\n  };\n\n  hitDamage(damage: number, name: string, time: number) {\n    if (!this.dead) {\n      this.level.log.push(`${this.name} damaged ${damage} by ${name}`);\n      this.health = Math.max(0, this.health - damage);\n      if (this.health <= 0) {\n        this.level.log.push(`${this.name} killed by ${name}`);\n        this.setAnimation(MonsterState.Idle, time);\n        this.dead = true;\n      }\n    }\n  };\n\n  hill(health: number) {\n    this.health = Math.min(this.healthMax, this.health + health);\n  };\n\n  addCoins(coins: number) {\n    this.coins = this.coins + coins;\n  };\n}","enum KeyBindState {Await = 1, Pressed = 2}\n\nexport class KeyBind {\n  private readonly code: string;\n  private state: KeyBindState;\n  triggered: boolean;\n  processed: boolean;\n\n  constructor(code: string) {\n    this.code = code;\n    this.state = KeyBindState.Await;\n    this.triggered = false;\n    this.processed = true;\n  }\n\n  keydown(e: KeyboardEvent) {\n    if (e.code === this.code) {\n      e.preventDefault();\n      if (this.state === KeyBindState.Await) {\n        this.triggered = true;\n        this.processed = false;\n        this.state = KeyBindState.Pressed;\n      }\n    }\n  }\n\n  keyup(e: KeyboardEvent) {\n    if (e.code === this.code) {\n      e.preventDefault();\n      if (this.state === KeyBindState.Pressed) {\n        this.triggered = false;\n        this.state = KeyBindState.Await;\n      }\n    }\n  }\n}\n\nexport class Joystick {\n  readonly moveUp: KeyBind;\n  readonly moveLeft: KeyBind;\n  readonly moveDown: KeyBind;\n  readonly moveRight: KeyBind;\n  readonly hit: KeyBind;\n  readonly drop: KeyBind;\n  readonly digit1: KeyBind;\n  readonly digit2: KeyBind;\n  readonly digit3: KeyBind;\n  readonly digit4: KeyBind;\n  readonly digit5: KeyBind;\n  readonly digit6: KeyBind;\n  readonly digit7: KeyBind;\n  readonly digit8: KeyBind;\n  readonly digit9: KeyBind;\n  readonly digit0: KeyBind;\n\n  constructor() {\n    this.moveUp = new KeyBind('KeyW');\n    this.moveLeft = new KeyBind('KeyA');\n    this.moveDown = new KeyBind('KeyS');\n    this.moveRight = new KeyBind('KeyD');\n    this.hit = new KeyBind('KeyF');\n    this.drop = new KeyBind('KeyQ');\n\n    this.digit1 = new KeyBind('Digit1');\n    this.digit2 = new KeyBind('Digit2');\n    this.digit3 = new KeyBind('Digit3');\n    this.digit4 = new KeyBind('Digit4');\n    this.digit5 = new KeyBind('Digit5');\n    this.digit6 = new KeyBind('Digit6');\n    this.digit7 = new KeyBind('Digit7');\n    this.digit8 = new KeyBind('Digit8');\n    this.digit9 = new KeyBind('Digit9');\n    this.digit0 = new KeyBind('Digit0');\n    this.init();\n  }\n\n  digit(num: number): KeyBind {\n    switch (num) {\n      case 1: return this.digit1;\n      case 2: return this.digit2;\n      case 3: return this.digit3;\n      case 4: return this.digit4;\n      case 5: return this.digit5;\n      case 6: return this.digit6;\n      case 7: return this.digit7;\n      case 8: return this.digit8;\n      case 9: return this.digit9;\n      case 0: return this.digit0;\n    }\n  }\n\n  init() {\n    window.addEventListener(\"keydown\", this.keydown.bind(this));\n    window.addEventListener(\"keyup\", this.keyup.bind(this));\n  };\n\n  keydown(e: KeyboardEvent) {\n    this.moveUp.keydown(e);\n    this.moveLeft.keydown(e);\n    this.moveDown.keydown(e);\n    this.moveRight.keydown(e);\n    this.hit.keydown(e);\n    this.drop.keydown(e);\n    this.digit1.keydown(e);\n    this.digit2.keydown(e);\n    this.digit3.keydown(e);\n    this.digit4.keydown(e);\n    this.digit5.keydown(e);\n    this.digit6.keydown(e);\n    this.digit7.keydown(e);\n    this.digit8.keydown(e);\n    this.digit9.keydown(e);\n    this.digit0.keydown(e);\n  };\n\n  keyup(e: KeyboardEvent) {\n    this.moveUp.keyup(e);\n    this.moveLeft.keyup(e);\n    this.moveDown.keyup(e);\n    this.moveRight.keyup(e);\n    this.hit.keyup(e);\n    this.drop.keyup(e);\n    this.digit1.keyup(e);\n    this.digit2.keyup(e);\n    this.digit3.keyup(e);\n    this.digit4.keyup(e);\n    this.digit5.keyup(e);\n    this.digit6.keyup(e);\n    this.digit7.keyup(e);\n    this.digit8.keyup(e);\n    this.digit9.keyup(e);\n    this.digit0.keyup(e);\n  };\n}","import {UsableDrop} from \"./drop\";\nimport {HeroMonster} from \"./hero\";\n\nexport class Inventory {\n  readonly cells: InventoryCell[];\n\n  constructor() {\n    this.cells = [];\n    for (let i = 0; i < 10; i++) {\n      this.cells[i] = new InventoryCell();\n    }\n  }\n\n  add(item: UsableDrop) {\n    for (let i = 0; i < this.cells.length; i++) {\n      if (this.cells[i].stack(item)) {\n        return true;\n      }\n    }\n    for (let i = 0; i < this.cells.length; i++) {\n      if (this.cells[i].set(item)) {\n        return true;\n      }\n    }\n    return false;\n  };\n}\n\nexport class InventoryCell {\n  private readonly maxInStack: number;\n  item: UsableDrop;\n  count: number;\n\n  constructor() {\n    this.maxInStack = 3;\n    this.item = null;\n    this.count = 0;\n  }\n\n  stack(item: UsableDrop) {\n    if (this.item && this.item.same(item) && this.count < this.maxInStack) {\n      this.count++;\n      return true;\n    }\n    return false;\n  };\n\n  set(item: UsableDrop) {\n    if (!this.item) {\n      this.item = item;\n      this.count = 1;\n      return true;\n    }\n    return false;\n  };\n\n  use(hero: HeroMonster) {\n    if (this.item && this.count > 0) {\n      this.item.use(this, hero);\n      return true;\n    }\n    return false;\n  };\n}","import {TinyMonster, tinyMonsterNames} from \"./tiny.monster\";\nimport {Coins, Drop, HealthBigFlask, HealthFlask, WeaponConfig} from \"./drop\";\nimport {RNG} from \"./rng\";\nimport {Tile, TileRegistry} from \"./tilemap\";\nimport {Scene} from \"./scene\";\nimport {HeroMonster} from \"./hero\";\nimport {Monster} from \"./monster\";\nimport {BossMonster, mossMonsterNames} from \"./boss.monster\";\n\nconst x_dist = 2;\nconst y_dist = 3;\n\nexport class Rect {\n  readonly x: number;\n  readonly y: number;\n  readonly w: number;\n  readonly h: number;\n\n  constructor(x: number, y: number, w: number, h: number) {\n    this.x = x;\n    this.y = y;\n    this.w = w;\n    this.h = h;\n  }\n\n  expand() {\n    const a = this;\n    return new Rect(\n      a.x - x_dist,\n      a.y - y_dist,\n      a.w + x_dist + x_dist,\n      a.h + y_dist + y_dist\n    );\n  }\n\n  expandV() {\n    const a = this;\n    return new Rect(\n      a.x - x_dist,\n      a.y,\n      a.w + x_dist + x_dist,\n      a.h\n    );\n  }\n\n  expandH() {\n    const a = this;\n    return new Rect(\n      a.x,\n      a.y - y_dist,\n      a.w,\n      a.h + y_dist + y_dist\n    );\n  }\n\n  isOverlap(b: Rect) {\n    const a = this;\n    return a.x < b.x + b.w\n      && a.x + a.w > b.x\n      && a.y < b.y + b.h\n      && a.y + a.h > b.y;\n  }\n}\n\nexport class Level {\n  private readonly rng: RNG;\n  private readonly registry: TileRegistry;\n  private readonly scene: Scene;\n  readonly level: number;\n  readonly w: number;\n  readonly h: number;\n  log: string[];\n  private readonly rooms: Rect[];\n  private readonly corridorsV: Rect[];\n  private readonly corridorsH: Rect[];\n  readonly floor: Tile[][];\n  readonly drop: Drop[][];\n  readonly wall: Tile[][];\n\n  boss: BossMonster;\n  monsterList: TinyMonster[];\n  readonly hero: HeroMonster;\n  readonly monsters: Monster[][];\n\n  constructor(rng: RNG, registry: TileRegistry, scene: Scene, hero: HeroMonster, l: number, time: number) {\n    this.rng = rng;\n    this.registry = registry;\n    this.scene = scene;\n    this.level = l;\n    this.w = 200;\n    this.h = 120;\n\n    this.log = [];\n    this.rooms = [];\n    this.corridorsV = [];\n    this.corridorsH = [];\n\n    this.floor = this.createBuffer(() => null);\n    this.drop = this.createBuffer(() => null);\n    this.wall = this.createBuffer(() => null);\n\n    this.monsterList = [];\n    this.hero = hero;\n    this.monsters = this.createBuffer(() => null);\n\n    this.generate(time);\n    this.fill();\n    this.replace();\n  }\n\n  createBuffer<T>(defaultValue: () => T): T[][] {\n    const rows: T[][] = [];\n    for (let y = 0; y < this.h; y++) {\n      const row: T[] = [];\n      rows.push(row);\n      for (let x = 0; x < this.w; x++) {\n        row.push(defaultValue());\n      }\n    }\n    return rows;\n  };\n\n  generate(time: number) {\n    const rooms_total = 1 + this.level;\n    const monsters_total = 3 + this.level;\n    const drop_total = 5 + this.level;\n    const is_boss = this.level % 5 === 0;\n\n    // create rooms\n    for (let r = 0; r < rooms_total; r++) {\n      this.generateRoom();\n    }\n\n    // create monsters\n    const max_room = this.rooms.length - (is_boss ? 1 : 0);\n    if (max_room > 1) {\n      for (let m = 0; m < monsters_total; m++) {\n        const r = this.rng.nextRange(1, max_room);\n        const room = this.rooms[r];\n        for (let t = 0; t < 10; t++) {\n          const x = room.x + this.rng.nextRange(0, room.w);\n          const y = room.y + this.rng.nextRange(0, room.h);\n          if (!this.monsters[y][x]) {\n            const name = this.rng.choice(tinyMonsterNames);\n            const monster = new TinyMonster(this.rng, this.registry, this, x, y, name, time);\n            this.monsterList.push(monster);\n            this.monsters[y][x] = monster;\n            break;\n          }\n        }\n      }\n    }\n\n    // generate boss\n    if (is_boss) {\n      const room = this.rooms[this.rooms.length - 1];\n      for (let t = 0; t < 10; t++) {\n        const x = room.x + this.rng.nextRange(1, room.w);\n        const y = room.y + this.rng.nextRange(1, room.h);\n        if (\n          !this.monsters[y][x] && !this.monsters[y][x + 1] &&\n          !this.monsters[y - 1][x] && !this.monsters[y - 1][x + 1]\n        ) {\n          const name = mossMonsterNames[Math.floor(this.level / 5) % mossMonsterNames.length];\n          const monster = new BossMonster(this.rng, this.registry, this, x, y, name, time);\n          this.boss = monster;\n          this.monsters[y][x] = monster;\n          break;\n        }\n      }\n    }\n\n    // create drop\n    for (let d = 0; d < drop_total; d++) {\n      const room = this.rng.choice(this.rooms);\n      for (let t = 0; t < 10; t++) {\n        const x = room.x + this.rng.nextRange(0, room.w);\n        const y = room.y + this.rng.nextRange(0, room.h);\n        if (!this.drop[y][x]) {\n          this.randomDrop(x, y);\n          break;\n        }\n      }\n    }\n\n    // position of hero\n    {\n      const room = this.rooms[0];\n      const hero_x = room.x + (room.w >> 1);\n      const hero_y = room.y + (room.h >> 1);\n      this.hero.setLevel(this);\n      this.hero.resetPosition(hero_x, hero_y);\n      this.monsters[hero_y][hero_x] = this.hero;\n    }\n  };\n\n  generateRoom() {\n    const room_min_w = 5;\n    const room_min_h = 3;\n    const room_max_w = 15;\n    const room_max_h = 10;\n    const room_min_x = 2;\n    const room_min_y = 2;\n\n    const max_corr_dist = 12;\n\n    for (let retry = 0; retry < 1000; retry++) {\n      const room_w = this.rng.nextRange(room_min_w, room_max_w);\n      const room_h = this.rng.nextRange(room_min_h, room_max_h);\n\n      const room = new Rect(\n        this.rng.nextRange(room_min_x, this.w - 2 - room_w),\n        this.rng.nextRange(room_min_y, this.h - 2 - room_h),\n        room_w,\n        room_h\n      );\n\n      if (!this.isOverlap(room.expand())) {\n        // free position found\n        if (this.rooms.length === 0) {\n          this.rooms.push(room);\n          break;\n        } else {\n          // find connection\n          const a = room;\n          let connected = false;\n\n          // find closest room\n          for (let i = 0; i < this.rooms.length; i++) {\n            let b = this.rooms[i];\n\n            // try calculate horizontal distance\n            const max_x = Math.max(a.x, b.x);\n            const min_x_w = Math.min(a.x + a.w, b.x + b.w);\n            if (max_x + 5 <= min_x_w) {\n              let rect;\n              if (a.y + a.h < b.y) {\n                rect = new Rect(\n                  max_x + 2,\n                  a.y + a.h,\n                  min_x_w - max_x - 4,\n                  b.y - a.y - a.h\n                );\n              } else {\n                rect = new Rect(\n                  max_x + 2,\n                  b.y + b.h,\n                  min_x_w - max_x - 4,\n                  a.y - b.y - b.h\n                );\n              }\n              if (rect.h < max_corr_dist && !this.isOverlap(rect.expandV())) {\n                this.corridorsV.push(rect);\n                connected = true;\n              }\n            }\n\n            // try calculate vertical distance\n            const max_y = Math.max(a.y, b.y);\n            const min_y_h = Math.min(a.y + a.h, b.y + b.h);\n            if (max_y + 3 <= min_y_h) {\n              let rect;\n              if (a.x + a.w < b.x) {\n                rect = new Rect(\n                  a.x + a.w,\n                  max_y + 1,\n                  b.x - a.x - a.w,\n                  min_y_h - max_y - 2\n                );\n              } else {\n                rect = new Rect(\n                  b.x + b.w,\n                  max_y + 1,\n                  a.x - b.x - b.w,\n                  min_y_h - max_y - 2,\n                );\n              }\n              if (rect.w < max_corr_dist && !this.isOverlap(rect.expandH())) {\n                this.corridorsH.push(rect);\n                connected = true;\n              }\n            }\n          }\n\n          if (connected) {\n            console.log(\"add room\", room);\n            this.rooms.push(room);\n            break;\n          }\n        }\n      }\n    }\n  }\n\n  isOverlap(a: Rect) {\n    const f = a.isOverlap.bind(a);\n    return this.rooms.some(f) ||\n      this.corridorsV.some(f) ||\n      this.corridorsH.some(f);\n  };\n\n  randomDrop(x: number, y: number) {\n    const weight_coins = 30;\n    const weight_health_flask = 10;\n    const weight_health_big_flask = 10;\n    const weight_weapon = 3;\n\n    const total = weight_coins + weight_health_flask + weight_health_big_flask + weight_weapon;\n    const rnd = this.rng.nextFloat() * total;\n\n    if (rnd < weight_weapon) {\n      const available = WeaponConfig.configs.filter(c => c.level <= this.level);\n      this.drop[y][x] = this.rng.choice(available).create(this.registry);\n    } else if (rnd < weight_health_big_flask) {\n      this.drop[y][x] = new HealthBigFlask(this.registry);\n    } else if (rnd < weight_health_flask) {\n      this.drop[y][x] = new HealthFlask(this.registry);\n    } else if (rnd < weight_coins) {\n      this.drop[y][x] = new Coins(this.rng, this.registry);\n    }\n  };\n\n  fill() {\n    this.rooms.forEach(r => this.fillRoom(r.x, r.y, r.w, r.h));\n    this.corridorsH.forEach(r => this.fillCorridorH(r.x, r.y, r.w, r.h));\n    this.corridorsV.forEach(r => this.fillCorridorV(r.x, r.y, r.w, r.h));\n  };\n\n  fillRoom(x: number, y: number, w: number, h: number) {\n    // fill floor\n    for (let r_y = y; r_y < y + h; r_y++) {\n      for (let r_x = x; r_x < x + w; r_x++) {\n        this.floor[r_y][r_x] = this.registry.get(\"floor_1\");\n      }\n    }\n    // fill top wall\n    this.wall[y - 2][x] = this.registry.get(\"wall_corner_top_left\");\n    this.wall[y - 1][x] = this.registry.get(\"wall_corner_left\");\n    if (w > 1) {\n      for (let r_x = x + 1; r_x < x + w - 1; r_x++) {\n        this.wall[y - 2][r_x] = this.registry.get(\"wall_top_mid\");\n        this.wall[y - 1][r_x] = this.registry.get(\"wall_mid\");\n      }\n      this.wall[y - 2][x + w - 1] = this.registry.get(\"wall_corner_top_right\");\n      this.wall[y - 1][x + w - 1] = this.registry.get(\"wall_corner_right\");\n    }\n    // fill bottom wall\n    this.wall[y + h - 1][x] = this.registry.get(\"wall_corner_bottom_left\");\n    this.wall[y + h][x] = this.registry.get(\"wall_left\");\n    if (w > 1) {\n      for (let r_x = x + 1; r_x < x + w - 1; r_x++) {\n        this.wall[y + h - 1][r_x] = this.registry.get(\"wall_top_mid\");\n        this.wall[y + h][r_x] = this.registry.get(\"wall_mid\");\n      }\n      this.wall[y + h - 1][x + w - 1] = this.registry.get(\"wall_corner_bottom_right\");\n      this.wall[y + h][x + w - 1] = this.registry.get(\"wall_right\");\n    }\n    // fill right wall\n    for (let r_y = y; r_y < y + h - 1; r_y++) {\n      this.wall[r_y][x] = this.registry.get(\"wall_side_mid_right\");\n    }\n    // fill left wall\n    for (let r_y = y; r_y < y + h - 1; r_y++) {\n      this.wall[r_y][x + w - 1] = this.registry.get(\"wall_side_mid_left\");\n    }\n  };\n\n  fillCorridorH(x: number, y: number, w: number, h: number) {\n    // fill floor\n    for (let r_y = y; r_y < y + h; r_y++) {\n      for (let r_x = x; r_x < x + w; r_x++) {\n        this.floor[r_y][r_x] = this.registry.get(\"floor_1\");\n      }\n    }\n\n    // connect with room top left\n    switch (this.wall[y - 2][x - 1].name) {\n      case \"wall_corner_top_right\":\n        this.wall[y - 2][x - 1] = this.registry.get(\"wall_top_mid\");\n        break;\n      case \"wall_side_mid_left\":\n        break;\n      default:\n        console.log(\"top left 2\", this.wall[y - 2][x - 1]);\n        break;\n    }\n    switch (this.wall[y - 1][x - 1].name) {\n      case \"wall_corner_right\":\n        this.wall[y - 1][x - 1] = this.registry.get(\"wall_mid\");\n        break;\n      case \"wall_side_mid_left\":\n        this.wall[y - 1][x - 1] = this.registry.get(\"wall_side_front_left\");\n        break;\n      default:\n        console.log(\"top left 1\", this.wall[y - 1][x - 1]);\n        break;\n    }\n\n    // connect with room mid left\n    if (h > 1) {\n      for (let l_y = y; l_y < y + h - 1; l_y++) {\n        switch (this.wall[l_y][x - 1].name) {\n          case \"wall_side_mid_left\":\n            this.wall[l_y][x - 1] = null;\n            break;\n          default:\n            console.log(\"mid left\", this.wall[l_y][x - 1]);\n            break;\n        }\n      }\n    }\n\n    // connect with room bottom left\n    switch (this.wall[y + h - 1][x - 1].name) {\n      case \"wall_side_mid_left\":\n        this.wall[y + h - 1][x - 1] = this.registry.get(\"wall_side_top_left\");\n        break;\n      case \"wall_corner_bottom_right\":\n        this.wall[y + h - 1][x - 1] = this.registry.get(\"wall_top_mid\");\n        break;\n      default:\n        console.log(\"bottom left 0\", this.wall[y + h - 1][x - 1]);\n        break;\n    }\n    switch (this.wall[y + h][x - 1].name) {\n      case \"wall_side_mid_left\":\n        break;\n      case \"wall_right\":\n        this.wall[y + h][x - 1] = this.registry.get(\"wall_mid\");\n        break;\n      default:\n        console.log(\"bottom left 1\", this.wall[y + h][x - 1]);\n        break;\n    }\n\n    // connect with room top right\n    switch (this.wall[y - 2][x + w].name) {\n      case \"wall_corner_top_left\":\n        this.wall[y - 2][x + w] = this.registry.get(\"wall_top_mid\");\n        break;\n      case \"wall_side_mid_right\":\n        break;\n      default:\n        console.log(\"top right 2\", this.wall[y - 2][x + w]);\n        break;\n    }\n    switch (this.wall[y - 1][x + w].name) {\n      case \"wall_corner_left\":\n        this.wall[y - 1][x + w] = this.registry.get(\"wall_mid\");\n        break;\n      case \"wall_side_mid_right\":\n        this.wall[y - 1][x + w] = this.registry.get(\"wall_side_front_right\");\n        break;\n      default:\n        console.log(\"top right 1\", this.wall[y - 1][x + w]);\n        break;\n    }\n\n    // connect with room mid right\n    if (h > 1) {\n      for (let l_y = y; l_y < y + h - 1; l_y++) {\n        switch (this.wall[l_y][x + w].name) {\n          case \"wall_side_mid_right\":\n            this.wall[l_y][x + w] = null;\n            break;\n          default:\n            console.log(\"mid right\", this.wall[l_y][x + w]);\n            break;\n        }\n      }\n    }\n\n    // connect with room bottom right\n    switch (this.wall[y + h - 1][x + w].name) {\n      case \"wall_side_mid_right\":\n        this.wall[y + h - 1][x + w] = this.registry.get(\"wall_side_top_right\");\n        break;\n      case \"wall_corner_bottom_left\":\n        this.wall[y + h - 1][x + w] = this.registry.get(\"wall_top_mid\");\n        break;\n      default:\n        console.log(\"bottom right 0\", this.wall[y + h - 1][x + w]);\n        break;\n    }\n    switch (this.wall[y + h][x + w].name) {\n      case \"wall_side_mid_right\":\n        break;\n      case \"wall_left\":\n        this.wall[y + h][x + w] = this.registry.get(\"wall_mid\");\n        break;\n      default:\n        console.log(\"bottom right +1\", this.wall[y + h][x + w]);\n        break;\n    }\n\n    // fill top wall\n    for (let r_x = x; r_x < x + w; r_x++) {\n      this.wall[y - 2][r_x] = this.registry.get(\"wall_top_mid\");\n      this.wall[y - 1][r_x] = this.registry.get(\"wall_mid\");\n    }\n\n    // fill bottom wall\n    for (let r_x = x; r_x < x + w; r_x++) {\n      this.wall[y + h - 1][r_x] = this.registry.get(\"wall_top_mid\");\n      this.wall[y + h][r_x] = this.registry.get(\"wall_mid\");\n    }\n  };\n\n  fillCorridorV(x: number, y: number, w: number, h: number) {\n    // fill floor\n    for (let r_y = y; r_y < y + h; r_y++) {\n      for (let r_x = x; r_x < x + w; r_x++) {\n        this.floor[r_y][r_x] = this.registry.get(\"floor_1\");\n      }\n    }\n\n    // connect with room top left\n    switch (this.wall[y - 1][x - 1].name) {\n      case \"wall_top_mid\":\n        this.wall[y - 1][x - 1] = this.registry.get(\"wall_corner_top_right\");\n        break;\n      default:\n        console.log(\"top left -1 -1\", this.wall[y - 1][x - 1]);\n        break;\n    }\n    switch (this.wall[y][x - 1].name) {\n      case \"wall_mid\":\n        this.wall[y][x - 1] = this.registry.get(\"wall_corner_right\");\n        break;\n      default:\n        console.log(\"top left 0 -1\", this.wall[y][x - 1]);\n        break;\n    }\n\n    // connect with room top mid\n    for (let r_x = x; r_x < x + w; r_x++) {\n      switch (this.wall[y - 1][r_x].name) {\n        case \"wall_top_mid\":\n          this.wall[y - 1][r_x] = null;\n          break;\n        default:\n          console.log(\"top mid -1\", this.wall[y - 1][r_x]);\n          break;\n      }\n      switch (this.wall[y][r_x].name) {\n        case \"wall_mid\":\n          this.wall[y][r_x] = null;\n          break;\n        default:\n          console.log(\"top mid 0\", this.wall[y][r_x]);\n          break;\n      }\n    }\n\n    // connect with room top right\n    switch (this.wall[y - 1][x + w].name) {\n      case \"wall_top_mid\":\n        this.wall[y - 1][x + w] = this.registry.get(\"wall_corner_top_left\");\n        break;\n      default:\n        console.log(\"top right -1 1\", this.wall[y - 1][x + w]);\n        break;\n    }\n    switch (this.wall[y][x + w].name) {\n      case \"wall_mid\":\n        this.wall[y][x + w] = this.registry.get(\"wall_corner_left\");\n        break;\n      default:\n        console.log(\"top right 0 -1\", this.wall[y][x + w]);\n        break;\n    }\n\n\n    // connect with room bottom left\n    switch (this.wall[y + h - 2][x - 1].name) {\n      case \"wall_top_mid\":\n        this.wall[y + h - 2][x - 1] = this.registry.get(\"wall_corner_bottom_right\");\n        break;\n      default:\n        console.log(\"bottom left -2 -1\", this.wall[y + h - 2][x - 1]);\n        break;\n    }\n    switch (this.wall[y + h - 1][x - 1].name) {\n      case \"wall_mid\":\n        this.wall[y + h - 1][x - 1] = this.registry.get(\"wall_corner_front_right\");\n        break;\n      default:\n        console.log(\"top left 0 -1\", this.wall[y + h - 1][x - 1]);\n        break;\n    }\n\n    // connect with room bottom mid\n    for (let r_x = x; r_x < x + w; r_x++) {\n      switch (this.wall[y + h - 2][r_x].name) {\n        case \"wall_top_mid\":\n          this.wall[y + h - 2][r_x] = null;\n          break;\n        default:\n          console.log(\"bottom mid -2\", this.wall[y + h - 2][r_x]);\n          break;\n      }\n      switch (this.wall[y + h - 1][r_x].name) {\n        case \"wall_mid\":\n          this.wall[y + h - 1][r_x] = null;\n          break;\n        default:\n          console.log(\"bottom mid -1\", this.wall[y + h - 1][r_x]);\n          break;\n      }\n    }\n\n    // connect with room bottom right\n    switch (this.wall[y + h - 2][x + w].name) {\n      case \"wall_top_mid\":\n        this.wall[y + h - 2][x + w] = this.registry.get(\"wall_corner_bottom_left\");\n        break;\n      default:\n        console.log(\"bottom right -2 -1\", this.wall[y + h - 2][x - 1]);\n        break;\n    }\n    switch (this.wall[y + h - 1][x + w].name) {\n      case \"wall_mid\":\n        this.wall[y + h - 1][x + w] = this.registry.get(\"wall_corner_front_left\");\n        break;\n      default:\n        console.log(\"bottom right 0 -1\", this.wall[y + h - 1][x - 1]);\n        break;\n    }\n\n    // fill side walls\n    for (let r_y = y + 1; r_y < y + h - 2; r_y++) {\n      this.wall[r_y][x - 1] = this.registry.get(\"wall_side_mid_left\");\n      this.wall[r_y][x + w] = this.registry.get(\"wall_side_mid_right\");\n    }\n  };\n\n  replace() {\n    this.replaceFloorRandomly();\n    this.replaceLadder();\n    this.replaceWallRandomly();\n  };\n\n  replaceFloorRandomly() {\n    const replacements = [\"floor_2\", \"floor_3\", \"floor_4\", \"floor_5\", \"floor_6\", \"floor_7\", \"floor_8\"];\n    const percent = 0.2;\n    for (let y = 0; y < this.h; y++) {\n      for (let x = 0; x < this.w; x++) {\n        if (this.floor[y][x] && this.rng.nextFloat() < percent) {\n          this.floor[y][x] = this.registry.get(this.rng.choice(replacements));\n        }\n      }\n    }\n  };\n\n  replaceLadder() {\n    // replace one tile in last room as ladder = out from level!\n    const last = this.rooms[this.rooms.length - 1];\n\n    const ladder_x = last.x + (last.w >> 1);\n    const ladder_y = last.y + (last.h >> 1);\n    console.log(ladder_x, ladder_y, last);\n    this.floor[ladder_y][ladder_x] = this.registry.get(\"floor_ladder\");\n  };\n\n  replaceWallRandomly() {\n    const wall_mid_top_replaces = [\n      \"wall_hole_1\",\n      \"wall_hole_2\",\n      \"wall_banner_red\",\n      \"wall_banner_blue\",\n      \"wall_banner_green\",\n      \"wall_banner_yellow\",\n      \"wall_goo\",\n      \"wall_fountain_mid_red_anim\",\n      \"wall_fountain_mid_blue_anim\",\n    ];\n    const wall_mid_bottom_replaces = [\n      \"wall_hole_1\",\n      \"wall_hole_2\",\n    ];\n    const percent = 0.2;\n    for (let y = 0; y < this.h; y++) {\n      for (let x = 0; x < this.w; x++) {\n        if (this.wall[y][x]) {\n          switch (this.wall[y][x].name) {\n            case \"wall_mid\":\n              if (this.rng.nextFloat() < percent) {\n                const is_top = !!this.floor[y + 1][x];\n                let replacements: string[];\n                if (is_top) {\n                  replacements = wall_mid_top_replaces;\n                } else {\n                  replacements = wall_mid_bottom_replaces;\n                }\n                const replacement = this.rng.choice(replacements);\n                switch (replacement) {\n                  case \"wall_goo\":\n                    this.wall[y][x] = this.registry.get(\"wall_goo\");\n                    this.floor[y + 1][x] = this.registry.get(\"wall_goo_base\");\n                    break;\n                  case \"wall_fountain_mid_red_anim\":\n                    this.wall[y - 1][x] = this.registry.get(\"wall_fountain_top\");\n                    this.wall[y][x] = this.registry.get(\"wall_fountain_mid_red_anim\");\n                    this.floor[y + 1][x] = this.registry.get(\"wall_fountain_basin_red_anim\");\n                    break;\n                  case \"wall_fountain_mid_blue_anim\":\n                    this.wall[y - 1][x] = this.registry.get(\"wall_fountain_top\");\n                    this.wall[y][x] = this.registry.get(\"wall_fountain_mid_blue_anim\");\n                    this.floor[y + 1][x] = this.registry.get(\"wall_fountain_basin_blue_anim\");\n                    break;\n                  default:\n                    this.wall[y][x] = this.registry.get(replacement);\n                    break;\n                }\n              }\n              break;\n            default:\n              // console.log(\"replace\", this.wall[y][x]);\n              break;\n          }\n        }\n      }\n    }\n  };\n\n  exit(time: number) {\n    this.scene.setLevel(new Level(this.rng, this.registry, this.scene, this.hero, this.level + 1, time))\n  };\n\n  animate(time: number) {\n    this.hero.animate(time);\n    if(this.boss) this.boss.animate(time);\n    this.monsterList.forEach(m => m.animate(time));\n  };\n}","import {Tile} from \"./tilemap\";\nimport {Weapon} from \"./drop\";\n\nexport enum MonsterState {\n  Idle = 0, Run = 1, Hit = 2\n}\n\nexport interface Monster {\n  x: number\n  y: number\n  new_x: number\n  new_y: number\n  is_left: boolean\n  frame: number\n  start: number\n  speed: number\n  tile: Tile\n  state: MonsterState\n  weapon: Weapon\n  hitDamage(damage: number, name: string, time: number): void;\n  animate(time: number): void;\n}\n\nexport class MovingMonsterWrapper implements Monster {\n  private readonly monster: Monster;\n\n  constructor(monster: Monster) {\n    this.monster = monster;\n  }\n\n  hitDamage(damage: number, name: string, time: number) {\n    this.monster.hitDamage(damage, name, time);\n  }\n\n  get x(): number {\n    return this.monster.x;\n  }\n\n  get y(): number {\n    return this.monster.y;\n  }\n\n  get new_x(): number {\n    return this.monster.new_x;\n  }\n\n  get new_y(): number {\n    return this.monster.new_y;\n  }\n\n  get is_left(): boolean {\n    return this.monster.is_left;\n  }\n\n  get frame(): number {\n    return this.monster.frame;\n  }\n\n  get start(): number {\n    return this.monster.start;\n  }\n\n  get speed(): number {\n    return this.monster.speed;\n  }\n\n  get tile(): Tile {\n    return this.monster.tile;\n  }\n\n  get state(): MonsterState {\n    return this.monster.state;\n  }\n\n  get weapon(): Weapon {\n    return this.monster.weapon;\n  }\n\n  animate(time: number): void {\n  }\n}","/**\n * https://stackoverflow.com/questions/424292/seedable-javascript-random-number-generator\n * LCG using GCC's constants\n */\n\nconst m = 0x80000000; // 2^31;\nconst a = 1103515245;\nconst c = 12345;\n\nexport class RNG {\n  private state: number;\n\n  constructor(seed: number = null) {\n    this.state = seed ? seed : Math.floor(Math.random() * (m - 1));\n    console.log(\"seed\", this.state);\n  }\n\n  nextInt(): number {\n    this.state = (a * this.state + c) % m;\n    return this.state;\n  }\n\n  nextFloat(): number {\n    return this.nextInt() / (m - 1);\n  }\n\n  nextRange(start: number, end: number): number {\n    const rangeSize = end - start;\n    const randomUnder1 = this.nextInt() / m;\n    return start + Math.floor(randomUnder1 * rangeSize);\n  }\n\n  choice<T>(array: T[]): T {\n    return array[this.nextRange(0, array.length)];\n  }\n}","import {Level} from \"./level\";\n\nexport class Scene {\n  level: Level;\n\n  setLevel(level: Level) {\n    this.level = level;\n  }\n}","// https://0x72.itch.io/dungeontileset-ii\n\nexport class TileRegistry {\n  private readonly tileMap: Record<string, Tile>;\n\n  constructor() {\n    this.tileMap = {};\n  }\n\n  async loadTileSet(): Promise<HTMLImageElement> {\n    return await new Promise<HTMLImageElement>((resolve => {\n      const img = new Image();\n      img.onload = ev => resolve(img);\n      img.src = \"0x72_DungeonTilesetII_v1.2.png\";\n    }));\n  }\n\n  async load() {\n    const tileSet = await this.loadTileSet();\n    const response = await fetch(\"tiles_list_v1.1.txt\");\n    const text = await response.text();\n    const lines = text.split(/(\\r?\\n)/g);\n    lines.forEach((line) => {\n      let m = line.match(/([a-z0-9_]+) +([0-9]+) +([0-9]+) +([0-9]+) +([0-9]+) ?([0-9]?)/);\n      if (m) {\n        const x = parseInt(m[2]);\n        const y = parseInt(m[3]);\n        const w = parseInt(m[4]);\n        const h = parseInt(m[5]);\n        const numOfFrames = parseInt(m[6] || \"0\");\n        const tile = new Tile(tileSet, m[1], x, y, w, h, numOfFrames);\n        this.tileMap[tile.name] = tile;\n      }\n    });\n  }\n\n  get(tileName: string): Tile {\n    return this.tileMap[tileName];\n  }\n}\n\nexport class Tile {\n  readonly tileSet: HTMLImageElement;\n  readonly name: string;\n  readonly x: number;\n  readonly y: number;\n  readonly w: number;\n  readonly h: number;\n  readonly numOfFrames: number;\n  readonly isAnim: boolean;\n\n  constructor(tileSet: HTMLImageElement, name: string, x: number, y: number, w: number, h: number, numOfFrames: number) {\n    this.tileSet = tileSet;\n    this.name = name;\n    this.x = x;\n    this.y = y;\n    this.w = w;\n    this.h = h;\n    this.numOfFrames = numOfFrames;\n    this.isAnim = this.numOfFrames > 1;\n  }\n}","import {RNG} from \"./rng\";\nimport {Tile, TileRegistry} from \"./tilemap\";\nimport {Level} from \"./level\";\nimport {Monster, MonsterState, MovingMonsterWrapper} from \"./monster\";\nimport {Weapon} from \"./drop\";\n\nexport const tinyMonsterNames = [\n  \"tiny_zombie\",\n  \"goblin\",\n  \"imp\",\n  \"skeleton\",\n  \"muddy\",\n  \"swampy\",\n  \"zombie\",\n  \"ice_zombie\",\n];\n\nexport class TinyMonster implements Monster {\n  private readonly rng: RNG;\n  private readonly registry: TileRegistry;\n  private readonly level: Level;\n  x: number;\n  y: number;\n  new_x: number;\n  new_y: number;\n  is_left: boolean;\n  private readonly name: string;\n  private readonly healthMax: number;\n  private health: number;\n  private readonly damage: number;\n  private readonly luck: number;\n  readonly speed: number;\n  state: MonsterState;\n  tile: Tile;\n  frame: number;\n  start: number;\n  weapon: Weapon;\n\n  constructor(rng: RNG, registry: TileRegistry, level: Level, x: number, y: number, name: string, time: number) {\n    this.rng = rng;\n    this.registry = registry;\n    this.level = level;\n    this.x = x;\n    this.y = y;\n    this.new_x = x;\n    this.new_y = y;\n    this.is_left = false;\n    this.name = name;\n    this.healthMax = 10;\n    this.health = this.healthMax;\n    this.damage = 3;\n    this.luck = 0.5;\n    this.speed = 100;\n    this.setAnimation(MonsterState.Idle, time);\n  }\n\n  setAnimation(state: MonsterState, time: number) {\n    switch (state) {\n      case MonsterState.Idle:\n        this.state = state;\n        this.tile = this.registry.get(this.name + \"_idle_anim\");\n        this.frame = 0;\n        this.start = time;\n        break;\n      case MonsterState.Run:\n        this.state = state;\n        this.tile = this.registry.get(this.name + \"_run_anim\");\n        this.frame = 0;\n        this.start = time;\n        break;\n    }\n  };\n\n  animate(time: number) {\n    this.frame = Math.floor((time - this.start) / this.speed);\n    if (this.frame >= this.tile.numOfFrames) {\n      if (this.state === MonsterState.Run) {\n        // console.log(\"finish run animation\");\n        this.level.monsters[this.y][this.x] = null;\n        this.level.monsters[this.new_y][this.new_x] = this;\n        this.x = this.new_x;\n        this.y = this.new_y;\n      }\n\n      this.setAnimation(MonsterState.Idle, time);\n\n      // search hero near\n      const max_distance = 3;\n      const scan_x_min = Math.max(0, this.x - max_distance);\n      const scan_y_min = Math.max(0, this.y - max_distance);\n      const scan_x_max = Math.min(this.level.w, this.x + max_distance);\n      const scan_y_max = Math.min(this.level.h, this.y + max_distance);\n\n      const is_hero_near = !this.level.hero.dead\n        && this.level.hero.x >= scan_x_min && this.level.hero.x <= scan_x_max\n        && this.level.hero.y >= scan_y_min && this.level.hero.y <= scan_y_max;\n\n      // console.log(\"hero is near\", scan_x_min, scan_x_max, scan_y_min, scan_y_max);\n\n      if (is_hero_near) {\n        const dist_x = Math.abs(this.x - this.level.hero.x);\n        const dist_y = Math.abs(this.y - this.level.hero.y);\n\n        if (dist_x > 1) {\n          const move_x = Math.max(-1, Math.min(1, this.level.hero.x - this.x));\n          if (this.move(move_x, 0, time)) {\n            console.log(\"move to hero x\");\n            return;\n          }\n        }\n        if (dist_y > 0) {\n          const move_y = Math.max(-1, Math.min(1, this.level.hero.y - this.y));\n          if (this.move(0, move_y, time)) {\n            console.log(\"move to hero y\");\n            return;\n          }\n        }\n\n        if (dist_x <= 1 && dist_y <= 1 && this.rng.nextFloat() < this.luck) {\n          this.level.hero.hitDamage(this.damage, this.name, time);\n          return;\n        }\n      }\n\n      // random move ?\n      const random_move_percent = 0.1;\n      if (this.rng.nextFloat() < random_move_percent) {\n        const move_x = this.rng.nextRange(-1, 2);\n        const move_y = this.rng.nextRange(-1, 2);\n        // console.log(\"random move\", move_x, move_y);\n        if (this.move(move_x, move_y, time)) {\n          return;\n        }\n      }\n    }\n  };\n\n  move(d_x: number, d_y: number, time: number) {\n    this.is_left = d_x < 0;\n    if (this.state === MonsterState.Idle) {\n      const new_x = this.x + d_x;\n      const new_y = this.y + d_y;\n\n      // check is floor exists\n      if (!this.level.floor[new_y][new_x]) return false;\n\n      // check is no monster\n      if (this.level.monsters[new_y][new_x]) return false;\n\n      // start move animation\n      this.level.monsters[new_y][new_x] = new MovingMonsterWrapper(this); // mark as used\n      this.new_x = new_x;\n      this.new_y = new_y;\n      this.setAnimation(MonsterState.Run, time);\n      return true;\n    }\n    return false;\n  };\n\n  hitDamage(damage: number, name: string, time: number) {\n    this.level.log.push(`${this.name} damaged ${damage} by ${name}`);\n    this.health = Math.max(0, this.health - damage);\n    if (this.health <= 0) {\n      this.level.log.push(`${this.name} killed by ${name}`);\n      this.level.monsters[this.y][this.x] = null;\n      this.level.monsters[this.new_y][this.new_x] = null;\n      this.level.monsterList = this.level.monsterList.filter(s => s !== this);\n      if (this.rng.nextFloat() < this.luck) {\n        this.level.randomDrop(this.x, this.y);\n      }\n    }\n  };\n}"]}