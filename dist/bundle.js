/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/app.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/app.ts":
/*!********************!*\
  !*** ./src/app.ts ***!
  \********************/
/*! no exports provided */
/*! ModuleConcatenation bailout: Module uses injected variables (PIXI) */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(PIXI) {/* harmony import */ var pixi_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! pixi.js */ \"pixi.js\");\n/* harmony import */ var pixi_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(pixi_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var pixi_layers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! pixi-layers */ \"pixi-layers\");\n/* harmony import */ var pixi_layers__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(pixi_layers__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var pixi_sound__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! pixi-sound */ \"pixi-sound\");\n/* harmony import */ var pixi_sound__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(pixi_sound__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _resources__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./resources */ \"./src/resources.ts\");\n/* harmony import */ var _scene__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./scene */ \"./src/scene.ts\");\n/* harmony import */ var _ui__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ui */ \"./src/ui.ts\");\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try {\n            step(generator.next(value));\n        }\n        catch (e) {\n            reject(e);\n        } }\n        function rejected(value) { try {\n            step(generator[\"throw\"](value));\n        }\n        catch (e) {\n            reject(e);\n        } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\n\n\n\n\n(function () {\n    return __awaiter(this, void 0, void 0, function* () {\n        PIXI.settings.FAIL_IF_MAJOR_PERFORMANCE_CAVEAT = false;\n        PIXI.sound.volumeAll = 0.5;\n        const app = new PIXI.Application({\n            width: 1200,\n            height: 700,\n            resolution: 1,\n            antialias: false,\n        });\n        const stage = new PIXI.display.Stage();\n        app.stage = stage;\n        app.renderer.backgroundColor = _ui__WEBPACK_IMPORTED_MODULE_5__[\"Colors\"].background;\n        const resources = new _resources__WEBPACK_IMPORTED_MODULE_3__[\"Resources\"](app.loader);\n        yield resources.load();\n        document.getElementById(\"container\").appendChild(app.view);\n        const controller = new _scene__WEBPACK_IMPORTED_MODULE_4__[\"SceneController\"](resources, app, stage);\n        controller.keyBind();\n    });\n})();\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! pixi.js */ \"pixi.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvYXBwLnRzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2FwcC50cz82ODUyIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHtcbiAgICAgICAgICAgIHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgICB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHtcbiAgICAgICAgICAgIHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgICB9IH1cbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICAgIH0pO1xufTtcbmltcG9ydCBcInBpeGkuanNcIjtcbmltcG9ydCBcInBpeGktbGF5ZXJzXCI7XG5pbXBvcnQgXCJwaXhpLXNvdW5kXCI7XG5pbXBvcnQgeyBSZXNvdXJjZXMgfSBmcm9tIFwiLi9yZXNvdXJjZXNcIjtcbmltcG9ydCB7IFNjZW5lQ29udHJvbGxlciB9IGZyb20gXCIuL3NjZW5lXCI7XG5pbXBvcnQgeyBDb2xvcnMgfSBmcm9tIFwiLi91aVwiO1xuKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICBQSVhJLnNldHRpbmdzLkZBSUxfSUZfTUFKT1JfUEVSRk9STUFOQ0VfQ0FWRUFUID0gZmFsc2U7XG4gICAgICAgIFBJWEkuc291bmQudm9sdW1lQWxsID0gMC41O1xuICAgICAgICBjb25zdCBhcHAgPSBuZXcgUElYSS5BcHBsaWNhdGlvbih7XG4gICAgICAgICAgICB3aWR0aDogMTIwMCxcbiAgICAgICAgICAgIGhlaWdodDogNzAwLFxuICAgICAgICAgICAgcmVzb2x1dGlvbjogMSxcbiAgICAgICAgICAgIGFudGlhbGlhczogZmFsc2UsXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBzdGFnZSA9IG5ldyBQSVhJLmRpc3BsYXkuU3RhZ2UoKTtcbiAgICAgICAgYXBwLnN0YWdlID0gc3RhZ2U7XG4gICAgICAgIGFwcC5yZW5kZXJlci5iYWNrZ3JvdW5kQ29sb3IgPSBDb2xvcnMuYmFja2dyb3VuZDtcbiAgICAgICAgY29uc3QgcmVzb3VyY2VzID0gbmV3IFJlc291cmNlcyhhcHAubG9hZGVyKTtcbiAgICAgICAgeWllbGQgcmVzb3VyY2VzLmxvYWQoKTtcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjb250YWluZXJcIikuYXBwZW5kQ2hpbGQoYXBwLnZpZXcpO1xuICAgICAgICBjb25zdCBjb250cm9sbGVyID0gbmV3IFNjZW5lQ29udHJvbGxlcihyZXNvdXJjZXMsIGFwcCwgc3RhZ2UpO1xuICAgICAgICBjb250cm9sbGVyLmtleUJpbmQoKTtcbiAgICB9KTtcbn0pKCk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/app.ts\n");

/***/ }),

/***/ "./src/curves.ts":
/*!***********************!*\
  !*** ./src/curves.ts ***!
  \***********************/
/*! exports provided: LinearCurve, BezierCurve */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LinearCurve\", function() { return LinearCurve; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BezierCurve\", function() { return BezierCurve; });\nfunction factorial(n) {\n    let result = 1;\n    for (let k = 2; k <= n; k++) {\n        result = result * k;\n    }\n    return result;\n}\nclass LinearCurve {\n    static line() {\n        return t => t;\n    }\n}\nclass BezierCurve {\n    static basis(i, n, t) {\n        return (factorial(n) / (factorial(i) * factorial(n - i))) * Math.pow(t, i) * Math.pow(1 - t, n - i);\n    }\n    static line(...controlPoints) {\n        const n = controlPoints.length - 1;\n        return (t) => {\n            if (t > 1) {\n                t = 1;\n            }\n            let point = 0;\n            for (let i = 0; i < controlPoints.length; i++) {\n                let b = BezierCurve.basis(i, n, t);\n                point += controlPoints[i] * b;\n            }\n            return point;\n        };\n    }\n    static matrix(...controlPoints) {\n        const n = controlPoints.length - 1;\n        const D = controlPoints[0].length;\n        return (t) => {\n            if (t > 1) {\n                t = 1;\n            }\n            let point = [];\n            for (let d = 0; d < D; d++) {\n                point[d] = 0;\n            }\n            for (let i = 0; i < controlPoints.length; i++) {\n                let b = BezierCurve.basis(i, n, t);\n                for (let d = 0; d < D; d++) {\n                    point[d] += controlPoints[i][d] * b;\n                }\n            }\n            return point;\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY3VydmVzLnRzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2N1cnZlcy50cz9iODE3Il0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIGZhY3RvcmlhbChuKSB7XG4gICAgbGV0IHJlc3VsdCA9IDE7XG4gICAgZm9yIChsZXQgayA9IDI7IGsgPD0gbjsgaysrKSB7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdCAqIGs7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5leHBvcnQgY2xhc3MgTGluZWFyQ3VydmUge1xuICAgIHN0YXRpYyBsaW5lKCkge1xuICAgICAgICByZXR1cm4gdCA9PiB0O1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBCZXppZXJDdXJ2ZSB7XG4gICAgc3RhdGljIGJhc2lzKGksIG4sIHQpIHtcbiAgICAgICAgcmV0dXJuIChmYWN0b3JpYWwobikgLyAoZmFjdG9yaWFsKGkpICogZmFjdG9yaWFsKG4gLSBpKSkpICogTWF0aC5wb3codCwgaSkgKiBNYXRoLnBvdygxIC0gdCwgbiAtIGkpO1xuICAgIH1cbiAgICBzdGF0aWMgbGluZSguLi5jb250cm9sUG9pbnRzKSB7XG4gICAgICAgIGNvbnN0IG4gPSBjb250cm9sUG9pbnRzLmxlbmd0aCAtIDE7XG4gICAgICAgIHJldHVybiAodCkgPT4ge1xuICAgICAgICAgICAgaWYgKHQgPiAxKSB7XG4gICAgICAgICAgICAgICAgdCA9IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgcG9pbnQgPSAwO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb250cm9sUG9pbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgbGV0IGIgPSBCZXppZXJDdXJ2ZS5iYXNpcyhpLCBuLCB0KTtcbiAgICAgICAgICAgICAgICBwb2ludCArPSBjb250cm9sUG9pbnRzW2ldICogYjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBwb2ludDtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgc3RhdGljIG1hdHJpeCguLi5jb250cm9sUG9pbnRzKSB7XG4gICAgICAgIGNvbnN0IG4gPSBjb250cm9sUG9pbnRzLmxlbmd0aCAtIDE7XG4gICAgICAgIGNvbnN0IEQgPSBjb250cm9sUG9pbnRzWzBdLmxlbmd0aDtcbiAgICAgICAgcmV0dXJuICh0KSA9PiB7XG4gICAgICAgICAgICBpZiAodCA+IDEpIHtcbiAgICAgICAgICAgICAgICB0ID0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCBwb2ludCA9IFtdO1xuICAgICAgICAgICAgZm9yIChsZXQgZCA9IDA7IGQgPCBEOyBkKyspIHtcbiAgICAgICAgICAgICAgICBwb2ludFtkXSA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvbnRyb2xQb2ludHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBsZXQgYiA9IEJlemllckN1cnZlLmJhc2lzKGksIG4sIHQpO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGQgPSAwOyBkIDwgRDsgZCsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHBvaW50W2RdICs9IGNvbnRyb2xQb2ludHNbaV1bZF0gKiBiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBwb2ludDtcbiAgICAgICAgfTtcbiAgICB9XG59XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/curves.ts\n");

/***/ }),

/***/ "./src/drop.ts":
/*!*********************!*\
  !*** ./src/drop.ts ***!
  \*********************/
/*! exports provided: Coins, HealthFlask, HealthBigFlask, weapons, monsterWeapons, weaponConfigs, Weapon */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Coins\", function() { return Coins; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"HealthFlask\", function() { return HealthFlask; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"HealthBigFlask\", function() { return HealthBigFlask; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"weapons\", function() { return weapons; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"monsterWeapons\", function() { return monsterWeapons; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"weaponConfigs\", function() { return weaponConfigs; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Weapon\", function() { return Weapon; });\n/* harmony import */ var _curves__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./curves */ \"./src/curves.ts\");\n\nclass Coins {\n    constructor(rng, resources) {\n        this.spriteName = \"coin\";\n        this.resources = resources;\n        this.coins = rng.nextRange(1, 30);\n    }\n    pickedUp(hero) {\n        hero.addCoins(this.coins);\n        return true;\n    }\n    ;\n    sprite() {\n        return this.resources.animated(this.spriteName);\n    }\n}\nclass HealthFlask {\n    constructor(resources) {\n        this.spriteName = \"flask_red.png\";\n        this.resources = resources;\n        this.health = 2;\n    }\n    info() {\n        return {\n            name: \"Health flask\",\n            health: this.health\n        };\n    }\n    pickedUp(hero) {\n        return hero.inventory.add(this);\n    }\n    ;\n    same(item) {\n        return item instanceof HealthFlask;\n    }\n    ;\n    use(cell, hero) {\n        hero.heal(this.health);\n        cell.decrease();\n    }\n    ;\n    sprite() {\n        return this.resources.sprite(this.spriteName);\n    }\n}\nclass HealthBigFlask {\n    constructor(resources) {\n        this.spriteName = \"flask_big_red.png\";\n        this.resources = resources;\n        this.health = 5;\n    }\n    info() {\n        return {\n            name: \"Big health flask\",\n            health: this.health\n        };\n    }\n    pickedUp(hero) {\n        return hero.inventory.add(this);\n    }\n    ;\n    sprite() {\n        return this.resources.sprite(this.spriteName);\n    }\n    same(item) {\n        return item instanceof HealthBigFlask;\n    }\n    ;\n    use(cell, hero) {\n        hero.heal(this.health);\n        cell.decrease();\n    }\n    ;\n}\nconst weapons = {\n    knife: { name: \"weapon_knife\", speed: 1.4, distance: 1, damage: 2, level: 1, price: 12 },\n    rusty_sword: { name: \"weapon_rusty_sword\", speed: 1.0, distance: 1, damage: 4, level: 1, price: 15 },\n    regular_sword: { name: \"weapon_regular_sword\", speed: 1.0, distance: 1, damage: 5, level: 3, price: 20 },\n    red_gem_sword: { name: \"weapon_red_gem_sword\", speed: 1.0, distance: 1, damage: 6, level: 3, price: 30 },\n    hammer: { name: \"weapon_hammer\", speed: 0.7, distance: 1, damage: 7, level: 5, price: 38 },\n    big_hammer: { name: \"weapon_big_hammer\", speed: 0.5, distance: 2, damage: 10, level: 5, price: 40 },\n    baton_with_spikes: { name: \"weapon_baton_with_spikes\", speed: 0.6, distance: 1, damage: 7, level: 5, price: 42 },\n    mace: { name: \"weapon_mace\", speed: 0.6, distance: 1, damage: 7, level: 5, price: 45 },\n    katana: { name: \"weapon_katana\", speed: 1.5, distance: 1, damage: 8, level: 7, price: 100 },\n    saw_sword: { name: \"weapon_saw_sword\", speed: 1.5, distance: 1, damage: 9, level: 7, price: 110 },\n    anime_sword: { name: \"weapon_anime_sword\", speed: 0.7, distance: 1, damage: 12, level: 7, price: 130 },\n    axe: { name: \"weapon_axe\", speed: 0.8, distance: 1, damage: 12, level: 7, price: 115 },\n    machete: { name: \"weapon_machete\", speed: 1.0, distance: 1, damage: 11, level: 9, price: 150 },\n    cleaver: { name: \"weapon_cleaver\", speed: 1.0, distance: 1, damage: 12, level: 9, price: 160 },\n    duel_sword: { name: \"weapon_duel_sword\", speed: 1.5, distance: 1, damage: 13, level: 9, price: 170 },\n    knight_sword: { name: \"weapon_knight_sword\", speed: 1.5, distance: 1, damage: 14, level: 9, price: 180 },\n    golden_sword: { name: \"weapon_golden_sword\", speed: 1.5, distance: 1, damage: 15, level: 11, price: 220 },\n    lavish_sword: { name: \"weapon_lavish_sword\", speed: 1.5, distance: 1, damage: 16, level: 11, price: 240 },\n};\nconst monsterWeapons = {\n    knife: { name: \"weapon_knife\", speed: 0.7, distance: 1, damage: 0.5, level: 1, price: 0 },\n    baton_with_spikes: { name: \"weapon_baton_with_spikes\", speed: 0.3, distance: 1, damage: 3, level: 5, price: 0 },\n    anime_sword: { name: \"weapon_anime_sword\", speed: 0.4, distance: 1, damage: 4, level: 10, price: 0 },\n    big_hammer: { name: \"weapon_big_hammer\", speed: 0.3, distance: 2, damage: 5, level: 15, price: 0 },\n    mace: { name: \"weapon_mace\", speed: 0.6, distance: 1, damage: 6, level: 20, price: 0 },\n    cleaver: { name: \"weapon_cleaver\", speed: 0.5, distance: 1, damage: 7, level: 25, price: 0 },\n};\nconst weaponConfigs = Object.getOwnPropertyNames(weapons).map(w => weapons[w]);\nclass Weapon {\n    constructor(resources, config) {\n        this.curve = _curves__WEBPACK_IMPORTED_MODULE_0__[\"BezierCurve\"].line(0, -0.5, -1, 0, 1, 2, 0);\n        this.resources = resources;\n        this.name = config.name;\n        this.speed = config.speed;\n        this.distance = config.distance;\n        this.damage = config.damage;\n        this.price = config.price;\n    }\n    get spriteName() {\n        return this.name + \".png\";\n    }\n    info() {\n        return {\n            name: this.name.replace(/weapon_/, ''),\n            speed: this.speed,\n            distance: this.distance,\n            damage: this.damage,\n            price: this.price\n        };\n    }\n    sprite() {\n        return this.resources.sprite(this.spriteName);\n    }\n    pickedUp(hero) {\n        return hero.inventory.add(this);\n    }\n    same(_item) {\n        return false;\n    }\n    use(cell, hero) {\n        const prev = hero.inventory.equipment.weapon.item.get();\n        hero.inventory.equipment.weapon.clear();\n        hero.inventory.equipment.weapon.set(this);\n        cell.clear();\n        if (prev) {\n            cell.set(prev);\n        }\n    }\n    static create(resources, rng, level) {\n        const available = weaponConfigs.filter(c => c.level <= level);\n        if (available.length > 0) {\n            const config = rng.choice(available);\n            return new Weapon(resources, config);\n        }\n        else {\n            return null;\n        }\n    }\n    static select(resources, rng, weapons) {\n        if (weapons.length > 0) {\n            const config = rng.choice(weapons);\n            return new Weapon(resources, config);\n        }\n        else {\n            return null;\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/drop.ts\n");

/***/ }),

/***/ "./src/inventory.modal.ts":
/*!********************************!*\
  !*** ./src/inventory.modal.ts ***!
  \********************************/
/*! exports provided: InventoryModalScene */
/*! ModuleConcatenation bailout: Module uses injected variables (PIXI) */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(PIXI) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"InventoryModalScene\", function() { return InventoryModalScene; });\n/* harmony import */ var _ui__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ui */ \"./src/ui.ts\");\n/* harmony import */ var _inventory__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./inventory */ \"./src/inventory.ts\");\n\n\nclass InventoryModalScene {\n    constructor(controller, hero, npc) {\n        this.container = null;\n        this.background = null;\n        this.selectable = null;\n        this.inventoryView = null;\n        this.controller = controller;\n        this.hero = hero;\n        this.npc = npc;\n    }\n    init() {\n        this.background = new PIXI.Graphics();\n        this.selectable = new _ui__WEBPACK_IMPORTED_MODULE_0__[\"SelectableGrid\"](this.controller.joystick);\n        let controller;\n        if (this.npc) {\n            controller = new _inventory__WEBPACK_IMPORTED_MODULE_1__[\"SellingInventoryActionsController\"](this.hero, this.npc);\n        }\n        else {\n            controller = new _inventory__WEBPACK_IMPORTED_MODULE_1__[\"DefaultInventoryActionsController\"](this.hero.inventory);\n        }\n        this.inventoryView = new _inventory__WEBPACK_IMPORTED_MODULE_1__[\"InventoryView\"](this.hero.inventory, controller, this.selectable, 0);\n        this.inventoryView.position.set(_ui__WEBPACK_IMPORTED_MODULE_0__[\"Sizes\"].uiMargin, _ui__WEBPACK_IMPORTED_MODULE_0__[\"Sizes\"].uiMargin);\n        this.inventoryView.calculateBounds();\n        this.inventoryView.zIndex = 1;\n        const width = this.inventoryView.width + (_ui__WEBPACK_IMPORTED_MODULE_0__[\"Sizes\"].uiMargin << 1);\n        const height = this.inventoryView.height + (_ui__WEBPACK_IMPORTED_MODULE_0__[\"Sizes\"].uiMargin << 1);\n        this.background\n            .beginFill(0x000000)\n            .drawRect(0, 0, width, height)\n            .endFill();\n        this.background.zIndex = 0;\n        this.container = new PIXI.Container();\n        this.container.addChild(this.background, this.inventoryView);\n        this.container.sortChildren();\n        this.container.position.set((this.controller.app.screen.width >> 1) - (width >> 1), (this.controller.app.screen.height >> 1) - (height >> 1));\n        this.controller.stage.addChild(this.container);\n        this.controller.app.ticker.add(this.handleInput, this);\n    }\n    destroy() {\n        var _a, _b, _c;\n        this.controller.app.ticker.remove(this.handleInput, this);\n        (_a = this.container) === null || _a === void 0 ? void 0 : _a.destroy();\n        this.container = null;\n        (_b = this.background) === null || _b === void 0 ? void 0 : _b.destroy();\n        this.background = null;\n        (_c = this.inventoryView) === null || _c === void 0 ? void 0 : _c.destroy();\n        this.inventoryView = null;\n        this.selectable = null;\n    }\n    handleInput() {\n        var _a;\n        const joystick = this.controller.joystick;\n        if (joystick.inventory.once()) {\n            this.controller.closeModal();\n            return;\n        }\n        (_a = this.selectable) === null || _a === void 0 ? void 0 : _a.handleInput();\n    }\n}\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! pixi.js */ \"pixi.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW52ZW50b3J5Lm1vZGFsLnRzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2ludmVudG9yeS5tb2RhbC50cz84YWZjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNlbGVjdGFibGVHcmlkLCBTaXplcyB9IGZyb20gXCIuL3VpXCI7XG5pbXBvcnQgeyBEZWZhdWx0SW52ZW50b3J5QWN0aW9uc0NvbnRyb2xsZXIsIEludmVudG9yeVZpZXcsIFNlbGxpbmdJbnZlbnRvcnlBY3Rpb25zQ29udHJvbGxlciB9IGZyb20gXCIuL2ludmVudG9yeVwiO1xuZXhwb3J0IGNsYXNzIEludmVudG9yeU1vZGFsU2NlbmUge1xuICAgIGNvbnN0cnVjdG9yKGNvbnRyb2xsZXIsIGhlcm8sIG5wYykge1xuICAgICAgICB0aGlzLmNvbnRhaW5lciA9IG51bGw7XG4gICAgICAgIHRoaXMuYmFja2dyb3VuZCA9IG51bGw7XG4gICAgICAgIHRoaXMuc2VsZWN0YWJsZSA9IG51bGw7XG4gICAgICAgIHRoaXMuaW52ZW50b3J5VmlldyA9IG51bGw7XG4gICAgICAgIHRoaXMuY29udHJvbGxlciA9IGNvbnRyb2xsZXI7XG4gICAgICAgIHRoaXMuaGVybyA9IGhlcm87XG4gICAgICAgIHRoaXMubnBjID0gbnBjO1xuICAgIH1cbiAgICBpbml0KCkge1xuICAgICAgICB0aGlzLmJhY2tncm91bmQgPSBuZXcgUElYSS5HcmFwaGljcygpO1xuICAgICAgICB0aGlzLnNlbGVjdGFibGUgPSBuZXcgU2VsZWN0YWJsZUdyaWQodGhpcy5jb250cm9sbGVyLmpveXN0aWNrKTtcbiAgICAgICAgbGV0IGNvbnRyb2xsZXI7XG4gICAgICAgIGlmICh0aGlzLm5wYykge1xuICAgICAgICAgICAgY29udHJvbGxlciA9IG5ldyBTZWxsaW5nSW52ZW50b3J5QWN0aW9uc0NvbnRyb2xsZXIodGhpcy5oZXJvLCB0aGlzLm5wYyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb250cm9sbGVyID0gbmV3IERlZmF1bHRJbnZlbnRvcnlBY3Rpb25zQ29udHJvbGxlcih0aGlzLmhlcm8uaW52ZW50b3J5KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmludmVudG9yeVZpZXcgPSBuZXcgSW52ZW50b3J5Vmlldyh0aGlzLmhlcm8uaW52ZW50b3J5LCBjb250cm9sbGVyLCB0aGlzLnNlbGVjdGFibGUsIDApO1xuICAgICAgICB0aGlzLmludmVudG9yeVZpZXcucG9zaXRpb24uc2V0KFNpemVzLnVpTWFyZ2luLCBTaXplcy51aU1hcmdpbik7XG4gICAgICAgIHRoaXMuaW52ZW50b3J5Vmlldy5jYWxjdWxhdGVCb3VuZHMoKTtcbiAgICAgICAgdGhpcy5pbnZlbnRvcnlWaWV3LnpJbmRleCA9IDE7XG4gICAgICAgIGNvbnN0IHdpZHRoID0gdGhpcy5pbnZlbnRvcnlWaWV3LndpZHRoICsgKFNpemVzLnVpTWFyZ2luIDw8IDEpO1xuICAgICAgICBjb25zdCBoZWlnaHQgPSB0aGlzLmludmVudG9yeVZpZXcuaGVpZ2h0ICsgKFNpemVzLnVpTWFyZ2luIDw8IDEpO1xuICAgICAgICB0aGlzLmJhY2tncm91bmRcbiAgICAgICAgICAgIC5iZWdpbkZpbGwoMHgwMDAwMDApXG4gICAgICAgICAgICAuZHJhd1JlY3QoMCwgMCwgd2lkdGgsIGhlaWdodClcbiAgICAgICAgICAgIC5lbmRGaWxsKCk7XG4gICAgICAgIHRoaXMuYmFja2dyb3VuZC56SW5kZXggPSAwO1xuICAgICAgICB0aGlzLmNvbnRhaW5lciA9IG5ldyBQSVhJLkNvbnRhaW5lcigpO1xuICAgICAgICB0aGlzLmNvbnRhaW5lci5hZGRDaGlsZCh0aGlzLmJhY2tncm91bmQsIHRoaXMuaW52ZW50b3J5Vmlldyk7XG4gICAgICAgIHRoaXMuY29udGFpbmVyLnNvcnRDaGlsZHJlbigpO1xuICAgICAgICB0aGlzLmNvbnRhaW5lci5wb3NpdGlvbi5zZXQoKHRoaXMuY29udHJvbGxlci5hcHAuc2NyZWVuLndpZHRoID4+IDEpIC0gKHdpZHRoID4+IDEpLCAodGhpcy5jb250cm9sbGVyLmFwcC5zY3JlZW4uaGVpZ2h0ID4+IDEpIC0gKGhlaWdodCA+PiAxKSk7XG4gICAgICAgIHRoaXMuY29udHJvbGxlci5zdGFnZS5hZGRDaGlsZCh0aGlzLmNvbnRhaW5lcik7XG4gICAgICAgIHRoaXMuY29udHJvbGxlci5hcHAudGlja2VyLmFkZCh0aGlzLmhhbmRsZUlucHV0LCB0aGlzKTtcbiAgICB9XG4gICAgZGVzdHJveSgpIHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2M7XG4gICAgICAgIHRoaXMuY29udHJvbGxlci5hcHAudGlja2VyLnJlbW92ZSh0aGlzLmhhbmRsZUlucHV0LCB0aGlzKTtcbiAgICAgICAgKF9hID0gdGhpcy5jb250YWluZXIpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5kZXN0cm95KCk7XG4gICAgICAgIHRoaXMuY29udGFpbmVyID0gbnVsbDtcbiAgICAgICAgKF9iID0gdGhpcy5iYWNrZ3JvdW5kKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuZGVzdHJveSgpO1xuICAgICAgICB0aGlzLmJhY2tncm91bmQgPSBudWxsO1xuICAgICAgICAoX2MgPSB0aGlzLmludmVudG9yeVZpZXcpID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYy5kZXN0cm95KCk7XG4gICAgICAgIHRoaXMuaW52ZW50b3J5VmlldyA9IG51bGw7XG4gICAgICAgIHRoaXMuc2VsZWN0YWJsZSA9IG51bGw7XG4gICAgfVxuICAgIGhhbmRsZUlucHV0KCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGNvbnN0IGpveXN0aWNrID0gdGhpcy5jb250cm9sbGVyLmpveXN0aWNrO1xuICAgICAgICBpZiAoam95c3RpY2suaW52ZW50b3J5Lm9uY2UoKSkge1xuICAgICAgICAgICAgdGhpcy5jb250cm9sbGVyLmNsb3NlTW9kYWwoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAoX2EgPSB0aGlzLnNlbGVjdGFibGUpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5oYW5kbGVJbnB1dCgpO1xuICAgIH1cbn1cbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/inventory.modal.ts\n");

/***/ }),

/***/ "./src/inventory.ts":
/*!**************************!*\
  !*** ./src/inventory.ts ***!
  \**************************/
/*! exports provided: Inventory, EquipmentInventory, BeltInventory, BackpackInventory, InventoryCell, BaseInventoryActionsController, DefaultInventoryActionsController, SellingInventoryActionsController, InventoryView, EquipmentInventoryView, BeltInventoryView, BackpackInventoryView, InventoryCellView, InventoryCellCardView, InventoryCellActionsView */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Inventory\", function() { return Inventory; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"EquipmentInventory\", function() { return EquipmentInventory; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BeltInventory\", function() { return BeltInventory; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BackpackInventory\", function() { return BackpackInventory; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"InventoryCell\", function() { return InventoryCell; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BaseInventoryActionsController\", function() { return BaseInventoryActionsController; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"DefaultInventoryActionsController\", function() { return DefaultInventoryActionsController; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SellingInventoryActionsController\", function() { return SellingInventoryActionsController; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"InventoryView\", function() { return InventoryView; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"EquipmentInventoryView\", function() { return EquipmentInventoryView; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BeltInventoryView\", function() { return BeltInventoryView; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"BackpackInventoryView\", function() { return BackpackInventoryView; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"InventoryCellView\", function() { return InventoryCellView; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"InventoryCellCardView\", function() { return InventoryCellCardView; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"InventoryCellActionsView\", function() { return InventoryCellActionsView; });\n/* harmony import */ var _drop__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./drop */ \"./src/drop.ts\");\n/* harmony import */ var _observable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./observable */ \"./src/observable.ts\");\n/* harmony import */ var _ui__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ui */ \"./src/ui.ts\");\n/* harmony import */ var pixi_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! pixi.js */ \"pixi.js\");\n/* harmony import */ var pixi_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(pixi_js__WEBPACK_IMPORTED_MODULE_3__);\n\n\n\n\nconst CELL_SIZE = 32;\nconst BUTTON_WIDTH = 170;\nconst BUTTON_HEIGHT = 32;\nclass Inventory {\n    constructor(hero) {\n        this._drop = new _observable__WEBPACK_IMPORTED_MODULE_1__[\"EventPublisher\"]();\n        this.equipment = new EquipmentInventory(hero, this._drop);\n        this.belt = new BeltInventory(hero, this._drop);\n        this.backpack = new BackpackInventory(hero, this._drop);\n    }\n    get drop() {\n        return this._drop;\n    }\n    stack(item) {\n        return this.belt.stack(item) || this.backpack.stack(item);\n    }\n    set(item) {\n        return this.belt.set(item) || this.backpack.set(item);\n    }\n    add(item) {\n        return this.stack(item) || this.set(item);\n    }\n}\nclass EquipmentInventory {\n    constructor(hero, drop) {\n        this.weapon = new InventoryCell(hero, 1, (item) => item instanceof _drop__WEBPACK_IMPORTED_MODULE_0__[\"Weapon\"], drop, this);\n    }\n}\nclass BeltInventory {\n    constructor(hero, drop) {\n        this.length = 10;\n        this.cells = [];\n        for (let i = 0; i < 10; i++) {\n            this.cells[i] = new InventoryCell(hero, 3, () => true, drop, this);\n        }\n    }\n    cell(index) {\n        return this.cells[index];\n    }\n    stack(item) {\n        for (let i = 0; i < this.cells.length; i++) {\n            if (this.cells[i].stack(item)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    set(item) {\n        for (let i = 0; i < this.cells.length; i++) {\n            if (this.cells[i].set(item)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    add(item) {\n        return this.stack(item) || this.set(item);\n    }\n}\nclass BackpackInventory {\n    constructor(hero, drop) {\n        this.width = 10;\n        this.height = 5;\n        this.cells = [];\n        for (let y = 0; y < this.height; y++) {\n            this.cells.push([]);\n            for (let x = 0; x < this.width; x++) {\n                this.cells[y][x] = new InventoryCell(hero, 3, () => true, drop, this);\n            }\n        }\n    }\n    cell(x, y) {\n        return this.cells[y][x];\n    }\n    stack(item) {\n        for (let y = 0; y < this.height; y++) {\n            for (let x = 0; x < this.width; x++) {\n                if (this.cells[y][x].stack(item)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    set(item) {\n        for (let y = 0; y < this.height; y++) {\n            for (let x = 0; x < this.width; x++) {\n                if (this.cells[y][x].set(item)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    add(item) {\n        return this.stack(item) || this.set(item);\n    }\n}\nclass InventoryCell {\n    constructor(hero, maxInStack, predicate, drop, parent) {\n        this._item = new _observable__WEBPACK_IMPORTED_MODULE_1__[\"ObservableVar\"](null);\n        this._count = new _observable__WEBPACK_IMPORTED_MODULE_1__[\"ObservableVar\"](0);\n        this._hero = hero;\n        this._maxInStack = maxInStack;\n        this._predicate = predicate;\n        this._drop = drop;\n        this.parent = parent;\n    }\n    get item() {\n        return this._item;\n    }\n    get count() {\n        return this._count;\n    }\n    supports(item) {\n        return this._predicate(item);\n    }\n    stack(item) {\n        var _a;\n        if (((_a = this._item.get()) === null || _a === void 0 ? void 0 : _a.same(item)) && this._count.get() < this._maxInStack) {\n            this._count.update(c => c + 1);\n            return true;\n        }\n        return false;\n    }\n    ;\n    clear() {\n        if (this._item.get()) {\n            this._item.set(null);\n            this._count.set(0);\n        }\n    }\n    set(item) {\n        if (!this._item.get() && this._predicate(item)) {\n            this._item.set(item);\n            this._count.set(1);\n            return true;\n        }\n        return false;\n    }\n    ;\n    decrease() {\n        this._count.update(c => Math.max(0, c - 1));\n        if (this._count.get() <= 0) {\n            this._item.set(null);\n            this._count.set(0);\n        }\n    }\n    get isEmpty() {\n        return this._item.get() == null;\n    }\n    use() {\n        const item = this._item.get();\n        if (item) {\n            item.use(this, this._hero);\n            return true;\n        }\n        return false;\n    }\n    ;\n    equip() {\n        const item = this._item.get();\n        const weapon = this._hero.inventory.equipment.weapon;\n        if (item && weapon.supports(item)) {\n            const prev = weapon.item.get();\n            weapon.clear();\n            weapon.set(item);\n            this.clear();\n            if (prev) {\n                this.set(prev);\n            }\n        }\n    }\n    toBelt() {\n        const item = this._item.get();\n        while (item && !this.isEmpty) {\n            if (this._hero.inventory.belt.add(item)) {\n                this.decrease();\n            }\n            else {\n                break;\n            }\n        }\n    }\n    toBackpack() {\n        const item = this._item.get();\n        while (item && !this.isEmpty) {\n            if (this._hero.inventory.backpack.add(item)) {\n                this.decrease();\n            }\n            else {\n                break;\n            }\n        }\n    }\n    drop() {\n        const drop = this._item.get();\n        const count = this._count.get();\n        if (drop) {\n            this._item.set(null);\n            this._count.set(0);\n            this._drop.send([drop, count]);\n        }\n    }\n}\nclass BaseInventoryActionsController {\n    constructor(inventory) {\n        this.inventory = inventory;\n    }\n    handle(view, item) {\n        view.removeButtons();\n        if (item) {\n            this.basicButtons(view, item);\n            this.additionalButtons(view, item);\n        }\n    }\n    basicButtons(view, item) {\n        const cell = view.cell;\n        if (cell.parent instanceof BeltInventory || cell.parent instanceof BackpackInventory) {\n            if (this.inventory.equipment.weapon.supports(item)) {\n                view.addButton(\"Equip\", () => cell.equip());\n            }\n            else {\n                view.addButton(\"Use item\", () => cell.use());\n            }\n        }\n        if (!(cell.parent instanceof BeltInventory))\n            view.addButton(\"To belt\", () => cell.toBelt());\n        if (!(cell.parent instanceof BackpackInventory))\n            view.addButton(\"To backpack\", () => cell.toBackpack());\n        view.addButton(\"Drop\", () => cell.drop());\n    }\n}\nclass DefaultInventoryActionsController extends BaseInventoryActionsController {\n    constructor(inventory) {\n        super(inventory);\n    }\n    additionalButtons(_view, _item) {\n    }\n}\nclass SellingInventoryActionsController extends BaseInventoryActionsController {\n    constructor(hero, npc) {\n        super(hero.inventory);\n        this.hero = hero;\n        this.npc = npc;\n    }\n    additionalButtons(view, item) {\n        const price = item.info().price;\n        if (price) {\n            view.addButton('Sell', () => {\n                view.cell.decrease();\n                this.hero.addCoins(price);\n            });\n        }\n    }\n}\nclass InventoryView extends pixi_js__WEBPACK_IMPORTED_MODULE_3__[\"Container\"] {\n    constructor(inventory, controller, selectable, selectableOffset) {\n        super();\n        this.selectable = selectable;\n        this.selectableOffset = selectableOffset;\n        const layout = new _ui__WEBPACK_IMPORTED_MODULE_2__[\"Layout\"]();\n        this.equipment = new EquipmentInventoryView(inventory.equipment);\n        this.equipment.position.set(layout.x, layout.y);\n        this.equipment.calculateBounds();\n        layout.offset(0, this.equipment.height);\n        layout.offset(0, _ui__WEBPACK_IMPORTED_MODULE_2__[\"Sizes\"].uiMargin);\n        selectable.set(selectableOffset, 0, this.equipment.weapon, () => this.show(inventory.equipment.weapon));\n        selectable.merge(selectableOffset, 0, 10, 1);\n        this.belt = new BeltInventoryView(inventory.belt);\n        this.belt.position.set(layout.x, layout.y);\n        this.belt.calculateBounds();\n        layout.offset(0, this.belt.height);\n        layout.offset(0, _ui__WEBPACK_IMPORTED_MODULE_2__[\"Sizes\"].uiMargin);\n        for (let i = 0; i < this.belt.length; i++) {\n            const cell = inventory.belt.cell(i);\n            this.selectable.set(selectableOffset + i, 1, this.belt.cell(i), () => this.show(cell));\n        }\n        this.backpack = new BackpackInventoryView(inventory.backpack);\n        this.backpack.position.set(layout.x, layout.y);\n        this.backpack.calculateBounds();\n        layout.offset(0, this.backpack.height);\n        layout.offset(0, _ui__WEBPACK_IMPORTED_MODULE_2__[\"Sizes\"].uiMargin);\n        for (let x = 0; x < inventory.backpack.width; x++) {\n            for (let y = 0; y < inventory.backpack.height; y++) {\n                const cell = inventory.backpack.cell(x, y);\n                this.selectable.set(selectableOffset + x, y + 2, this.backpack.cell(x, y), () => this.show(cell));\n            }\n        }\n        this.actions = new InventoryCellActionsView(this.selectable, this.selectableOffset, controller);\n        this.actions.position.set(layout.x, layout.y);\n        layout.offset(0, BUTTON_HEIGHT);\n        layout.offset(0, _ui__WEBPACK_IMPORTED_MODULE_2__[\"Sizes\"].uiMargin);\n        layout.offset(0, BUTTON_HEIGHT);\n        const totalHeight = layout.y;\n        layout.reset();\n        layout.offset(this.backpack.width, 0);\n        layout.offset(_ui__WEBPACK_IMPORTED_MODULE_2__[\"Sizes\"].uiMargin, 0);\n        this.card = new InventoryCellCardView({\n            width: 400,\n            height: totalHeight\n        });\n        this.card.position.set(layout.x, layout.y);\n        this.card.calculateBounds();\n        this.addChild(this.equipment, this.belt, this.backpack, this.card, this.actions);\n    }\n    destroy() {\n        super.destroy();\n        this.equipment.destroy();\n        this.belt.destroy();\n        this.backpack.destroy();\n        this.card.destroy();\n    }\n    show(cell) {\n        this.card.publisher = cell.item;\n        this.actions.cell = cell;\n    }\n}\nclass EquipmentInventoryView extends pixi_js__WEBPACK_IMPORTED_MODULE_3__[\"Container\"] {\n    constructor(equipment) {\n        super();\n        this.equipment = equipment;\n        const background = new pixi_js__WEBPACK_IMPORTED_MODULE_3__[\"Graphics\"]()\n            .beginFill(_ui__WEBPACK_IMPORTED_MODULE_2__[\"Colors\"].uiBackground, 0.3)\n            .drawRect(0, 0, CELL_SIZE + (_ui__WEBPACK_IMPORTED_MODULE_2__[\"Sizes\"].uiBorder << 1), CELL_SIZE + (_ui__WEBPACK_IMPORTED_MODULE_2__[\"Sizes\"].uiBorder << 1))\n            .endFill();\n        super.addChild(background);\n        this.weapon = new InventoryCellView({\n            item: this.equipment.weapon.item,\n            count: new _observable__WEBPACK_IMPORTED_MODULE_1__[\"ObservableVar\"](null)\n        });\n        this.weapon.position.set(_ui__WEBPACK_IMPORTED_MODULE_2__[\"Sizes\"].uiBorder, _ui__WEBPACK_IMPORTED_MODULE_2__[\"Sizes\"].uiBorder);\n        super.addChild(this.weapon);\n    }\n}\nclass BeltInventoryView extends pixi_js__WEBPACK_IMPORTED_MODULE_3__[\"Container\"] {\n    constructor(inventory) {\n        super();\n        this.inventory = inventory;\n        const background = new pixi_js__WEBPACK_IMPORTED_MODULE_3__[\"Graphics\"]()\n            .beginFill(_ui__WEBPACK_IMPORTED_MODULE_2__[\"Colors\"].uiBackground, 0.3)\n            .drawRect(0, 0, _ui__WEBPACK_IMPORTED_MODULE_2__[\"Sizes\"].uiBorder + (CELL_SIZE + _ui__WEBPACK_IMPORTED_MODULE_2__[\"Sizes\"].uiBorder) * inventory.length, CELL_SIZE + (_ui__WEBPACK_IMPORTED_MODULE_2__[\"Sizes\"].uiBorder << 1))\n            .endFill();\n        super.addChild(background);\n        this.cells = [];\n        for (let i = 0; i < inventory.length; i++) {\n            const cell = inventory.cell(i);\n            const view = new InventoryCellView({\n                item: cell.item,\n                count: cell.count,\n            });\n            view.position.set(_ui__WEBPACK_IMPORTED_MODULE_2__[\"Sizes\"].uiBorder + (CELL_SIZE + _ui__WEBPACK_IMPORTED_MODULE_2__[\"Sizes\"].uiBorder) * i, _ui__WEBPACK_IMPORTED_MODULE_2__[\"Sizes\"].uiBorder);\n            this.cells.push(view);\n            super.addChild(view);\n        }\n    }\n    get length() {\n        return this.inventory.length;\n    }\n    cell(index) {\n        return this.cells[index];\n    }\n}\nclass BackpackInventoryView extends pixi_js__WEBPACK_IMPORTED_MODULE_3__[\"Container\"] {\n    constructor(inventory) {\n        super();\n        const background = new pixi_js__WEBPACK_IMPORTED_MODULE_3__[\"Graphics\"]()\n            .beginFill(_ui__WEBPACK_IMPORTED_MODULE_2__[\"Colors\"].uiBackground, 0.3)\n            .drawRect(0, 0, _ui__WEBPACK_IMPORTED_MODULE_2__[\"Sizes\"].uiBorder + (CELL_SIZE + _ui__WEBPACK_IMPORTED_MODULE_2__[\"Sizes\"].uiBorder) * inventory.width, _ui__WEBPACK_IMPORTED_MODULE_2__[\"Sizes\"].uiBorder + (CELL_SIZE + _ui__WEBPACK_IMPORTED_MODULE_2__[\"Sizes\"].uiBorder) * inventory.height)\n            .endFill();\n        super.addChild(background);\n        this.cells = [];\n        for (let y = 0; y < inventory.height; y++) {\n            this.cells.push([]);\n            for (let x = 0; x < inventory.width; x++) {\n                const cell = inventory.cell(x, y);\n                const view = new InventoryCellView({\n                    item: cell.item,\n                    count: cell.count,\n                });\n                view.position.set(_ui__WEBPACK_IMPORTED_MODULE_2__[\"Sizes\"].uiBorder + (CELL_SIZE + _ui__WEBPACK_IMPORTED_MODULE_2__[\"Sizes\"].uiBorder) * x, _ui__WEBPACK_IMPORTED_MODULE_2__[\"Sizes\"].uiBorder + (CELL_SIZE + _ui__WEBPACK_IMPORTED_MODULE_2__[\"Sizes\"].uiBorder) * y);\n                this.cells[y][x] = view;\n                super.addChild(view);\n            }\n        }\n    }\n    cell(x, y) {\n        return this.cells[y][x];\n    }\n}\nclass InventoryCellView extends pixi_js__WEBPACK_IMPORTED_MODULE_3__[\"Container\"] {\n    constructor(options) {\n        super();\n        this.sprite = null;\n        this._selected = false;\n        this._item = options.item;\n        this._count = options.count;\n        this._alpha = options.alpha || 0.3;\n        this.background = new pixi_js__WEBPACK_IMPORTED_MODULE_3__[\"Graphics\"]();\n        this.selected = false;\n        this.counter = new pixi_js__WEBPACK_IMPORTED_MODULE_3__[\"BitmapText\"](\"0\", { font: { name: \"alagard\", size: 16 } });\n        this.counter.anchor = new pixi_js__WEBPACK_IMPORTED_MODULE_3__[\"Point\"](1, 0);\n        this.counter.position.set(CELL_SIZE - _ui__WEBPACK_IMPORTED_MODULE_2__[\"Sizes\"].uiBorder, 0);\n        super.addChild(this.background, this.counter);\n        this._item.subscribe(this.updateItem, this);\n        this._count.subscribe(this.updateCounter, this);\n    }\n    destroy() {\n        super.destroy();\n        this._item.unsubscribe(this.updateItem, this);\n        this._count.unsubscribe(this.updateCounter, this);\n    }\n    get selected() {\n        return this._selected;\n    }\n    set selected(selected) {\n        this._selected = selected;\n        this.background\n            .clear()\n            .beginFill(selected ? _ui__WEBPACK_IMPORTED_MODULE_2__[\"Colors\"].uiSelected : _ui__WEBPACK_IMPORTED_MODULE_2__[\"Colors\"].uiNotSelected, this._alpha)\n            .drawRect(0, 0, CELL_SIZE, CELL_SIZE)\n            .endFill();\n    }\n    updateCounter(counter) {\n        if (counter === null || counter === 0) {\n            this.counter.text = \"\";\n        }\n        else {\n            this.counter.text = counter.toString();\n        }\n    }\n    updateItem(item) {\n        var _a;\n        (_a = this.sprite) === null || _a === void 0 ? void 0 : _a.destroy();\n        this.sprite = null;\n        if (item) {\n            this.sprite = item.sprite();\n            const max = CELL_SIZE - (_ui__WEBPACK_IMPORTED_MODULE_2__[\"Sizes\"].uiBorder << 1);\n            const scale = max / Math.max(this.sprite.width, this.sprite.height);\n            this.sprite.scale.set(scale, scale);\n            this.sprite.anchor.set(0.5, 0);\n            this.sprite.position.set(CELL_SIZE >> 1, _ui__WEBPACK_IMPORTED_MODULE_2__[\"Sizes\"].uiBorder);\n            super.addChild(this.sprite);\n        }\n    }\n}\nclass InventoryCellCardView extends pixi_js__WEBPACK_IMPORTED_MODULE_3__[\"Container\"] {\n    constructor(options) {\n        super();\n        this._sprite = null;\n        this._publisher = null;\n        this._width = options.width || 400;\n        this._height = options.height || 400;\n        this._sprite_size = 128 + (_ui__WEBPACK_IMPORTED_MODULE_2__[\"Sizes\"].uiMargin << 1);\n        const background = new pixi_js__WEBPACK_IMPORTED_MODULE_3__[\"Graphics\"]()\n            .beginFill(_ui__WEBPACK_IMPORTED_MODULE_2__[\"Colors\"].uiBackground, 0.3)\n            .drawRect(0, 0, this._width, this._height)\n            .endFill()\n            .beginFill(_ui__WEBPACK_IMPORTED_MODULE_2__[\"Colors\"].uiNotSelected, 0.3)\n            .drawRect(_ui__WEBPACK_IMPORTED_MODULE_2__[\"Sizes\"].uiMargin, _ui__WEBPACK_IMPORTED_MODULE_2__[\"Sizes\"].uiMargin + 32 + _ui__WEBPACK_IMPORTED_MODULE_2__[\"Sizes\"].uiMargin, this._sprite_size, this._sprite_size)\n            .endFill();\n        this._title = new pixi_js__WEBPACK_IMPORTED_MODULE_3__[\"BitmapText\"](\"\", { font: { name: \"alagard\", size: 32 } });\n        this._title.anchor = new pixi_js__WEBPACK_IMPORTED_MODULE_3__[\"Point\"](0.5, 0);\n        this._title.position.set(this._width >> 1, _ui__WEBPACK_IMPORTED_MODULE_2__[\"Sizes\"].uiMargin);\n        this._description = new pixi_js__WEBPACK_IMPORTED_MODULE_3__[\"BitmapText\"](\"\", { font: { name: \"alagard\", size: 16 } });\n        this._description.position.set(_ui__WEBPACK_IMPORTED_MODULE_2__[\"Sizes\"].uiMargin + this._sprite_size + _ui__WEBPACK_IMPORTED_MODULE_2__[\"Sizes\"].uiMargin, _ui__WEBPACK_IMPORTED_MODULE_2__[\"Sizes\"].uiMargin + 32 + _ui__WEBPACK_IMPORTED_MODULE_2__[\"Sizes\"].uiMargin);\n        super.addChild(background, this._title, this._description);\n    }\n    destroy() {\n        var _a;\n        super.destroy();\n        (_a = this._publisher) === null || _a === void 0 ? void 0 : _a.unsubscribe(this.handle, this);\n        this._publisher = null;\n    }\n    set publisher(publisher) {\n        var _a;\n        (_a = this._publisher) === null || _a === void 0 ? void 0 : _a.unsubscribe(this.handle, this);\n        this._publisher = null;\n        this._publisher = publisher;\n        this._publisher.subscribe(this.handle, this);\n    }\n    handle(drop) {\n        var _a;\n        (_a = this._sprite) === null || _a === void 0 ? void 0 : _a.destroy();\n        this._sprite = null;\n        this._title.text = \"\";\n        this._description.text = \"\";\n        if (drop) {\n            const sprite = this._sprite = drop.sprite();\n            super.addChild(sprite);\n            sprite.anchor = new pixi_js__WEBPACK_IMPORTED_MODULE_3__[\"Point\"](0.5, 0.5);\n            sprite.position.set(_ui__WEBPACK_IMPORTED_MODULE_2__[\"Sizes\"].uiMargin + (this._sprite_size >> 1), _ui__WEBPACK_IMPORTED_MODULE_2__[\"Sizes\"].uiMargin + (this._sprite_size >> 1) + 32 + _ui__WEBPACK_IMPORTED_MODULE_2__[\"Sizes\"].uiMargin);\n            const s_w = sprite.width;\n            const s_h = sprite.height;\n            const max_size = this._sprite_size - _ui__WEBPACK_IMPORTED_MODULE_2__[\"Sizes\"].uiMargin;\n            if (s_w > s_h) {\n                this._sprite.width = max_size;\n                this._sprite.height = (max_size / s_w) * s_h;\n            }\n            else {\n                this._sprite.height = max_size;\n                this._sprite.width = (max_size / s_h) * s_w;\n            }\n            const info = drop.info();\n            this._title.text = info.name;\n            const text = [];\n            if (info.health)\n                text.push(`health: ${info.health}`);\n            if (info.speed)\n                text.push(`speed: ${info.speed * 100}%`);\n            if (info.distance)\n                text.push(`distance: ${info.distance}`);\n            if (info.damage)\n                text.push(`damage: ${info.damage}`);\n            if (info.price)\n                text.push(`price: ${info.price}$`);\n            this._description.text = text.join(\"\\n\");\n        }\n    }\n}\nclass InventoryCellActionsView extends pixi_js__WEBPACK_IMPORTED_MODULE_3__[\"Container\"] {\n    constructor(selectable, selectableOffset, controller) {\n        super();\n        this.buttons = [];\n        this._cell = null;\n        this.selectable = selectable;\n        this.selectableOffset = selectableOffset;\n        this.controller = controller;\n    }\n    destroy() {\n        var _a;\n        super.destroy();\n        (_a = this._cell) === null || _a === void 0 ? void 0 : _a.item.unsubscribe(this.handle, this);\n        this._cell = null;\n        this.removeButtons();\n    }\n    set cell(cell) {\n        var _a;\n        (_a = this._cell) === null || _a === void 0 ? void 0 : _a.item.unsubscribe(this.handle, this);\n        this.removeButtons();\n        this._cell = cell;\n        this._cell.item.subscribe(this.handle, this);\n    }\n    get cell() {\n        return this._cell;\n    }\n    handle(item) {\n        this.controller.handle(this, item);\n    }\n    removeButtons() {\n        for (let [button, x, y] of this.buttons) {\n            this.selectable.unmerge(x, y);\n            this.selectable.remove(x, y);\n            button.destroy();\n        }\n        this.selectable.reset();\n        this.buttons.splice(0, this.buttons.length);\n    }\n    addButton(label, action) {\n        const total = this.buttons.length;\n        const row = total >> 1;\n        const cell = total % 2;\n        const merge_width = 5;\n        const selectableX = this.selectableOffset + (cell * merge_width);\n        const selectableY = 10 + row;\n        const button = new _ui__WEBPACK_IMPORTED_MODULE_2__[\"Button\"]({\n            label: label,\n            width: BUTTON_WIDTH,\n            height: BUTTON_HEIGHT,\n        });\n        button.position.set(cell * (BUTTON_WIDTH + _ui__WEBPACK_IMPORTED_MODULE_2__[\"Sizes\"].uiMargin), row * (BUTTON_HEIGHT + _ui__WEBPACK_IMPORTED_MODULE_2__[\"Sizes\"].uiMargin));\n        this.buttons.push([button, selectableX, selectableY]);\n        this.selectable.set(selectableX, selectableY, button, action);\n        this.selectable.merge(selectableX, selectableY, merge_width, 1);\n        this.addChild(button);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/inventory.ts\n");

/***/ }),

/***/ "./src/observable.ts":
/*!***************************!*\
  !*** ./src/observable.ts ***!
  \***************************/
/*! exports provided: ObservableVar, EventPublisher */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ObservableVar\", function() { return ObservableVar; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"EventPublisher\", function() { return EventPublisher; });\nclass ObservableVar {\n    constructor(value) {\n        this.listeners = [];\n        this.value = value;\n    }\n    set(value) {\n        this.value = value;\n        for (let i = this.listeners.length - 1; i >= 0; i--) {\n            let listener = this.listeners[i];\n            if (listener.gc) {\n                this.listeners.splice(i, 1);\n            }\n            else {\n                listener.send(this.value);\n            }\n        }\n    }\n    update(f) {\n        this.set(f(this.value));\n    }\n    get() {\n        return this.value;\n    }\n    subscribe(callback, context) {\n        const listener = new Listener(callback, context);\n        this.listeners.push(listener);\n        listener.send(this.value);\n    }\n    unsubscribe(callback, context) {\n        var _a;\n        (_a = this.listeners.find(l => l.matches(callback, context))) === null || _a === void 0 ? void 0 : _a.unsubscribe();\n    }\n}\nclass EventPublisher {\n    constructor() {\n        this.listeners = [];\n    }\n    send(value) {\n        for (let i = this.listeners.length - 1; i >= 0; i--) {\n            let listener = this.listeners[i];\n            if (listener.gc) {\n                this.listeners.splice(i, 1);\n            }\n            else {\n                listener.send(value);\n            }\n        }\n    }\n    subscribe(callback, context) {\n        const listener = new Listener(callback, context);\n        this.listeners.push(listener);\n    }\n    unsubscribe(callback, context) {\n        var _a;\n        (_a = this.listeners.find(l => l.matches(callback, context))) === null || _a === void 0 ? void 0 : _a.unsubscribe();\n    }\n}\nclass Listener {\n    constructor(callback, context) {\n        this._gc = false;\n        this.callback = callback;\n        this.context = context || null;\n    }\n    get gc() {\n        return this._gc;\n    }\n    matches(callback, context) {\n        return this.callback === callback && this.context === context;\n    }\n    send(value) {\n        if (this.context) {\n            this.callback.call(this.context, value);\n        }\n        else {\n            this.callback(value);\n        }\n    }\n    unsubscribe() {\n        this._gc = true;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvb2JzZXJ2YWJsZS50cy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9vYnNlcnZhYmxlLnRzP2MyYWMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNsYXNzIE9ic2VydmFibGVWYXIge1xuICAgIGNvbnN0cnVjdG9yKHZhbHVlKSB7XG4gICAgICAgIHRoaXMubGlzdGVuZXJzID0gW107XG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gICAgc2V0KHZhbHVlKSB7XG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgZm9yIChsZXQgaSA9IHRoaXMubGlzdGVuZXJzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICBsZXQgbGlzdGVuZXIgPSB0aGlzLmxpc3RlbmVyc1tpXTtcbiAgICAgICAgICAgIGlmIChsaXN0ZW5lci5nYykge1xuICAgICAgICAgICAgICAgIHRoaXMubGlzdGVuZXJzLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGxpc3RlbmVyLnNlbmQodGhpcy52YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgdXBkYXRlKGYpIHtcbiAgICAgICAgdGhpcy5zZXQoZih0aGlzLnZhbHVlKSk7XG4gICAgfVxuICAgIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWU7XG4gICAgfVxuICAgIHN1YnNjcmliZShjYWxsYmFjaywgY29udGV4dCkge1xuICAgICAgICBjb25zdCBsaXN0ZW5lciA9IG5ldyBMaXN0ZW5lcihjYWxsYmFjaywgY29udGV4dCk7XG4gICAgICAgIHRoaXMubGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgICAgICBsaXN0ZW5lci5zZW5kKHRoaXMudmFsdWUpO1xuICAgIH1cbiAgICB1bnN1YnNjcmliZShjYWxsYmFjaywgY29udGV4dCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIChfYSA9IHRoaXMubGlzdGVuZXJzLmZpbmQobCA9PiBsLm1hdGNoZXMoY2FsbGJhY2ssIGNvbnRleHQpKSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnVuc3Vic2NyaWJlKCk7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEV2ZW50UHVibGlzaGVyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5saXN0ZW5lcnMgPSBbXTtcbiAgICB9XG4gICAgc2VuZCh2YWx1ZSkge1xuICAgICAgICBmb3IgKGxldCBpID0gdGhpcy5saXN0ZW5lcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgIGxldCBsaXN0ZW5lciA9IHRoaXMubGlzdGVuZXJzW2ldO1xuICAgICAgICAgICAgaWYgKGxpc3RlbmVyLmdjKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5saXN0ZW5lcnMuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbGlzdGVuZXIuc2VuZCh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgc3Vic2NyaWJlKGNhbGxiYWNrLCBjb250ZXh0KSB7XG4gICAgICAgIGNvbnN0IGxpc3RlbmVyID0gbmV3IExpc3RlbmVyKGNhbGxiYWNrLCBjb250ZXh0KTtcbiAgICAgICAgdGhpcy5saXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gICAgfVxuICAgIHVuc3Vic2NyaWJlKGNhbGxiYWNrLCBjb250ZXh0KSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgKF9hID0gdGhpcy5saXN0ZW5lcnMuZmluZChsID0+IGwubWF0Y2hlcyhjYWxsYmFjaywgY29udGV4dCkpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EudW5zdWJzY3JpYmUoKTtcbiAgICB9XG59XG5jbGFzcyBMaXN0ZW5lciB7XG4gICAgY29uc3RydWN0b3IoY2FsbGJhY2ssIGNvbnRleHQpIHtcbiAgICAgICAgdGhpcy5fZ2MgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5jYWxsYmFjayA9IGNhbGxiYWNrO1xuICAgICAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0IHx8IG51bGw7XG4gICAgfVxuICAgIGdldCBnYygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2djO1xuICAgIH1cbiAgICBtYXRjaGVzKGNhbGxiYWNrLCBjb250ZXh0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNhbGxiYWNrID09PSBjYWxsYmFjayAmJiB0aGlzLmNvbnRleHQgPT09IGNvbnRleHQ7XG4gICAgfVxuICAgIHNlbmQodmFsdWUpIHtcbiAgICAgICAgaWYgKHRoaXMuY29udGV4dCkge1xuICAgICAgICAgICAgdGhpcy5jYWxsYmFjay5jYWxsKHRoaXMuY29udGV4dCwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5jYWxsYmFjayh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdW5zdWJzY3JpYmUoKSB7XG4gICAgICAgIHRoaXMuX2djID0gdHJ1ZTtcbiAgICB9XG59XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/observable.ts\n");

/***/ }),

/***/ "./src/resources.ts":
/*!**************************!*\
  !*** ./src/resources.ts ***!
  \**************************/
/*! exports provided: Resources */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Resources\", function() { return Resources; });\n/* harmony import */ var pixi_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! pixi.js */ \"pixi.js\");\n/* harmony import */ var pixi_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(pixi_js__WEBPACK_IMPORTED_MODULE_0__);\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try {\n            step(generator.next(value));\n        }\n        catch (e) {\n            reject(e);\n        } }\n        function rejected(value) { try {\n            step(generator[\"throw\"](value));\n        }\n        catch (e) {\n            reject(e);\n        } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\nclass Resources {\n    constructor(loader) {\n        this._textures = {};\n        this._animations = {};\n        this.loader = loader;\n    }\n    load() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield new Promise((resolve => {\n                this.loader\n                    .add('npc.json')\n                    .add('dungeon.json')\n                    .add('bonfire.json')\n                    .add('dungeon.rules.json')\n                    .add('dungeon.rules.4.json')\n                    .add('dungeon.design.json')\n                    .add('dialogs.json')\n                    .add('alagard', 'fonts/alagard.fnt')\n                    .add('big_egg_collect', 'sounds/big_egg_collect.{ogg,mp3}')\n                    .add('fruit_collect', 'sounds/fruit_collect.{ogg,mp3}')\n                    .add('select', 'sounds/select.{ogg,mp3}')\n                    .add('confirm', 'sounds/confirm.{ogg,mp3}')\n                    .add('cancel', 'sounds/cancel.{ogg,mp3}')\n                    .add('text', 'sounds/text.{ogg,mp3}')\n                    .add('boss_hit', 'sounds/boss_hit.{ogg,mp3}')\n                    .add('hit_damage', 'sounds/hit_damage.{ogg,mp3}')\n                    .load((_loader, resources) => {\n                    resources['fonts/alagard.png'].texture.baseTexture.scaleMode = pixi_js__WEBPACK_IMPORTED_MODULE_0__[\"SCALE_MODES\"].NEAREST;\n                    this.add(resources['npc.json'].spritesheet);\n                    this.add(resources['dungeon.json'].spritesheet);\n                    this.add(resources['bonfire.json'].spritesheet);\n                    resolve();\n                });\n            }));\n        });\n    }\n    add(spritesheet) {\n        spritesheet.baseTexture.scaleMode = pixi_js__WEBPACK_IMPORTED_MODULE_0__[\"SCALE_MODES\"].NEAREST;\n        for (let name of Object.keys(spritesheet.textures)) {\n            this._textures[name] = spritesheet.textures[name];\n        }\n        for (let name of Object.keys(spritesheet.animations)) {\n            this._animations[name] = spritesheet.animations[name];\n        }\n    }\n    get textures() {\n        return Object.keys(this._textures);\n    }\n    get animations() {\n        return Object.keys(this._animations);\n    }\n    sprite(name) {\n        if (!this._textures[name]) {\n            throw `sprite not found: ${name}`;\n        }\n        const sprite = new pixi_js__WEBPACK_IMPORTED_MODULE_0__[\"Sprite\"](this._textures[name]);\n        sprite.name = name;\n        return sprite;\n    }\n    animated(name, autoUpdate = true) {\n        if (!this._animations[name]) {\n            throw `animation not found: ${name}`;\n        }\n        const sprite = new pixi_js__WEBPACK_IMPORTED_MODULE_0__[\"AnimatedSprite\"](this._animations[name], autoUpdate);\n        sprite.name = name;\n        return sprite;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvcmVzb3VyY2VzLnRzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL3Jlc291cmNlcy50cz9kODc5Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHtcbiAgICAgICAgICAgIHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgICB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHtcbiAgICAgICAgICAgIHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgICB9IH1cbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICAgIH0pO1xufTtcbmltcG9ydCAqIGFzIFBJWEkgZnJvbSAncGl4aS5qcyc7XG5leHBvcnQgY2xhc3MgUmVzb3VyY2VzIHtcbiAgICBjb25zdHJ1Y3Rvcihsb2FkZXIpIHtcbiAgICAgICAgdGhpcy5fdGV4dHVyZXMgPSB7fTtcbiAgICAgICAgdGhpcy5fYW5pbWF0aW9ucyA9IHt9O1xuICAgICAgICB0aGlzLmxvYWRlciA9IGxvYWRlcjtcbiAgICB9XG4gICAgbG9hZCgpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIHJldHVybiB5aWVsZCBuZXcgUHJvbWlzZSgocmVzb2x2ZSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5sb2FkZXJcbiAgICAgICAgICAgICAgICAgICAgLmFkZCgnbnBjLmpzb24nKVxuICAgICAgICAgICAgICAgICAgICAuYWRkKCdkdW5nZW9uLmpzb24nKVxuICAgICAgICAgICAgICAgICAgICAuYWRkKCdib25maXJlLmpzb24nKVxuICAgICAgICAgICAgICAgICAgICAuYWRkKCdkdW5nZW9uLnJ1bGVzLmpzb24nKVxuICAgICAgICAgICAgICAgICAgICAuYWRkKCdkdW5nZW9uLnJ1bGVzLjQuanNvbicpXG4gICAgICAgICAgICAgICAgICAgIC5hZGQoJ2R1bmdlb24uZGVzaWduLmpzb24nKVxuICAgICAgICAgICAgICAgICAgICAuYWRkKCdkaWFsb2dzLmpzb24nKVxuICAgICAgICAgICAgICAgICAgICAuYWRkKCdhbGFnYXJkJywgJ2ZvbnRzL2FsYWdhcmQuZm50JylcbiAgICAgICAgICAgICAgICAgICAgLmFkZCgnYmlnX2VnZ19jb2xsZWN0JywgJ3NvdW5kcy9iaWdfZWdnX2NvbGxlY3Que29nZyxtcDN9JylcbiAgICAgICAgICAgICAgICAgICAgLmFkZCgnZnJ1aXRfY29sbGVjdCcsICdzb3VuZHMvZnJ1aXRfY29sbGVjdC57b2dnLG1wM30nKVxuICAgICAgICAgICAgICAgICAgICAuYWRkKCdzZWxlY3QnLCAnc291bmRzL3NlbGVjdC57b2dnLG1wM30nKVxuICAgICAgICAgICAgICAgICAgICAuYWRkKCdjb25maXJtJywgJ3NvdW5kcy9jb25maXJtLntvZ2csbXAzfScpXG4gICAgICAgICAgICAgICAgICAgIC5hZGQoJ2NhbmNlbCcsICdzb3VuZHMvY2FuY2VsLntvZ2csbXAzfScpXG4gICAgICAgICAgICAgICAgICAgIC5hZGQoJ3RleHQnLCAnc291bmRzL3RleHQue29nZyxtcDN9JylcbiAgICAgICAgICAgICAgICAgICAgLmFkZCgnYm9zc19oaXQnLCAnc291bmRzL2Jvc3NfaGl0LntvZ2csbXAzfScpXG4gICAgICAgICAgICAgICAgICAgIC5hZGQoJ2hpdF9kYW1hZ2UnLCAnc291bmRzL2hpdF9kYW1hZ2Uue29nZyxtcDN9JylcbiAgICAgICAgICAgICAgICAgICAgLmxvYWQoKF9sb2FkZXIsIHJlc291cmNlcykgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXNvdXJjZXNbJ2ZvbnRzL2FsYWdhcmQucG5nJ10udGV4dHVyZS5iYXNlVGV4dHVyZS5zY2FsZU1vZGUgPSBQSVhJLlNDQUxFX01PREVTLk5FQVJFU1Q7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkKHJlc291cmNlc1snbnBjLmpzb24nXS5zcHJpdGVzaGVldCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkKHJlc291cmNlc1snZHVuZ2Vvbi5qc29uJ10uc3ByaXRlc2hlZXQpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZChyZXNvdXJjZXNbJ2JvbmZpcmUuanNvbiddLnNwcml0ZXNoZWV0KTtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgYWRkKHNwcml0ZXNoZWV0KSB7XG4gICAgICAgIHNwcml0ZXNoZWV0LmJhc2VUZXh0dXJlLnNjYWxlTW9kZSA9IFBJWEkuU0NBTEVfTU9ERVMuTkVBUkVTVDtcbiAgICAgICAgZm9yIChsZXQgbmFtZSBvZiBPYmplY3Qua2V5cyhzcHJpdGVzaGVldC50ZXh0dXJlcykpIHtcbiAgICAgICAgICAgIHRoaXMuX3RleHR1cmVzW25hbWVdID0gc3ByaXRlc2hlZXQudGV4dHVyZXNbbmFtZV07XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgbmFtZSBvZiBPYmplY3Qua2V5cyhzcHJpdGVzaGVldC5hbmltYXRpb25zKSkge1xuICAgICAgICAgICAgdGhpcy5fYW5pbWF0aW9uc1tuYW1lXSA9IHNwcml0ZXNoZWV0LmFuaW1hdGlvbnNbbmFtZV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0IHRleHR1cmVzKCkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcy5fdGV4dHVyZXMpO1xuICAgIH1cbiAgICBnZXQgYW5pbWF0aW9ucygpIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHRoaXMuX2FuaW1hdGlvbnMpO1xuICAgIH1cbiAgICBzcHJpdGUobmFtZSkge1xuICAgICAgICBpZiAoIXRoaXMuX3RleHR1cmVzW25hbWVdKSB7XG4gICAgICAgICAgICB0aHJvdyBgc3ByaXRlIG5vdCBmb3VuZDogJHtuYW1lfWA7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc3ByaXRlID0gbmV3IFBJWEkuU3ByaXRlKHRoaXMuX3RleHR1cmVzW25hbWVdKTtcbiAgICAgICAgc3ByaXRlLm5hbWUgPSBuYW1lO1xuICAgICAgICByZXR1cm4gc3ByaXRlO1xuICAgIH1cbiAgICBhbmltYXRlZChuYW1lLCBhdXRvVXBkYXRlID0gdHJ1ZSkge1xuICAgICAgICBpZiAoIXRoaXMuX2FuaW1hdGlvbnNbbmFtZV0pIHtcbiAgICAgICAgICAgIHRocm93IGBhbmltYXRpb24gbm90IGZvdW5kOiAke25hbWV9YDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzcHJpdGUgPSBuZXcgUElYSS5BbmltYXRlZFNwcml0ZSh0aGlzLl9hbmltYXRpb25zW25hbWVdLCBhdXRvVXBkYXRlKTtcbiAgICAgICAgc3ByaXRlLm5hbWUgPSBuYW1lO1xuICAgICAgICByZXR1cm4gc3ByaXRlO1xuICAgIH1cbn1cbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/resources.ts\n");

/***/ }),

/***/ "./src/scene.ts":
/*!***********************************!*\
  !*** ./src/scene.ts + 38 modules ***!
  \***********************************/
/*! exports provided: SceneController */
/*! ModuleConcatenation bailout: Cannot concat with ./src/curves.ts because of ./src/inventory.modal.ts */
/*! ModuleConcatenation bailout: Cannot concat with ./src/drop.ts because of ./src/inventory.modal.ts */
/*! ModuleConcatenation bailout: Cannot concat with ./src/inventory.modal.ts (<- Module uses injected variables (PIXI)) */
/*! ModuleConcatenation bailout: Cannot concat with ./src/inventory.ts because of ./src/inventory.modal.ts */
/*! ModuleConcatenation bailout: Cannot concat with ./src/observable.ts because of ./src/inventory.modal.ts */
/*! ModuleConcatenation bailout: Cannot concat with ./src/ui.ts because of ./src/app.ts */
/*! ModuleConcatenation bailout: Cannot concat with external "PIXI" (<- Module is not an ECMAScript module) */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, \"SceneController\", function() { return /* binding */ scene_SceneController; });\n\n// CONCATENATED MODULE: ./src/rng.ts\nconst rng_m = 0x80000000;\nconst rng_a = 1103515245;\nconst rng_c = 12345;\nclass RNG {\n    constructor(seed = null) {\n        this.state = seed ? seed : Math.floor(Math.random() * (rng_m - 1));\n        console.log(\"seed\", this.state);\n    }\n    get boolean() {\n        return this.nextInt() % 1 != 0;\n    }\n    get int() {\n        this.state = (rng_a * this.state + rng_c) % rng_m;\n        return this.state;\n    }\n    get float() {\n        return this.int / (rng_m - 1);\n    }\n    nextInt() {\n        return this.int;\n    }\n    nextFloat() {\n        return this.float;\n    }\n    nextRange(start, end) {\n        const rangeSize = end - start;\n        const randomUnder1 = this.nextInt() / rng_m;\n        return start + Math.floor(randomUnder1 * rangeSize);\n    }\n    choice(array) {\n        return array[this.nextRange(0, array.length)];\n    }\n    nextNormal(min, max, skew) {\n        let u = 0, v = 0;\n        while (u === 0)\n            u = Math.random();\n        while (v === 0)\n            v = Math.random();\n        let num = Math.sqrt(-2.0 * Math.log(u)) * Math.cos(2.0 * Math.PI * v);\n        num = num / 10.0 + 0.5;\n        if (num > 1 || num < 0)\n            num = this.nextNormal(min, max, skew);\n        num = Math.pow(num, skew);\n        num *= max - min;\n        num += min;\n        return num;\n    }\n}\n\n// CONCATENATED MODULE: ./src/input.ts\nvar KeyBindState;\n(function (KeyBindState) {\n    KeyBindState[KeyBindState[\"Await\"] = 1] = \"Await\";\n    KeyBindState[KeyBindState[\"Pressed\"] = 2] = \"Pressed\";\n})(KeyBindState || (KeyBindState = {}));\nclass KeyBind {\n    constructor(code) {\n        this.code = code;\n        this.state = KeyBindState.Await;\n        this._triggered = false;\n        this._processed = true;\n    }\n    get triggered() {\n        return this._triggered;\n    }\n    once() {\n        if (!this._processed) {\n            this._processed = true;\n            return true;\n        }\n        else\n            return false;\n    }\n    keydown(e) {\n        if (e.code === this.code) {\n            e.preventDefault();\n            if (this.state === KeyBindState.Await) {\n                this._triggered = true;\n                this._processed = false;\n                this.state = KeyBindState.Pressed;\n            }\n        }\n    }\n    keyup(e) {\n        if (e.code === this.code) {\n            e.preventDefault();\n            if (this.state === KeyBindState.Pressed) {\n                this._triggered = false;\n                this.state = KeyBindState.Await;\n            }\n        }\n    }\n    reset() {\n        this._triggered = false;\n        this._processed = true;\n    }\n}\nclass Joystick {\n    constructor() {\n        this.moveUp = new KeyBind('KeyW');\n        this.moveLeft = new KeyBind('KeyA');\n        this.moveDown = new KeyBind('KeyS');\n        this.moveRight = new KeyBind('KeyD');\n        this.hit = new KeyBind('KeyF');\n        this.drop = new KeyBind('KeyQ');\n        this.inventory = new KeyBind('KeyI');\n        this.digit1 = new KeyBind('Digit1');\n        this.digit2 = new KeyBind('Digit2');\n        this.digit3 = new KeyBind('Digit3');\n        this.digit4 = new KeyBind('Digit4');\n        this.digit5 = new KeyBind('Digit5');\n        this.digit6 = new KeyBind('Digit6');\n        this.digit7 = new KeyBind('Digit7');\n        this.digit8 = new KeyBind('Digit8');\n        this.digit9 = new KeyBind('Digit9');\n        this.digit0 = new KeyBind('Digit0');\n        this.bindings = {};\n        for (const property of Object.getOwnPropertyNames(this)) {\n            const value = this[property];\n            if (value && value instanceof KeyBind) {\n                this.bindings[value.code] = value;\n            }\n        }\n        window.addEventListener(\"keydown\", this.keydown.bind(this));\n        window.addEventListener(\"keyup\", this.keyup.bind(this));\n    }\n    digit(num) {\n        switch (num) {\n            case 1:\n                return this.digit1;\n            case 2:\n                return this.digit2;\n            case 3:\n                return this.digit3;\n            case 4:\n                return this.digit4;\n            case 5:\n                return this.digit5;\n            case 6:\n                return this.digit6;\n            case 7:\n                return this.digit7;\n            case 8:\n                return this.digit8;\n            case 9:\n                return this.digit9;\n            case 0:\n                return this.digit0;\n        }\n    }\n    reset() {\n        var _a;\n        for (const code of Object.getOwnPropertyNames(this.bindings)) {\n            (_a = this.bindings[code]) === null || _a === void 0 ? void 0 : _a.reset();\n        }\n    }\n    keydown(e) {\n        var _a;\n        (_a = this.bindings[e.code]) === null || _a === void 0 ? void 0 : _a.keydown(e);\n    }\n    keyup(e) {\n        var _a;\n        (_a = this.bindings[e.code]) === null || _a === void 0 ? void 0 : _a.keyup(e);\n    }\n}\n\n// EXTERNAL MODULE: external \"PIXI\"\nvar external_PIXI_ = __webpack_require__(\"pixi.js\");\n\n// CONCATENATED MODULE: ./src/dead.scene.ts\n\nclass dead_scene_YouDeadScene {\n    constructor(controller) {\n        this.controller = controller;\n    }\n    init() {\n        this.renderTitle();\n        this.renderHelp();\n        this.controller.app.ticker.add(this.handleInput, this);\n    }\n    destroy() {\n        this.controller.app.ticker.remove(this.handleInput, this);\n        this.controller.stage.removeChildren();\n    }\n    pause() {\n    }\n    resume() {\n    }\n    renderTitle() {\n        let title = new external_PIXI_[\"BitmapText\"](\"ROGUELIKE DUNGEON\", { font: { name: 'alagard', size: 64 } });\n        title.anchor = new external_PIXI_[\"Point\"](0.5, 0);\n        title.position.set(this.controller.app.screen.width >> 1, 64);\n        this.controller.stage.addChild(title);\n        let youDead = new external_PIXI_[\"BitmapText\"](\"YOU DEAD\", { font: { name: \"alagard\", size: 128 }, tint: 0xFF0000 });\n        youDead.anchor = 0.5;\n        youDead.position.set(this.controller.app.screen.width >> 1, 256);\n        this.controller.stage.addChild(youDead);\n    }\n    renderHelp() {\n        const line = new external_PIXI_[\"BitmapText\"](\"PRESS F TO RESTART\", { font: { name: \"alagard\", size: 32 } });\n        line.anchor = 0.5;\n        line.position.set(this.controller.app.screen.width >> 1, this.controller.app.screen.height - 64);\n        this.controller.stage.addChild(line);\n    }\n    handleInput() {\n        if (this.controller.joystick.hit.once()) {\n            this.controller.selectHero();\n        }\n    }\n}\n\n// EXTERNAL MODULE: ./src/drop.ts\nvar src_drop = __webpack_require__(\"./src/drop.ts\");\n\n// CONCATENATED MODULE: ./src/shadow.caster.ts\n\nconst TILE_SIZE = 16;\nclass EndPoint {\n    constructor(point, segment) {\n        this.begin = false;\n        this.angle = 0.0;\n        this.point = point;\n        this.segment = segment;\n    }\n}\nvar SegmentType;\n(function (SegmentType) {\n    SegmentType[SegmentType[\"NORMAL\"] = 0] = \"NORMAL\";\n    SegmentType[SegmentType[\"TOP\"] = 1] = \"TOP\";\n})(SegmentType || (SegmentType = {}));\nclass Segment {\n    constructor(p1, p2, type) {\n        this.distance = 0;\n        this.p1 = new EndPoint(p1, this);\n        this.p2 = new EndPoint(p2, this);\n        this.type = type;\n    }\n    toString() {\n        const p1 = this.p1.point;\n        const p2 = this.p2.point;\n        return `[${p1.x}:${p1.y} - ${p2.x}:${p2.y}]`;\n    }\n}\nclass shadow_caster_ShadowCaster {\n    constructor() {\n        this.segments = [];\n        this.endpoints = [];\n        this.light = new external_PIXI_[\"Point\"](0, 0);\n        this.maxDistance = 500;\n    }\n    init() {\n        this.segments = [];\n        this.endpoints = [];\n        this.light = new external_PIXI_[\"Point\"](0.0, 0.0);\n    }\n    addSegment(x1, y1, x2, y2, type) {\n        const p1 = new external_PIXI_[\"Point\"](x1, y1);\n        const p2 = new external_PIXI_[\"Point\"](x2, y2);\n        const segment = new Segment(p1, p2, type);\n        this.segments.push(segment);\n        this.endpoints.push(segment.p1);\n        this.endpoints.push(segment.p2);\n    }\n    static deduplicated(queue) {\n        const deduplicated = [];\n        while (queue.length > 0) {\n            const segment = queue.pop();\n            const duplicates = [];\n            for (let i = 0; i < queue.length; i++) {\n                let next = queue[i];\n                let sameType = segment.type === next.type;\n                let equal = segment.p1.point.equals(next.p1.point) && segment.p2.point.equals(next.p2.point);\n                if (sameType && equal) {\n                    duplicates.push(i);\n                }\n            }\n            for (let i of duplicates) {\n                queue.splice(i, 1);\n            }\n            deduplicated.push(segment);\n        }\n        return deduplicated;\n    }\n    static connected(segments) {\n        const connected = [];\n        for (let i = 0; i < segments.length; i++) {\n            let segment = segments[i];\n            let has_p1 = false;\n            let has_p2 = false;\n            for (let j = 0; j < segments.length; j++) {\n                if (j == i)\n                    continue;\n                let test = segments[j];\n                if (segment.p1.point.equals(test.p1.point) && segment.p2.point.equals(test.p2.point))\n                    continue;\n                if (!has_p1 && (segment.p1.point.equals(test.p1.point) || segment.p1.point.equals(test.p2.point))) {\n                    has_p1 = true;\n                }\n                if (!has_p2 && (segment.p2.point.equals(test.p1.point) || segment.p2.point.equals(test.p2.point))) {\n                    has_p2 = true;\n                }\n                if (has_p1 && has_p2) {\n                    connected.push(segment);\n                    break;\n                }\n            }\n        }\n        return connected;\n    }\n    static filtered(segments) {\n        const filtered = [];\n        const queue = [];\n        const parts = [\n            [0, 12, 0, 16],\n            [5, 12, 5, 16],\n            [0, 12, 5, 12],\n            [0, 0, 5, 0],\n            [11, 12, 11, 16],\n            [11, 12, 16, 12],\n            [11, 0, 16, 0],\n        ];\n        const isPart = (segment) => {\n            const s_x1 = segment.p1.point.x % 16;\n            const s_y1 = segment.p1.point.y % 16;\n            const s_x2 = segment.p2.point.x - segment.p1.point.x + s_x1;\n            const s_y2 = segment.p2.point.y - segment.p1.point.y + s_y1;\n            for (let [x1, y1, x2, y2] of parts) {\n                if (x1 === s_x1 && y1 === s_y1 && x2 === s_x2 && y2 === s_y2) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        for (const segment of segments) {\n            if (isPart(segment)) {\n                queue.push(segment);\n            }\n            else {\n                filtered.push(segment);\n            }\n        }\n        while (queue.length > 0) {\n            const segment = queue.pop();\n            const rect = [segment];\n            const points = [segment.p1.point, segment.p2.point];\n            const counts = [1, 1];\n            const joins = [];\n            for (let t = 0; t < 2; t++) {\n                for (let i = 0; i < queue.length; i++) {\n                    if (joins.indexOf(i) >= 0)\n                        continue;\n                    let next = queue[i];\n                    const p1 = next.p1.point;\n                    const p2 = next.p2.point;\n                    let has_p1 = false;\n                    let has_p2 = false;\n                    for (let j = 0; j < points.length; j++) {\n                        let p = points[j];\n                        if (p.equals(p1)) {\n                            has_p1 = true;\n                            counts[j]++;\n                        }\n                        else if (p.equals(p2)) {\n                            has_p2 = true;\n                            counts[j]++;\n                        }\n                    }\n                    if (has_p1 || has_p2) {\n                        joins.push(i);\n                        rect.push(next);\n                        if (!has_p1) {\n                            points.push(p1);\n                            counts.push(1);\n                        }\n                        if (!has_p2) {\n                            points.push(p2);\n                            counts.push(1);\n                        }\n                    }\n                }\n            }\n            if (counts.length === 4 && counts.every(c => c === 2)) {\n                let bottom = 0;\n                let bottom_y = 0;\n                for (let i = 0; i < 4; i++) {\n                    let s = rect[i];\n                    if (s.p1.point.y === s.p2.point.y && s.p1.point.y > bottom_y) {\n                        bottom = i;\n                        bottom_y = s.p1.point.y;\n                    }\n                }\n                for (let i of joins.reverse())\n                    queue.splice(i, 1);\n                rect.splice(bottom, 1);\n                filtered.push(...rect);\n            }\n            else {\n                filtered.push(segment);\n            }\n        }\n        return filtered;\n    }\n    static merge(queue) {\n        const merged = [];\n        while (queue.length > 0) {\n            const first = queue.pop();\n            let pair = null;\n            for (let i = 0; i < queue.length; i++) {\n                let next = queue[i];\n                if (first.type === next.type) {\n                    if (first.p2.point.equals(next.p1.point)) {\n                        queue.splice(i, 1);\n                        pair = [first, next];\n                        break;\n                    }\n                    else if (next.p2.point.equals(first.p1.point)) {\n                        queue.splice(i, 1);\n                        pair = [next, first];\n                        break;\n                    }\n                }\n            }\n            if (pair) {\n                const [a, b] = pair;\n                queue.push(new Segment(a.p1.point, b.p2.point, a.type));\n            }\n            else {\n                merged.push(first);\n            }\n        }\n        return merged;\n    }\n    optimize() {\n        console.log(`optimize: segments=${this.segments.length}`);\n        const deduplicated = shadow_caster_ShadowCaster.deduplicated([...this.segments]);\n        console.log(`optimize: deduplicated=${deduplicated.length}`);\n        const connected = shadow_caster_ShadowCaster.connected(deduplicated);\n        console.log(`optimize: connected=${connected.length}`);\n        const filtered = shadow_caster_ShadowCaster.filtered(connected);\n        console.log(`optimize: filtered=${filtered.length}`);\n        const connected2 = shadow_caster_ShadowCaster.connected(filtered);\n        console.log(`optimize: connected = ${connected2.length}`);\n        const merged = [\n            ...shadow_caster_ShadowCaster.merge(connected2.filter(s => s.p1.point.x === s.p2.point.x)),\n            ...shadow_caster_ShadowCaster.merge(connected2.filter(s => s.p1.point.y === s.p2.point.y)),\n        ];\n        console.log(`optimize: merged=${merged.length}`);\n        this.segments = [];\n        this.endpoints = [];\n        for (const segment of merged) {\n            this.segments.push(segment);\n            this.endpoints.push(segment.p1);\n            this.endpoints.push(segment.p2);\n        }\n    }\n    setLightLocation(x, y, maxDistance) {\n        this.light.x = x;\n        this.light.y = y;\n        this.maxDistance = maxDistance;\n        this.endpoints = [];\n        for (const segment of this.segments) {\n            let dx = 0.5 * (segment.p1.point.x + segment.p2.point.x) - x;\n            let dy = 0.5 * (segment.p1.point.y + segment.p2.point.y) - y;\n            segment.distance = Math.sqrt(dx * dx + dy * dy);\n            if (segment.distance < maxDistance) {\n                segment.p1.angle = Math.atan2(segment.p1.point.y - y, segment.p1.point.x - x);\n                segment.p2.angle = Math.atan2(segment.p2.point.y - y, segment.p2.point.x - x);\n                let dAngle = segment.p2.angle - segment.p1.angle;\n                if (dAngle <= -Math.PI) {\n                    dAngle += 2 * Math.PI;\n                }\n                if (dAngle > Math.PI) {\n                    dAngle -= 2 * Math.PI;\n                }\n                segment.p1.begin = (dAngle > 0.0);\n                segment.p2.begin = !segment.p1.begin;\n                this.endpoints.push(segment.p1, segment.p2);\n            }\n        }\n        this.endpoints.sort(shadow_caster_ShadowCaster.compare);\n    }\n    static compare(a, b) {\n        if (a.angle > b.angle)\n            return 1;\n        if (a.angle < b.angle)\n            return -1;\n        if (!a.begin && b.begin)\n            return 1;\n        if (a.begin && !b.begin)\n            return -1;\n        return 0;\n    }\n    static leftOf(s, p) {\n        const cross = (s.p2.point.x - s.p1.point.x) * (p.y - s.p1.point.y)\n            - (s.p2.point.y - s.p1.point.y) * (p.x - s.p1.point.x);\n        return cross < 0;\n    }\n    static interpolate(p, q, f) {\n        return new external_PIXI_[\"Point\"](p.x * (1 - f) + q.x * f, p.y * (1 - f) + q.y * f);\n    }\n    static segmentInFrontOf(a, b, relativeTo) {\n        const A1 = shadow_caster_ShadowCaster.leftOf(a, shadow_caster_ShadowCaster.interpolate(b.p1.point, b.p2.point, 0.01));\n        const A2 = shadow_caster_ShadowCaster.leftOf(a, shadow_caster_ShadowCaster.interpolate(b.p2.point, b.p1.point, 0.01));\n        const A3 = shadow_caster_ShadowCaster.leftOf(a, relativeTo);\n        const B1 = shadow_caster_ShadowCaster.leftOf(b, shadow_caster_ShadowCaster.interpolate(a.p1.point, a.p2.point, 0.01));\n        const B2 = shadow_caster_ShadowCaster.leftOf(b, shadow_caster_ShadowCaster.interpolate(a.p2.point, a.p1.point, 0.01));\n        const B3 = shadow_caster_ShadowCaster.leftOf(b, relativeTo);\n        if (B1 == B2 && B2 != B3)\n            return true;\n        if (A1 == A2 && A2 == A3)\n            return true;\n        if (A1 == A2 && A2 != A3)\n            return false;\n        if (B1 == B2 && B2 == B3)\n            return false;\n        return false;\n    }\n    sweep() {\n        const output = [];\n        const open = [];\n        let beginAngle = 0.0;\n        for (let pass = 0; pass <= 2; pass++) {\n            for (const p of this.endpoints) {\n                let current_old = open.length === 0 ? null : open[0];\n                if (p.begin) {\n                    let i = 0;\n                    let node = open[i];\n                    while (node != null && shadow_caster_ShadowCaster.segmentInFrontOf(p.segment, node, this.light)) {\n                        i++;\n                        node = open[i];\n                    }\n                    if (node == null) {\n                        open.push(p.segment);\n                    }\n                    else {\n                        open.splice(i, 0, p.segment);\n                    }\n                }\n                else {\n                    for (let i = 0; i < open.length; i++) {\n                        if (open[i] === p.segment)\n                            open.splice(i, 1);\n                    }\n                }\n                let current_new = open.length === 0 ? null : open[0];\n                if (current_old !== current_new) {\n                    if (pass == 1) {\n                        this.addTriangle(beginAngle, p.angle, current_old, output);\n                    }\n                    beginAngle = p.angle;\n                }\n            }\n        }\n        return output;\n    }\n    static lineIntersection(p1, p2, p3, p4) {\n        const s = ((p4.x - p3.x) * (p1.y - p3.y) - (p4.y - p3.y) * (p1.x - p3.x))\n            / ((p4.y - p3.y) * (p2.x - p1.x) - (p4.x - p3.x) * (p2.y - p1.y));\n        return new external_PIXI_[\"Point\"](p1.x + s * (p2.x - p1.x), p1.y + s * (p2.y - p1.y));\n    }\n    addTriangle(angle1, angle2, segment, output) {\n        const angle1cos = Math.cos(angle1);\n        const angle1sin = Math.sin(angle1);\n        const angle2cos = Math.cos(angle2);\n        const angle2sin = Math.sin(angle2);\n        let p1 = this.light;\n        let p2 = new external_PIXI_[\"Point\"](this.light.x + angle1cos, this.light.y + angle1sin);\n        let p3 = new external_PIXI_[\"Point\"](0.0, 0.0);\n        let p4 = new external_PIXI_[\"Point\"](0.0, 0.0);\n        if (segment != null) {\n            p3.x = segment.p1.point.x;\n            p3.y = segment.p1.point.y;\n            p4.x = segment.p2.point.x;\n            p4.y = segment.p2.point.y;\n        }\n        else {\n            p3.x = this.light.x + angle1cos * this.maxDistance;\n            p3.y = this.light.y + angle1sin * this.maxDistance;\n            p4.x = this.light.x + angle2cos * this.maxDistance;\n            p4.y = this.light.y + angle2sin * this.maxDistance;\n        }\n        let pBegin = shadow_caster_ShadowCaster.lineIntersection(p3, p4, p1, p2);\n        pBegin.x = Math.round(pBegin.x);\n        pBegin.y = Math.round(pBegin.y);\n        p2.x = this.light.x + angle2cos;\n        p2.y = this.light.y + angle2sin;\n        let pEnd = shadow_caster_ShadowCaster.lineIntersection(p3, p4, p1, p2);\n        pEnd.x = Math.round(pEnd.x);\n        pEnd.y = Math.round(pEnd.y);\n        if (segment != null) {\n            switch (segment.type) {\n                case SegmentType.TOP:\n                    output.push(pBegin);\n                    output.push(new external_PIXI_[\"Point\"](pBegin.x, pBegin.y - TILE_SIZE));\n                    output.push(new external_PIXI_[\"Point\"](pEnd.x, pEnd.y - TILE_SIZE));\n                    output.push(pEnd);\n                    break;\n                case SegmentType.NORMAL:\n                    output.push(pBegin);\n                    output.push(pEnd);\n                    break;\n            }\n        }\n        else {\n            output.push(pBegin);\n            output.push(pEnd);\n        }\n    }\n    debug() {\n        const scale = 1;\n        const width = (80 * 16) * scale;\n        const height = (80 * 16) * scale;\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = width * scale;\n        canvas.height = height * scale;\n        const ctx = canvas.getContext(\"2d\");\n        ctx.fillRect(0, 0, width, height);\n        ctx.scale(scale, scale);\n        const segments = new Path2D();\n        for (let segment of this.segments) {\n            const start = segment.p1.point;\n            const end = segment.p2.point;\n            segments.moveTo(start.x, start.y);\n            segments.lineTo(end.x, end.y);\n        }\n        ctx.strokeStyle = 'rgba(255,0,0,0.5)';\n        ctx.stroke(segments);\n        console.log('%c ', `\n      font-size: 1px;\n      padding: ${canvas.height / 2}px ${canvas.width / 2}px;\n      background: no-repeat url(${canvas.toDataURL('image/png')});\n      background-size: ${canvas.width}px ${canvas.height}px;\n    `);\n    }\n}\n\n// CONCATENATED MODULE: ./src/dungeon.light.ts\n\n\nconst dungeon_light_TILE_SIZE = 16;\nclass dungeon_light_DungeonLight {\n    constructor(dungeon) {\n        this.lights = [];\n        this.wall_top = {\n            default: [\n                { x1: 0, y1: 12, x2: 16, y2: 12, type: SegmentType.NORMAL },\n                { x1: 0, y1: 12, x2: 0, y2: 16, type: SegmentType.NORMAL },\n                { x1: 16, y1: 12, x2: 16, y2: 16, type: SegmentType.NORMAL },\n            ],\n            top: [\n                { x1: 0, y1: 0, x2: 16, y2: 0, type: SegmentType.TOP },\n            ],\n            left: [\n                { x1: 0, y1: 0, x2: 0, y2: 12, type: SegmentType.NORMAL },\n            ],\n            right: [\n                { x1: 16, y1: 0, x2: 16, y2: 12, type: SegmentType.NORMAL },\n            ],\n            bottom: []\n        };\n        this.wall_side_left = {\n            default: [\n                { x1: 11, y1: 0, x2: 11, y2: 16, type: SegmentType.NORMAL },\n                { x1: 11, y1: 0, x2: 16, y2: 0, type: SegmentType.NORMAL },\n                { x1: 11, y1: 16, x2: 16, y2: 16, type: SegmentType.TOP },\n            ],\n            top: [\n                { x1: 0, y1: 0, x2: 11, y2: 0, type: SegmentType.TOP },\n            ],\n            left: [\n                { x1: 0, y1: 0, x2: 0, y2: 16, type: SegmentType.NORMAL },\n            ],\n            right: [],\n            bottom: [\n                { x1: 0, y1: 16, x2: 11, y2: 16, type: SegmentType.NORMAL },\n            ],\n        };\n        this.wall_side_right = {\n            default: [\n                { x1: 5, y1: 0, x2: 5, y2: 16, type: SegmentType.NORMAL },\n                { x1: 0, y1: 0, x2: 5, y2: 0, type: SegmentType.NORMAL },\n                { x1: 0, y1: 16, x2: 5, y2: 16, type: SegmentType.TOP },\n            ],\n            top: [\n                { x1: 5, y1: 0, x2: 16, y2: 0, type: SegmentType.TOP },\n            ],\n            left: [],\n            right: [\n                { x1: 16, y1: 0, x2: 16, y2: 16, type: SegmentType.NORMAL },\n            ],\n            bottom: [\n                { x1: 5, y1: 16, x2: 16, y2: 16, type: SegmentType.NORMAL },\n            ],\n        };\n        this.wall_corner_left = {\n            default: [\n                { x1: 5, y1: 0, x2: 5, y2: 12, type: SegmentType.NORMAL },\n                { x1: 5, y1: 12, x2: 16, y2: 12, type: SegmentType.NORMAL },\n                { x1: 16, y1: 12, x2: 16, y2: 16, type: SegmentType.NORMAL }\n            ],\n            top: [\n                { x1: 5, y1: 0, x2: 16, y2: 0, type: SegmentType.TOP },\n            ],\n            left: [],\n            right: [\n                { x1: 16, y1: 0, x2: 16, y2: 12, type: SegmentType.NORMAL },\n            ],\n            bottom: [],\n        };\n        this.wall_corner_right = {\n            default: [\n                { x1: 11, y1: 0, x2: 11, y2: 12, type: SegmentType.NORMAL },\n                { x1: 0, y1: 12, x2: 11, y2: 12, type: SegmentType.NORMAL },\n                { x1: 0, y1: 12, x2: 0, y2: 16, type: SegmentType.NORMAL }\n            ],\n            top: [\n                { x1: 0, y1: 0, x2: 11, y2: 0, type: SegmentType.TOP },\n            ],\n            left: [\n                { x1: 0, y1: 0, x2: 0, y2: 12, type: SegmentType.NORMAL },\n            ],\n            right: [],\n            bottom: [],\n        };\n        this.wall_default = {\n            default: [],\n            top: [\n                { x1: 0, y1: 0, x2: 16, y2: 0, type: SegmentType.TOP },\n            ],\n            left: [\n                { x1: 0, y1: 0, x2: 0, y2: 16, type: SegmentType.NORMAL },\n            ],\n            right: [\n                { x1: 16, y1: 0, x2: 16, y2: 16, type: SegmentType.NORMAL },\n            ],\n            bottom: [\n                { x1: 0, y1: 16, x2: 16, y2: 16, type: SegmentType.NORMAL },\n            ],\n        };\n        this.config = {\n            \"wall_top_mid.png\": this.wall_top,\n            \"wall_side_front_left.png\": this.wall_side_left,\n            \"wall_side_front_right.png\": this.wall_side_right,\n            \"wall_side_mid_left.png\": this.wall_side_left,\n            \"wall_side_mid_right.png\": this.wall_side_right,\n            \"wall_side_top_left.png\": {\n                default: [\n                    { x1: 11, y1: 12, x2: 16, y2: 12, type: SegmentType.NORMAL },\n                    { x1: 11, y1: 12, x2: 11, y2: 16, type: SegmentType.NORMAL },\n                ],\n                top: [\n                    { x1: 0, y1: 0, x2: 16, y2: 0, type: SegmentType.TOP },\n                ],\n                left: [\n                    { x1: 0, y1: 0, x2: 0, y2: 16, type: SegmentType.NORMAL },\n                ],\n                right: [\n                    { x1: 16, y1: 0, x2: 16, y2: 12, type: SegmentType.NORMAL },\n                ],\n                bottom: [\n                    { x1: 0, y1: 16, x2: 11, y2: 16, type: SegmentType.NORMAL },\n                ],\n            },\n            \"wall_side_top_right.png\": {\n                default: [\n                    { x1: 0, y1: 12, x2: 5, y2: 12, type: SegmentType.NORMAL },\n                    { x1: 5, y1: 12, x2: 5, y2: 16, type: SegmentType.NORMAL },\n                ],\n                top: [\n                    { x1: 0, y1: 0, x2: 16, y2: 0, type: SegmentType.TOP },\n                ],\n                left: [\n                    { x1: 0, y1: 12, x2: 0, y2: 16, type: SegmentType.NORMAL },\n                ],\n                right: [\n                    { x1: 16, y1: 0, x2: 16, y2: 16, type: SegmentType.NORMAL },\n                ],\n                bottom: [\n                    { x1: 5, y1: 16, x2: 16, y2: 16, type: SegmentType.NORMAL },\n                ],\n            },\n            \"wall_inner_corner_t_top_left.png\": this.wall_top,\n            \"wall_inner_corner_t_top_right.png\": this.wall_top,\n            \"wall_inner_corner_l_top_left.png\": this.wall_corner_left,\n            \"wall_inner_corner_l_top_right.png\": this.wall_corner_right,\n            \"wall_corner_bottom_left.png\": this.wall_corner_left,\n            \"wall_corner_bottom_right.png\": this.wall_corner_right,\n            \"wall_corner_top_left.png\": this.wall_top,\n            \"wall_corner_top_right.png\": this.wall_top,\n            \"wall_fountain_top.png\": {\n                default: [\n                    { x1: 0, y1: 12, x2: 0, y2: 16, type: SegmentType.NORMAL },\n                    { x1: 0, y1: 12, x2: 2, y2: 12, type: SegmentType.NORMAL },\n                    { x1: 2, y1: 9, x2: 2, y2: 12, type: SegmentType.NORMAL },\n                    { x1: 2, y1: 9, x2: 14, y2: 9, type: SegmentType.NORMAL },\n                    { x1: 14, y1: 9, x2: 14, y2: 12, type: SegmentType.NORMAL },\n                    { x1: 14, y1: 12, x2: 16, y2: 12, type: SegmentType.NORMAL },\n                    { x1: 16, y1: 12, x2: 16, y2: 16, type: SegmentType.NORMAL },\n                ],\n                top: [\n                    { x1: 0, y1: 0, x2: 16, y2: 0, type: SegmentType.TOP },\n                ],\n                left: [\n                    { x1: 0, y1: 0, x2: 0, y2: 12, type: SegmentType.NORMAL },\n                ],\n                right: [\n                    { x1: 16, y1: 0, x2: 16, y2: 12, type: SegmentType.NORMAL },\n                ],\n                bottom: []\n            },\n            \"wall_one_top.png\": this.wall_top,\n            \"wall_one_corner_left.png\": this.wall_corner_left,\n            \"wall_one_corner_right.png\": this.wall_corner_right,\n        };\n        this.dungeon = dungeon;\n        this.layer = new external_PIXI_[\"display\"].Layer();\n        this.layer.useRenderTexture = true;\n        this.layer.on('display', (element) => {\n            element.blendMode = external_PIXI_[\"BLEND_MODES\"].MULTIPLY;\n        });\n        this.layer.clearColor = [0, 0, 0, 1];\n        this.container = new external_PIXI_[\"Container\"]();\n        this.layer.addChild(this.container);\n        this.heroLightTexture = dungeon_light_DungeonLight.gradient(\"white\", 150);\n        this.fountainRedTexture = dungeon_light_DungeonLight.gradient(\"rgb(211,78,56)\", 50);\n        this.fountainBlueTexture = dungeon_light_DungeonLight.gradient(\"rgb(86,152,204)\", 50);\n        this.bonfireTexture = dungeon_light_DungeonLight.gradient(\"rgb(255,239,204)\", 100);\n        this.shadowCaster = new shadow_caster_ShadowCaster();\n        this.dungeon.ticker.add(this.update, this);\n    }\n    destroy() {\n        this.dungeon.ticker.remove(this.update, this);\n        this.lights.forEach(l => l.destroy());\n        this.heroLightTexture.destroy();\n        this.fountainBlueTexture.destroy();\n        this.fountainRedTexture.destroy();\n        this.bonfireTexture.destroy();\n        this.container.destroy();\n        this.layer.destroy();\n    }\n    loadMap() {\n        this.shadowCaster.init();\n        const dungeon = this.dungeon;\n        for (let y = 0; y < dungeon.height; y++) {\n            for (let x = 0; x < dungeon.width; x++) {\n                const cell = dungeon.cell(x, y);\n                if (cell.hasFloor) {\n                    switch (cell.floorName) {\n                        case 'wall_fountain_basin_red':\n                            this.addLight(new external_PIXI_[\"Point\"](x * dungeon_light_TILE_SIZE, y * dungeon_light_TILE_SIZE), LightType.RED_BASIN);\n                            break;\n                        case 'wall_fountain_basin_blue':\n                            this.addLight(new external_PIXI_[\"Point\"](x * dungeon_light_TILE_SIZE, y * dungeon_light_TILE_SIZE), LightType.BLUE_BASIN);\n                            break;\n                        default:\n                            break;\n                    }\n                    const has_top = y > 0 && dungeon.cell(x, y - 1).hasFloor;\n                    const has_bottom = y + 1 < dungeon.height && dungeon.cell(x, y + 1).hasFloor;\n                    const has_left = x > 0 && dungeon.cell(x - 1, y).hasFloor;\n                    const has_right = x + 1 < dungeon.width && dungeon.cell(x + 1, y).hasFloor;\n                    let config;\n                    const cellWall = cell.wallName;\n                    if (cellWall && this.config[cellWall]) {\n                        config = this.config[cellWall] || this.wall_default;\n                    }\n                    else {\n                        config = this.wall_default;\n                    }\n                    this.add(x, y, config.default);\n                    if (!has_top)\n                        this.add(x, y, config.top);\n                    if (!has_bottom)\n                        this.add(x, y, config.bottom);\n                    if (!has_left)\n                        this.add(x, y, config.left);\n                    if (!has_right)\n                        this.add(x, y, config.right);\n                }\n            }\n        }\n        this.shadowCaster.optimize();\n    }\n    addLight(position, type) {\n        switch (type) {\n            case LightType.HERO:\n                this.lights.push(new dungeon_light_LightSource(position, 350, this.heroLightTexture, this.container));\n                break;\n            case LightType.RED_BASIN:\n                this.lights.push(new dungeon_light_LightSource(position, 150, this.fountainRedTexture, this.container));\n                break;\n            case LightType.BLUE_BASIN:\n                this.lights.push(new dungeon_light_LightSource(position, 150, this.fountainBlueTexture, this.container));\n                break;\n            case LightType.BONFIRE:\n                this.lights.push(new dungeon_light_LightSource(position, 250, this.bonfireTexture, this.container));\n                break;\n        }\n    }\n    add(x, y, segments) {\n        for (let segment of segments) {\n            this.shadowCaster.addSegment(x * dungeon_light_TILE_SIZE + segment.x1, y * dungeon_light_TILE_SIZE + segment.y1, x * dungeon_light_TILE_SIZE + segment.x2, y * dungeon_light_TILE_SIZE + segment.y2, segment.type);\n        }\n    }\n    update() {\n        this.lights.forEach((light) => {\n            const start = new external_PIXI_[\"Point\"](light.position.x + 8, light.position.y + 8);\n            this.shadowCaster.setLightLocation(start.x, start.y, light.maxDistance);\n            const output = this.shadowCaster.sweep();\n            light.sprite.position.set(start.x, start.y);\n            light.mask.clear()\n                .beginFill(0xFFFFFF, 1)\n                .drawPolygon(output)\n                .endFill();\n        });\n    }\n    static gradient(color, radius) {\n        const diameter = radius << 1;\n        const c = document.createElement(\"canvas\");\n        c.width = diameter;\n        c.height = diameter;\n        const ctx = c.getContext(\"2d\");\n        if (ctx) {\n            const grd = ctx.createRadialGradient(radius, radius, 0, radius, radius, radius);\n            grd.addColorStop(0.1, color);\n            grd.addColorStop(1, \"transparent\");\n            ctx.fillStyle = grd;\n            ctx.fillRect(0, 0, diameter, diameter);\n        }\n        return external_PIXI_[\"Texture\"].from(c);\n    }\n}\nvar LightType;\n(function (LightType) {\n    LightType[LightType[\"HERO\"] = 0] = \"HERO\";\n    LightType[LightType[\"RED_BASIN\"] = 1] = \"RED_BASIN\";\n    LightType[LightType[\"BLUE_BASIN\"] = 2] = \"BLUE_BASIN\";\n    LightType[LightType[\"BONFIRE\"] = 3] = \"BONFIRE\";\n})(LightType || (LightType = {}));\nclass dungeon_light_LightSource {\n    constructor(position, maxDistance, texture, container) {\n        this.position = position;\n        this.maxDistance = maxDistance;\n        this.mask = new external_PIXI_[\"Graphics\"]();\n        this.mask.isMask = true;\n        this.sprite = new external_PIXI_[\"Sprite\"](texture);\n        this.sprite.anchor.set(0.5, 0.5);\n        this.sprite.mask = this.mask;\n        this.sprite.blendMode = external_PIXI_[\"BLEND_MODES\"].ADD;\n        container.addChild(this.mask);\n        container.addChild(this.sprite);\n    }\n    destroy() {\n        this.sprite.destroy();\n        this.mask.destroy();\n    }\n}\n\n// CONCATENATED MODULE: ./src/dungeon.map.ts\n\n\n\nconst dungeon_map_TILE_SIZE = 16;\nconst DungeonZIndexes = {\n    character: 60,\n    hero: 70,\n    drop: 50,\n    static: 40,\n    floor: 1,\n    wall: 100,\n    row: 256\n};\nclass dungeon_map_DungeonMap {\n    constructor(controller, ticker, rng, seed, level, width, height) {\n        this.scale = 2;\n        this.controller = controller;\n        this.ticker = ticker;\n        this.rng = rng;\n        this.seed = seed;\n        this.level = level;\n        this.width = width;\n        this.height = height;\n        this.cells = [];\n        for (let y = 0; y < this.width; y++) {\n            this.cells[y] = [];\n            for (let x = 0; x < this.height; x++) {\n                this.cells[y][x] = new dungeon_map_MapCell(this, x, y);\n            }\n        }\n        this.container = new external_PIXI_[\"Container\"]();\n        this.container.zIndex = 0;\n        this.container.sortableChildren = true;\n        this.container.scale.set(this.scale, this.scale);\n        this.light = new dungeon_light_DungeonLight(this);\n        this.light.layer.zIndex = 1;\n        this.light.container.scale.set(this.scale, this.scale);\n        this.lighting = new external_PIXI_[\"Sprite\"](this.light.layer.getRenderTexture());\n        this.lighting.blendMode = external_PIXI_[\"BLEND_MODES\"].MULTIPLY;\n        this.lighting.zIndex = 2;\n    }\n    destroy() {\n        for (let y = 0; y < this.height; y++) {\n            for (let x = 0; x < this.width; x++) {\n                this.cells[y][x].destroy();\n            }\n        }\n        this.lighting.destroy();\n        this.light.destroy();\n        this.container.destroy({ children: true });\n    }\n    log(message) {\n        console.info(message);\n    }\n    cell(x, y) {\n        return this.cells[y][x];\n    }\n    remove(x, y, object) {\n        for (let dx = 0; dx < object.width; dx++) {\n            for (let dy = 0; dy < object.height; dy++) {\n                const cell = this.cell(x + dx, y - dy);\n                const c = cell.object;\n                if (c && (c === object)) {\n                    cell.object = null;\n                }\n            }\n        }\n    }\n    set(x, y, object) {\n        for (let dx = 0; dx < object.width; dx++) {\n            for (let dy = 0; dy < object.height; dy++) {\n                this.cell(x + dx, y - dy).object = object;\n            }\n        }\n    }\n    available(x, y, object) {\n        for (let dx = 0; dx < object.width; dx++) {\n            for (let dy = 0; dy < object.height; dy++) {\n                const cell = this.cell(x + dx, y - dy);\n                if (!cell.hasFloor || cell.collide(object)) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    camera(x, y) {\n        const c_w = this.controller.app.screen.width;\n        const c_h = this.controller.app.screen.height;\n        const p_x = (c_w >> 1) - x * this.scale;\n        const p_y = (c_h >> 1) - y * this.scale;\n        this.container.position.set(p_x, p_y);\n        this.light.container.position.set(p_x, p_y);\n    }\n    sprite(x, y, name) {\n        let sprite;\n        if (!name.endsWith('.png')) {\n            const animated = this.controller.resources.animated(name);\n            animated.animationSpeed = 0.2;\n            animated.play();\n            sprite = animated;\n        }\n        else {\n            sprite = this.controller.resources.sprite(name);\n        }\n        sprite.position.set(x * dungeon_map_TILE_SIZE, y * dungeon_map_TILE_SIZE);\n        this.container.addChild(sprite);\n        return sprite;\n    }\n    animated(x, y, name) {\n        const animated = this.controller.resources.animated(name);\n        animated.animationSpeed = 0.2;\n        animated.play();\n        animated.position.set(x * dungeon_map_TILE_SIZE, y * dungeon_map_TILE_SIZE);\n        this.container.addChild(animated);\n        return animated;\n    }\n}\nclass dungeon_map_MapCell {\n    constructor(dungeon, x, y) {\n        this._floor = null;\n        this._wall = null;\n        this._drop = null;\n        this._object = null;\n        this.dungeon = dungeon;\n        this.x = x;\n        this.y = y;\n    }\n    destroy() {\n        var _a, _b, _c, _d;\n        (_a = this._floor) === null || _a === void 0 ? void 0 : _a.destroy();\n        this._floor = null;\n        (_b = this._wall) === null || _b === void 0 ? void 0 : _b.destroy();\n        this._wall = null;\n        (_c = this._drop) === null || _c === void 0 ? void 0 : _c.destroy();\n        this._drop = null;\n        (_d = this._object) === null || _d === void 0 ? void 0 : _d.destroy();\n        this._object = null;\n    }\n    set floorName(name) {\n        var _a;\n        (_a = this._floor) === null || _a === void 0 ? void 0 : _a.destroy();\n        this._floor = null;\n        if (name) {\n            this._floor = new DefaultDungeonFloor(this.dungeon, this.x, this.y, name);\n        }\n    }\n    get floorName() {\n        var _a;\n        return ((_a = this._floor) === null || _a === void 0 ? void 0 : _a.name) || null;\n    }\n    get floor() {\n        return this._floor;\n    }\n    get hasFloor() {\n        return !!this._floor;\n    }\n    get wallName() {\n        var _a;\n        return ((_a = this._wall) === null || _a === void 0 ? void 0 : _a.name) || null;\n    }\n    set wallName(name) {\n        var _a;\n        (_a = this._wall) === null || _a === void 0 ? void 0 : _a.destroy();\n        this._wall = null;\n        if (name) {\n            this._wall = new DungeonWall(this.dungeon, this.x, this.y, name);\n        }\n    }\n    get wall() {\n        return this._wall;\n    }\n    set dropItem(drop) {\n        var _a;\n        (_a = this._drop) === null || _a === void 0 ? void 0 : _a.destroy();\n        this._drop = null;\n        if (drop) {\n            this._drop = new dungeon_map_DungeonDrop(this.dungeon, this.x, this.y, drop);\n        }\n    }\n    get drop() {\n        return this._drop;\n    }\n    get hasDrop() {\n        return !!this._drop;\n    }\n    randomDrop() {\n        const rng = this.dungeon.rng;\n        const resources = this.dungeon.controller.resources;\n        const weight_coins = 20;\n        const weight_health_flask = 10;\n        const weight_health_big_flask = 10;\n        const weight_weapon = 10;\n        const sum = weight_coins + weight_health_flask + weight_health_big_flask + weight_weapon;\n        let remaining_distance = rng.nextFloat() * sum;\n        if ((remaining_distance -= weight_weapon) <= 0) {\n            this.dropItem = src_drop[\"Weapon\"].create(resources, rng, this.dungeon.level);\n        }\n        else if ((remaining_distance -= weight_health_big_flask) <= 0) {\n            this.dropItem = new src_drop[\"HealthBigFlask\"](resources);\n        }\n        else if ((remaining_distance -= weight_health_flask) <= 0) {\n            this.dropItem = new src_drop[\"HealthFlask\"](resources);\n        }\n        else if ((remaining_distance - weight_coins) <= 0) {\n            this.dropItem = new src_drop[\"Coins\"](rng, resources);\n        }\n        return this.hasDrop;\n    }\n    get object() {\n        return this._object;\n    }\n    set object(object) {\n        if (object && !(this._object === null || this._object === object)) {\n            console.log(\"current char\", this._object);\n            console.log(\"new char\", object);\n            throw \"error while set char to cell\";\n        }\n        this._object = object;\n    }\n    get hasObject() {\n        return this._object != null;\n    }\n    ladder() {\n        var _a;\n        (_a = this._floor) === null || _a === void 0 ? void 0 : _a.destroy();\n        this._floor = new DungeonLadder(this.dungeon, this.x, this.y);\n    }\n    get interacting() {\n        var _a, _b, _c, _d;\n        return ((_a = this._floor) === null || _a === void 0 ? void 0 : _a.interacting) || ((_b = this._wall) === null || _b === void 0 ? void 0 : _b.interacting) || ((_c = this._drop) === null || _c === void 0 ? void 0 : _c.interacting) || ((_d = this._object) === null || _d === void 0 ? void 0 : _d.interacting) || false;\n    }\n    interact(hero) {\n        if (this._object && this._object.interacting) {\n            this._object.interact(hero);\n        }\n        else if (this._drop && this._drop.interacting) {\n            this._drop.interact(hero);\n        }\n        else if (this._wall && this._wall.interacting) {\n            this._wall.interact(hero);\n        }\n        else if (this._floor && this._floor.interacting) {\n            this._floor.interact(hero);\n        }\n    }\n    collide(object) {\n        return (this._object && this._object.collide(object)) ||\n            (this._wall && this._wall.collide(object)) ||\n            false;\n    }\n}\nclass DungeonFloor {\n    constructor(dungeon, x, y, name) {\n        this.height = 1;\n        this.width = 1;\n        this.static = true;\n        this.dungeon = dungeon;\n        this.x = x;\n        this.y = y;\n        this.name = name;\n        this.sprite = dungeon.sprite(x, y, name);\n        this.sprite.zIndex = DungeonZIndexes.floor;\n    }\n    collide(_) {\n        return false;\n    }\n    destroy() {\n        this.sprite.destroy();\n    }\n}\nclass DefaultDungeonFloor extends DungeonFloor {\n    constructor(dungeon, x, y, name) {\n        super(dungeon, x, y, name);\n        this.interacting = false;\n    }\n    interact(_) {\n    }\n}\nclass DungeonLadder extends DungeonFloor {\n    constructor(dungeon, x, y) {\n        super(dungeon, x, y, 'floor_ladder.png');\n        this.interacting = true;\n    }\n    interact(hero) {\n        this.dungeon.controller.updateHero(hero.character, this.dungeon.level + 1);\n    }\n}\nclass DungeonWall {\n    constructor(dungeon, x, y, name) {\n        this.height = 1;\n        this.width = 1;\n        this.static = true;\n        this.interacting = false;\n        this.dungeon = dungeon;\n        this.x = x;\n        this.y = y;\n        this.name = name;\n        this.sprite = dungeon.sprite(x, y, name);\n        this.sprite.zIndex = DungeonZIndexes.wall + y * DungeonZIndexes.row;\n    }\n    interact(_) {\n    }\n    collide(_) {\n        return !this.dungeon.cell(this.x, this.y).hasFloor;\n    }\n    destroy() {\n        this.sprite.destroy();\n    }\n}\nclass dungeon_map_DungeonDrop {\n    constructor(dungeon, x, y, drop) {\n        this.height = 1;\n        this.width = 1;\n        this.static = true;\n        this.interacting = true;\n        this.dungeon = dungeon;\n        this.x = x;\n        this.y = y;\n        this.drop = drop;\n        this.sprite = dungeon.sprite(x, y, drop.spriteName);\n        this.sprite.zIndex = DungeonZIndexes.drop + y * DungeonZIndexes.row;\n        this.sprite.x += (dungeon_map_TILE_SIZE >> 1);\n        this.sprite.y += dungeon_map_TILE_SIZE - 2;\n        this.sprite.anchor.set(0.5, 1);\n        if (this.sprite instanceof external_PIXI_[\"AnimatedSprite\"]) {\n            this.sprite.animationSpeed = 0.2;\n            this.sprite.play();\n        }\n    }\n    pickedUp(hero) {\n        if (this.drop.pickedUp(hero)) {\n            this.dungeon.cell(this.x, this.y).dropItem = null;\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    interact(_) {\n    }\n    collide(_) {\n        return false;\n    }\n    destroy() {\n        this.sprite.destroy();\n    }\n}\nclass dungeon_map_DungeonTitle extends external_PIXI_[\"Container\"] {\n    constructor() {\n        super();\n        this.title = new external_PIXI_[\"BitmapText\"](\"\", { font: { name: 'alagard', size: 32 } });\n        this.title.anchor = 0.5;\n        this.title.position.set(0, 16);\n        this.addChild(this.title);\n    }\n    set level(level) {\n        this.title.text = `LEVEL ${level}`;\n    }\n    destroy() {\n        this.title.destroy();\n    }\n}\n\n// EXTERNAL MODULE: ./src/inventory.ts\nvar inventory = __webpack_require__(\"./src/inventory.ts\");\n\n// EXTERNAL MODULE: ./src/observable.ts\nvar observable = __webpack_require__(\"./src/observable.ts\");\n\n// EXTERNAL MODULE: ./src/curves.ts\nvar curves = __webpack_require__(\"./src/curves.ts\");\n\n// CONCATENATED MODULE: ./src/pathfinding.ts\n\nvar Heuristic;\n(function (Heuristic) {\n    Heuristic[Heuristic[\"Manhattan\"] = 0] = \"Manhattan\";\n    Heuristic[Heuristic[\"Euclidean\"] = 1] = \"Euclidean\";\n    Heuristic[Heuristic[\"Chebyshev\"] = 2] = \"Chebyshev\";\n    Heuristic[Heuristic[\"Octile\"] = 3] = \"Octile\";\n})(Heuristic || (Heuristic = {}));\nclass Node {\n    constructor(parent, position) {\n        this.g = 0;\n        this.h = 0;\n        this.f = 0;\n        this.parent = parent;\n        this.position = position;\n    }\n    equal(other) {\n        return this.position.equals(other.position);\n    }\n}\nclass pathfinding_PathFinding {\n    constructor(width, height, diagonalAllowed = true, includeStart = false, includeEnd = false, heuristic = Heuristic.Chebyshev, weight = 1) {\n        this.map = [];\n        this.weight = 1;\n        this.width = width;\n        this.height = height;\n        this.diagonalAllowed = diagonalAllowed;\n        this.includeStart = includeStart;\n        this.includeEnd = includeEnd;\n        this.heuristic = heuristic;\n        this.weight = weight;\n        for (let x = 0; x < width; x++) {\n            const row = [];\n            this.map.push(row);\n            for (let y = 0; y < height; y++) {\n                row.push(1);\n            }\n        }\n    }\n    clear(x, y) {\n        this.map[x][y] = 0;\n    }\n    mark(x, y) {\n        this.map[x][y] = 1;\n    }\n    find(start, end) {\n        let start_node = new Node(null, start);\n        let end_node = new Node(null, end);\n        let open_list = [];\n        let closed_list = [];\n        open_list.push(start_node);\n        while (open_list.length > 0) {\n            let current_node = open_list[0];\n            let current_index = 0;\n            for (let i = 1; i < open_list.length; i++) {\n                let item = open_list[i];\n                if (item.f < current_node.f) {\n                    current_node = item;\n                    current_index = i;\n                }\n            }\n            open_list.splice(current_index, 1);\n            closed_list.push(current_node);\n            if (current_node.equal(end_node)) {\n                const path = [];\n                let current;\n                if (this.includeEnd) {\n                    current = current_node;\n                }\n                else {\n                    current = current_node.parent;\n                }\n                while (current.parent !== null) {\n                    path.push(current.position);\n                    current = current.parent;\n                }\n                if (this.includeStart) {\n                    path.push(current.position);\n                }\n                return path.reverse();\n            }\n            const children = [];\n            const squares = this.diagonalAllowed ? pathfinding_PathFinding.adjacentSquaresDiagonal : pathfinding_PathFinding.adjacentSquares;\n            for (let i = 0; i < squares.length; i++) {\n                let new_position = squares[i];\n                let node_position = new external_PIXI_[\"Point\"](current_node.position.x + new_position.x, current_node.position.y + new_position.y);\n                if (node_position.x >= this.width || node_position.x < 0 ||\n                    node_position.y >= this.height || node_position.y < 0) {\n                    continue;\n                }\n                if (this.map[node_position.x][node_position.y] != 0) {\n                    continue;\n                }\n                let new_node = new Node(current_node, node_position);\n                children.push(new_node);\n            }\n            for (let i = 0; i < children.length; i++) {\n                let child = children[i];\n                if (closed_list.find(c => c.equal(child)) != null) {\n                    continue;\n                }\n                child.g = current_node.g + 1;\n                child.h = this.heuristicFunction(child.position, end_node.position);\n                child.f = child.g + child.h;\n                if (open_list.find(c => c.equal(child)) != null) {\n                    continue;\n                }\n                open_list.push(child);\n            }\n        }\n        return [];\n    }\n    heuristicFunction(pos0, pos1) {\n        let dx = Math.abs(pos1.x - pos0.x);\n        let dy = Math.abs(pos1.y - pos0.y);\n        switch (this.heuristic) {\n            case Heuristic.Manhattan:\n                return (dx + dy) * this.weight;\n            case Heuristic.Euclidean:\n                return Math.sqrt(dx * dx + dy * dy) * this.weight;\n            case Heuristic.Chebyshev:\n                return Math.max(dx, dy) * this.weight;\n            case Heuristic.Octile:\n                return (dx + dy - 0.58 * Math.min(dx, dy)) * this.weight;\n        }\n    }\n}\npathfinding_PathFinding.adjacentSquares = [\n    new external_PIXI_[\"Point\"](0, -1),\n    new external_PIXI_[\"Point\"](0, 1),\n    new external_PIXI_[\"Point\"](-1, 0),\n    new external_PIXI_[\"Point\"](1, 0),\n];\npathfinding_PathFinding.adjacentSquaresDiagonal = [\n    new external_PIXI_[\"Point\"](0, -1),\n    new external_PIXI_[\"Point\"](0, 1),\n    new external_PIXI_[\"Point\"](-1, 0),\n    new external_PIXI_[\"Point\"](1, 0),\n    new external_PIXI_[\"Point\"](-1, -1),\n    new external_PIXI_[\"Point\"](-1, 1),\n    new external_PIXI_[\"Point\"](1, -1),\n    new external_PIXI_[\"Point\"](1, 1)\n];\n\n// CONCATENATED MODULE: ./src/character.ts\n\n\n\n\n\nconst character_TILE_SIZE = 16;\nclass character_Character {\n    constructor(options) {\n        this.name = options.name;\n        this._speed = new observable[\"ObservableVar\"](options.speed);\n        this._healthMax = new observable[\"ObservableVar\"](options.healthMax);\n        this._health = new observable[\"ObservableVar\"](options.healthMax);\n        this._dead = new observable[\"ObservableVar\"](false);\n        this._killedBy = new observable[\"ObservableVar\"](null);\n    }\n    get speed() {\n        return this._speed.get();\n    }\n    get healthMax() {\n        return this._healthMax;\n    }\n    get health() {\n        return this._health;\n    }\n    get dead() {\n        return this._dead;\n    }\n    get killedBy() {\n        return this._killedBy;\n    }\n    heal(health) {\n        this._health.update(h => Math.min(this._healthMax.get(), h + health));\n    }\n    hitDamage(by, damage) {\n        if (!this._dead.get()) {\n            this._health.update((h) => Math.max(0, h - damage));\n            if (this._health.get() === 0) {\n                this._killedBy.set(by);\n                this._dead.set(true);\n            }\n        }\n    }\n}\nvar ScanDirection;\n(function (ScanDirection) {\n    ScanDirection[ScanDirection[\"LEFT\"] = 1] = \"LEFT\";\n    ScanDirection[ScanDirection[\"RIGHT\"] = 2] = \"RIGHT\";\n    ScanDirection[ScanDirection[\"AROUND\"] = 4] = \"AROUND\";\n})(ScanDirection || (ScanDirection = {}));\nclass character_BaseCharacterAI {\n    constructor(dungeon, options) {\n        this.static = false;\n        this._animation = null;\n        this.dungeon = dungeon;\n        this.width = options.width;\n        this.height = options.height;\n        this._x = options.x;\n        this._y = options.y;\n        this.view = new character_BaseCharacterView(dungeon, options.zIndex, options.width, options.on_position);\n    }\n    get x() {\n        return this._x;\n    }\n    get y() {\n        return this._y;\n    }\n    set animation(animation) {\n        var _a;\n        (_a = this._animation) === null || _a === void 0 ? void 0 : _a.cancel();\n        this._animation = animation;\n        this._animation.run();\n    }\n    get animation() {\n        return this._animation;\n    }\n    init() {\n        this.setPosition(this._x, this._y);\n        this.character.killedBy.subscribe(this.handleKilledBy, this);\n        this.character.dead.subscribe(this.handleDead, this);\n        this.idle();\n    }\n    destroy() {\n        var _a;\n        (_a = this._animation) === null || _a === void 0 ? void 0 : _a.cancel();\n        this.character.killedBy.unsubscribe(this.handleKilledBy, this);\n        this.character.dead.unsubscribe(this.handleDead, this);\n        this.dungeon.remove(this._x, this._y, this);\n        this.view.destroy();\n    }\n    collide(object) {\n        return this !== object;\n    }\n    handleKilledBy(by) {\n        if (by)\n            this.onKilledBy(by);\n    }\n    handleDead(dead) {\n        if (dead) {\n            this.onDead();\n        }\n    }\n    findDropCell(max_distance = 5) {\n        return this.findCell(max_distance, cell => cell.hasFloor && !cell.hasObject && !cell.hasDrop);\n    }\n    findSpawnCell(max_distance = 5) {\n        return this.findCell(max_distance, cell => cell.hasFloor && !cell.hasObject);\n    }\n    findCell(max_distance, predicate) {\n        const pos_x = this.x;\n        const pos_y = this.y;\n        const is_left = this.view.is_left;\n        let closestCell = null;\n        let closestDistance = null;\n        const metric = (a) => {\n            return Math.max(Math.abs(a.x - pos_x), Math.abs(a.y - pos_y)) +\n                (a.y !== pos_y ? 0.5 : 0) +\n                (a.x === pos_x && a.y === pos_y ? 0 : 1) +\n                (is_left ? (a.x < pos_x ? 0 : 1) : (a.x > pos_x ? 0 : 0.5));\n        };\n        const min_x = Math.max(0, pos_x - max_distance);\n        const max_x = Math.min(this.dungeon.width - 1, pos_x + max_distance);\n        const min_y = Math.max(0, pos_y - max_distance);\n        const max_y = Math.min(this.dungeon.width - 1, pos_y + max_distance);\n        for (let x = min_x; x <= max_x; x++) {\n            for (let y = min_y; y <= max_y; y++) {\n                const cell = this.dungeon.cell(x, y);\n                if (cell.hasFloor && predicate(cell)) {\n                    const distance = metric(cell);\n                    if (closestDistance === null || closestDistance > distance) {\n                        closestCell = cell;\n                        closestDistance = distance;\n                    }\n                }\n            }\n        }\n        return closestCell;\n    }\n    move(mx, my) {\n        if (mx > 0)\n            this.view.is_left = false;\n        if (mx < 0)\n            this.view.is_left = true;\n        const new_x = this.x + mx;\n        const new_y = this.y + my;\n        if (this.dungeon.available(new_x, new_y, this)) {\n            this.run(new_x, new_y);\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    findPath(character) {\n        const dungeon = this.dungeon;\n        const pf = new pathfinding_PathFinding(dungeon.width, dungeon.height);\n        for (let y = 0; y < dungeon.height; y++) {\n            for (let x = 0; x < dungeon.width; x++) {\n                const cell = dungeon.cell(x, y);\n                const m = cell.object;\n                if (cell.hasFloor && (!cell.collide(this) || m === character)) {\n                    pf.clear(x, y);\n                }\n                else {\n                    pf.mark(x, y);\n                }\n            }\n        }\n        const start = new external_PIXI_[\"Point\"](this.x, this.y);\n        const end = new external_PIXI_[\"Point\"](character.x, character.y);\n        return pf.find(start, end);\n    }\n    idle() {\n        this.animation = new IdleAnimation(this, this.dungeon.ticker, {\n            sprite: this.character.name + '_idle',\n            speed: this.character.speed,\n            update: (animation) => {\n                if (this.action(false)) {\n                    animation.cancel();\n                }\n            },\n            finish: () => {\n                if (!this.action(true)) {\n                    this.idle();\n                }\n            }\n        });\n    }\n    run(new_x, new_y) {\n        this.animation = new RunAnimation(this, this.dungeon.ticker, {\n            new_x: new_x,\n            new_y: new_y,\n            sprite: this.character.name + '_run',\n            speed: this.character.speed,\n            finish: () => {\n                if (!this.action(true)) {\n                    this.idle();\n                }\n            }\n        });\n    }\n    hit() {\n        const weapon = this.character.weapon;\n        this.animation = new HitAnimation(this, this.dungeon.ticker, {\n            sprite: this.character.name + '_idle',\n            speed: (weapon === null || weapon === void 0 ? void 0 : weapon.speed) || this.character.speed,\n            curve: weapon === null || weapon === void 0 ? void 0 : weapon.curve,\n            finish: () => {\n                this.scanHit();\n                if (!this.action(true)) {\n                    this.idle();\n                }\n            },\n        });\n    }\n    setPosition(x, y) {\n        this.dungeon.remove(this._x, this._y, this);\n        this._x = Math.floor(x);\n        this._y = Math.floor(y);\n        this.dungeon.set(this._x, this._y, this);\n        this.view.setPosition(x, y);\n    }\n    lookAt(character) {\n        if (character.x < this.x)\n            this.view.is_left = true;\n        if (character.x > this.x)\n            this.view.is_left = false;\n    }\n    scanObjects(direction, max_distance, predicate) {\n        const objects = this.scanCells(direction, max_distance, cell => cell.hasObject && predicate(cell.object))\n            .map(cell => cell.object);\n        const set = new Set(objects);\n        return [...set];\n    }\n    scanCells(direction, max_distance, predicate) {\n        const pos_x = this.x;\n        const pos_y = this.y;\n        const scan_left = direction === ScanDirection.AROUND || direction === ScanDirection.LEFT;\n        const scan_right = direction === ScanDirection.AROUND || direction === ScanDirection.RIGHT;\n        const scan_x_min = scan_left ? Math.max(0, pos_x - max_distance) : pos_x;\n        const scan_x_max = scan_right ? Math.min(this.dungeon.width - 1, pos_x + max_distance) : pos_x;\n        const scan_y_min = Math.max(0, pos_y - max_distance);\n        const scan_y_max = Math.min(this.dungeon.height - 1, pos_y + max_distance);\n        const cells = [];\n        for (let s_y = scan_y_min; s_y <= scan_y_max; s_y++) {\n            for (let s_x = scan_x_min; s_x <= scan_x_max; s_x++) {\n                const cell = this.dungeon.cell(s_x, s_y);\n                if (predicate(cell)) {\n                    cells.push(cell);\n                }\n            }\n        }\n        return cells;\n    }\n    raycastIsVisible(x1, y1) {\n        let x0 = this.x;\n        let y0 = this.y;\n        const dx = Math.abs(x1 - x0);\n        const dy = Math.abs(y1 - y0);\n        const sx = x0 < x1 ? 1 : -1;\n        const sy = y0 < y1 ? 1 : -1;\n        let err = (dx > dy ? dx : -dy) / 2;\n        while (true) {\n            if (x0 === x1 && y0 === y1)\n                break;\n            let e2 = err;\n            if (e2 > -dx) {\n                err -= dy;\n                x0 += sx;\n            }\n            if (e2 < dy) {\n                err += dx;\n                y0 += sy;\n            }\n            if (x0 === x1 && y0 === y1)\n                break;\n            const cell = this.dungeon.cell(x0, y0);\n            if (!cell.hasFloor)\n                return false;\n            if (cell.collide(this))\n                return false;\n        }\n        return true;\n    }\n}\nclass character_Animation {\n    constructor(character, ticker, options) {\n        this._spriteTime = 0;\n        this._spritePlay = false;\n        this._terminated = false;\n        this.character = character;\n        this.view = character.view;\n        this.ticker = ticker;\n        this.sprite = options.sprite;\n        this.speed = options.speed;\n        this.curve = options.curve || curves[\"LinearCurve\"].line();\n        this.on_start = options.start || null;\n        this.on_update = options.update || null;\n        this.on_frame = options.frame || null;\n        this.on_cancel = options.cancel || null;\n        this.on_finish = options.finish;\n    }\n    get spriteTime() {\n        return this._spriteTime;\n    }\n    run() {\n        this._spritePlay = true;\n        this._terminated = false;\n        this.start();\n        this.ticker.add(this.tick, this);\n        if (this.on_start)\n            this.on_start(this);\n    }\n    cancel() {\n        if (!this._terminated) {\n            this.terminate();\n            this.canceled();\n            if (this.on_cancel)\n                this.on_cancel(this);\n        }\n    }\n    tick(deltaTime) {\n        this.updateSprite(deltaTime);\n        this.update();\n        if (this.on_update)\n            this.on_update(this);\n        if (!this._terminated && !this._spritePlay) {\n            this.terminate();\n            this.finish();\n            if (this.on_finish)\n                this.on_finish(this);\n            console.assert(this.character.animation !== this);\n        }\n    }\n    terminate() {\n        if (!this._terminated) {\n            this._terminated = true;\n            this.ticker.remove(this.tick, this);\n        }\n    }\n    updateSprite(deltaTime) {\n        const sprite = this.view.sprite;\n        if (!sprite) {\n            console.warn(\"no sprite found\");\n            this._spriteTime = 0;\n            this._spritePlay = false;\n            return;\n        }\n        const elapsed = sprite.animationSpeed * deltaTime;\n        const previousFrame = sprite.currentFrame;\n        this._spriteTime += elapsed;\n        let currentFrame = Math.floor(this._spriteTime) % sprite.totalFrames;\n        if (currentFrame < 0) {\n            currentFrame += sprite.totalFrames;\n        }\n        if (this._spriteTime < 0) {\n            this._spriteTime = 0;\n            this._spritePlay = false;\n        }\n        else if (this._spriteTime >= sprite.totalFrames) {\n            this._spriteTime = sprite.totalFrames - 1;\n            this._spritePlay = false;\n        }\n        else if (previousFrame !== currentFrame) {\n            sprite.gotoAndStop(currentFrame);\n            if (this.on_frame)\n                this.on_frame(this);\n        }\n    }\n}\nclass IdleAnimation extends character_Animation {\n    constructor(character, ticker, options) {\n        super(character, ticker, options);\n    }\n    start() {\n        this.view.setSprite(this.sprite, this.speed);\n    }\n    update() {\n    }\n    finish() {\n    }\n    canceled() {\n    }\n}\nclass RunAnimation extends character_Animation {\n    constructor(character, ticker, options) {\n        super(character, ticker, options);\n        this.x = character.x;\n        this.y = character.y;\n        this.new_x = options.new_x;\n        this.new_y = options.new_y;\n    }\n    start() {\n        this.view.setSprite(this.sprite, this.speed);\n        this.character.dungeon.set(this.new_x, this.new_y, this.character);\n    }\n    update() {\n        const delta = this.spriteTime / this.view.sprite.totalFrames;\n        const pos_x = this.x + (this.new_x - this.x) * delta;\n        const pos_y = this.y + (this.new_y - this.y) * delta;\n        this.character.view.setPosition(pos_x, pos_y);\n    }\n    finish() {\n        this.character.dungeon.remove(this.x, this.y, this.character);\n        this.character.dungeon.remove(this.new_x, this.new_y, this.character);\n        this.character.setPosition(this.new_x, this.new_y);\n    }\n    canceled() {\n        this.character.dungeon.remove(this.x, this.y, this.character);\n        this.character.dungeon.remove(this.new_x, this.new_y, this.character);\n        this.character.setPosition(this.character.x, this.character.y);\n    }\n}\nclass HitAnimation extends character_Animation {\n    constructor(character, ticker, options) {\n        super(character, ticker, options);\n    }\n    start() {\n        this.view.setSprite(this.sprite, this.speed);\n    }\n    update() {\n        const weapon = this.view.weaponSprite;\n        if (weapon) {\n            const sprite = this.view.sprite;\n            const delta = this._spriteTime / sprite.totalFrames;\n            const curveDelta = this.curve(delta);\n            weapon.angle = (this.view.is_left ? -90 : 90) * curveDelta;\n        }\n    }\n    finish() {\n        const weapon = this.view.weaponSprite;\n        if (weapon) {\n            weapon.angle = 0;\n        }\n    }\n    canceled() {\n    }\n}\nclass character_BaseCharacterView extends external_PIXI_[\"Container\"] {\n    constructor(dungeon, zIndex, grid_width, on_position) {\n        super();\n        this._is_left = false;\n        this._sprite = null;\n        this._weaponSprite = null;\n        this.resources = dungeon.controller.resources;\n        this.base_zIndex = zIndex;\n        this.grid_width = grid_width;\n        this.on_position = on_position || null;\n        dungeon.container.addChild(this);\n    }\n    get is_left() {\n        return this._is_left;\n    }\n    set is_left(is_left) {\n        this._is_left = is_left;\n        this.updateSpriteOrientation();\n        this.updateWeaponOrientation();\n    }\n    get sprite() {\n        return this._sprite;\n    }\n    get weaponSprite() {\n        return this._weaponSprite;\n    }\n    destroy() {\n        var _a, _b;\n        (_a = this._sprite) === null || _a === void 0 ? void 0 : _a.destroy();\n        this._sprite = null;\n        (_b = this._weaponSprite) === null || _b === void 0 ? void 0 : _b.destroy();\n        this._weaponSprite = null;\n        super.destroy();\n    }\n    setPosition(x, y) {\n        this.position.set(x * character_TILE_SIZE, y * character_TILE_SIZE);\n        this.zIndex = this.base_zIndex + Math.floor(y) * DungeonZIndexes.row;\n        if (this.on_position) {\n            this.on_position(x * character_TILE_SIZE, y * character_TILE_SIZE);\n        }\n    }\n    setSprite(name, speed) {\n        var _a;\n        (_a = this._sprite) === null || _a === void 0 ? void 0 : _a.destroy();\n        this._sprite = this.resources.animated(name, false);\n        this._sprite.loop = false;\n        this._sprite.animationSpeed = 0.2 * speed;\n        this._sprite.anchor.set(0, 1);\n        this._sprite.position.y = character_TILE_SIZE - 2;\n        this._sprite.zIndex = 1;\n        this.addChild(this._sprite);\n        this.updateSpriteOrientation();\n        this.updateWeaponOrientation();\n    }\n    setWeapon(weapon) {\n        var _a;\n        (_a = this._weaponSprite) === null || _a === void 0 ? void 0 : _a.destroy();\n        this._weaponSprite = null;\n        if (weapon) {\n            this._weaponSprite = weapon.sprite();\n            this._weaponSprite.zIndex = 2;\n            this._weaponSprite.position.x = character_TILE_SIZE;\n            this._weaponSprite.position.y = character_TILE_SIZE - 4;\n            if (this.is_left) {\n                this._weaponSprite.position.x = 0;\n                this._weaponSprite.scale.x = -1;\n            }\n            this._weaponSprite.anchor.set(0.5, 1);\n            this.addChild(this._weaponSprite);\n            this.sortChildren();\n        }\n    }\n    updateSpriteOrientation() {\n        if (this._sprite) {\n            if (this._is_left) {\n                this._sprite.position.x = this._sprite.width;\n                if (this._sprite.width > this.grid_width * character_TILE_SIZE) {\n                    this._sprite.position.x -= (this._sprite.width - this.grid_width * character_TILE_SIZE) / 2;\n                }\n                this._sprite.scale.x = -1;\n            }\n            else {\n                this._sprite.position.x = 0;\n                if (this._sprite.width > this.grid_width * character_TILE_SIZE) {\n                    this._sprite.position.x -= (this._sprite.width - this.grid_width * character_TILE_SIZE) / 2;\n                }\n                this._sprite.scale.x = 1;\n            }\n        }\n    }\n    updateWeaponOrientation() {\n        if (this._weaponSprite) {\n            if (this.is_left) {\n                this._weaponSprite.position.x = 0;\n                this._weaponSprite.scale.x = -1;\n            }\n            else {\n                this._weaponSprite.position.x = character_TILE_SIZE;\n                this._weaponSprite.scale.x = 1;\n            }\n        }\n    }\n}\n\n// EXTERNAL MODULE: ./src/ui.ts\nvar ui = __webpack_require__(\"./src/ui.ts\");\n\n// CONCATENATED MODULE: ./src/bar.view.ts\n\n\nconst BAR_HEIGHT = 18;\nclass bar_view_BarView extends external_PIXI_[\"Container\"] {\n    constructor(options) {\n        super();\n        this._color = options.color;\n        this._width = options.width || 0;\n        this._widthMax = options.widthMax;\n        this._rect = new external_PIXI_[\"Graphics\"]();\n        this._labelCenter = options.labelCenter || false;\n        this._label = new external_PIXI_[\"BitmapText\"](\"\", { font: { name: \"alagard\", size: 16 } });\n        this._label.anchor = new external_PIXI_[\"Point\"](this._labelCenter ? 0.5 : 0, 0.5);\n        this._label.position.set((ui[\"Sizes\"].uiBorder << 1) + (this._labelCenter ? this._widthMax >> 1 : 0), ui[\"Sizes\"].uiBorder + (BAR_HEIGHT >> 1));\n        super.addChild(this._rect, this._label);\n    }\n    set color(color) {\n        this._color = color;\n        this.updateRect();\n    }\n    set width(width) {\n        this._width = width;\n        this.updateRect();\n    }\n    set label(text) {\n        this._label.text = text;\n    }\n    set widthMax(widthMax) {\n        this._widthMax = widthMax;\n        this._label.position.set((ui[\"Sizes\"].uiBorder << 1) + (this._labelCenter ? this._widthMax >> 1 : 0), ui[\"Sizes\"].uiBorder + (BAR_HEIGHT >> 1));\n        this.updateRect();\n    }\n    updateRect() {\n        this._rect.clear()\n            .beginFill(ui[\"Colors\"].uiBackground, 0.3)\n            .drawRect(0, 0, this._widthMax + (ui[\"Sizes\"].uiBorder << 1), BAR_HEIGHT + (ui[\"Sizes\"].uiBorder << 1))\n            .endFill()\n            .beginFill(this._color, 0.3)\n            .drawRect(ui[\"Sizes\"].uiBorder, ui[\"Sizes\"].uiBorder, this._width, BAR_HEIGHT)\n            .endFill();\n    }\n}\n\n// CONCATENATED MODULE: ./src/monster.ts\n\n\nvar MonsterCategory;\n(function (MonsterCategory) {\n    MonsterCategory[MonsterCategory[\"DEMON\"] = 1] = \"DEMON\";\n    MonsterCategory[MonsterCategory[\"ZOMBIE\"] = 2] = \"ZOMBIE\";\n    MonsterCategory[MonsterCategory[\"ORC\"] = 3] = \"ORC\";\n    MonsterCategory[MonsterCategory[\"SLIME\"] = 4] = \"SLIME\";\n    MonsterCategory[MonsterCategory[\"UNDEAD\"] = 5] = \"UNDEAD\";\n})(MonsterCategory || (MonsterCategory = {}));\nvar MonsterType;\n(function (MonsterType) {\n    MonsterType[MonsterType[\"NORMAL\"] = 1] = \"NORMAL\";\n    MonsterType[MonsterType[\"LEADER\"] = 2] = \"LEADER\";\n    MonsterType[MonsterType[\"MINION\"] = 3] = \"MINION\";\n})(MonsterType || (MonsterType = {}));\nvar MonsterState;\n(function (MonsterState) {\n    MonsterState[MonsterState[\"READY\"] = 0] = \"READY\";\n    MonsterState[MonsterState[\"ALARM\"] = 1] = \"ALARM\";\n})(MonsterState || (MonsterState = {}));\nclass monster_MonsterCharacter extends character_Character {\n    constructor(options) {\n        super(options);\n        this.level = options.level;\n        this.luck = options.luck;\n        this.baseDamage = options.baseDamage;\n        this.xp = options.xp;\n        this.category = options.category;\n        this.type = options.type;\n        this.spawn = options.spawn;\n        this.weapon = options.weapon;\n    }\n    get damage() {\n        var _a;\n        return this.baseDamage + (((_a = this.weapon) === null || _a === void 0 ? void 0 : _a.damage) || 0);\n    }\n}\nclass monster_MonsterAI extends character_BaseCharacterAI {\n    constructor(dungeon, options) {\n        super(dungeon, options);\n        this.interacting = false;\n        this._state = MonsterState.READY;\n        this.last_path = [];\n        this.spawned = [];\n    }\n    interact() {\n    }\n    onKilledBy(by) {\n        if (by && by instanceof hero_Hero) {\n            this.dungeon.log(`${this.character.name} killed by ${by.name}`);\n            by.addXp(this.character.xp);\n        }\n    }\n    onDead() {\n        this.drop();\n        this.destroy();\n    }\n    ready() {\n        this._state = MonsterState.READY;\n    }\n    sendAlarm(hero) {\n        this._state = MonsterState.ALARM;\n        for (const monster of this.scanMonsters(ScanDirection.AROUND, this.max_distance)) {\n            monster.alarm(hero);\n        }\n    }\n    alarm(hero) {\n        if (!this.character.dead.get() &&\n            this.character.type !== MonsterType.LEADER &&\n            this._state === MonsterState.READY &&\n            this.animation instanceof IdleAnimation) {\n            this.moveTo(hero);\n        }\n    }\n    get state() {\n        return this._state;\n    }\n    randomMove() {\n        const random_move_percent = 0.1;\n        if (Math.random() < random_move_percent) {\n            const move_x = Math.floor(Math.random() * 3) - 1;\n            const move_y = Math.floor(Math.random() * 3) - 1;\n            if (this.move(move_x, move_y)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    moveToHero() {\n        const [hero] = this.scanHero(ScanDirection.AROUND, this.max_distance);\n        if (hero) {\n            this.lookAt(hero);\n            this.sendAlarm(hero);\n            const dist_x = Math.abs(this.x - hero.x);\n            const dist_y = Math.abs(this.y - hero.y);\n            if (dist_x > this.width || dist_y > this.height) {\n                return this.moveTo(hero);\n            }\n            else if (this.character.luck < this.dungeon.rng.nextFloat()) {\n                this.hit();\n                return true;\n            }\n        }\n        return false;\n    }\n    moveTo(character) {\n        this.last_path = this.findPath(character);\n        return this.moveByPath();\n    }\n    moveByPath() {\n        if (this.last_path.length > 0) {\n            const next = this.last_path[0];\n            const d_x = next.x - this.x;\n            const d_y = next.y - this.y;\n            if (this.move(d_x, d_y)) {\n                this.last_path.splice(0, 1);\n                return true;\n            }\n            else {\n                this.last_path = [];\n                return false;\n            }\n        }\n        else {\n            return false;\n        }\n    }\n    scanHit() {\n        const weapon = this.character.weapon;\n        const direction = this.view.is_left ? ScanDirection.LEFT : ScanDirection.RIGHT;\n        const distance = (weapon === null || weapon === void 0 ? void 0 : weapon.distance) || 1;\n        const heroes = this.scanHero(direction, distance);\n        for (const hero of heroes) {\n            hero.character.hitDamage(this.character, this.character.damage);\n        }\n    }\n    spawnMinions() {\n        for (let i = this.spawned.length - 1; i >= 0; i--) {\n            if (this.spawned[i].character.dead.get()) {\n                this.spawned.splice(i, 1);\n            }\n        }\n        if (this.spawned.length < this.character.spawn) {\n            if (Math.random() > 0.1) {\n                return false;\n            }\n            const cell = this.findSpawnCell();\n            if (!cell) {\n                console.warn(`spawn cell not found at ${this.x}:${this.y}`, this.character.category, this.character.type);\n                return false;\n            }\n            const minion = this.spawnMinion(cell.x, cell.y);\n            if (minion) {\n                cell.object = minion;\n                this.spawned.push(minion);\n                return true;\n            }\n            else {\n                console.warn(\"minion not spawned\", this.character.category, this.character.type);\n                return false;\n            }\n        }\n        return false;\n    }\n    scanHero(direction, max_distance) {\n        return this.scanObjects(direction, max_distance, c => c instanceof hero_HeroAI)\n            .filter(o => this.raycastIsVisible(o.x, o.y));\n    }\n    scanMonsters(direction, max_distance) {\n        return this.scanObjects(direction, max_distance, c => c instanceof monster_MonsterAI);\n    }\n}\n\n// CONCATENATED MODULE: ./src/hero.ts\n\n\n\n\n\n\n\n\n\nconst heroCharacterNames = [\n    \"elf_f\",\n    \"elf_m\",\n    \"knight_f\",\n    \"knight_m\",\n    \"wizard_f\",\n    \"wizard_m\",\n];\nconst defaultGlobalState = {\n    coins: 0,\n    baseDamage: 3,\n    level: 1,\n    levelXp: 0,\n    skillPoints: 0,\n    xp: 0,\n    healthMax: 30,\n    speed: 1,\n};\nclass hero_Hero extends character_Character {\n    constructor(name, state, persistent) {\n        super({\n            name: name,\n            speed: state.speed,\n            healthMax: state.healthMax\n        });\n        this.inventory = new inventory[\"Inventory\"](this);\n        this.dungeonSeeds = new Map();\n        this.bonfires = new Set();\n        this.persistent = persistent;\n        this._coins = new observable[\"ObservableVar\"](state.coins);\n        this._baseDamage = new observable[\"ObservableVar\"](state.baseDamage);\n        this._level = new observable[\"ObservableVar\"](state.level);\n        this._levelXp = new observable[\"ObservableVar\"](state.levelXp);\n        this._skillPoints = new observable[\"ObservableVar\"](state.skillPoints);\n        this._xp = new observable[\"ObservableVar\"](state.xp);\n        this.subscribe();\n    }\n    get coins() {\n        return this._coins;\n    }\n    addCoins(coins) {\n        this._coins.update(c => c + coins);\n    }\n    get damage() {\n        var _a;\n        return this._baseDamage.get() + (((_a = this.weapon) === null || _a === void 0 ? void 0 : _a.damage) || 0);\n    }\n    get weapon() {\n        return this.inventory.equipment.weapon.item.get() || null;\n    }\n    get level() {\n        return this._level;\n    }\n    get levelXp() {\n        return this._levelXp;\n    }\n    get skillPoints() {\n        return this._skillPoints;\n    }\n    get xp() {\n        return this._xp;\n    }\n    addXp(value) {\n        this._xp.update((v) => {\n            let newXp = v + value;\n            while (true) {\n                const levelXp = this._levelXp.get();\n                if (newXp >= levelXp) {\n                    newXp = newXp - levelXp;\n                    this._level.update((v) => v + 1);\n                    this._levelXp.update((v) => v + 1000);\n                    this._skillPoints.update((v) => v + 1);\n                }\n                else {\n                    break;\n                }\n            }\n            return newXp;\n        });\n    }\n    increaseHealth() {\n        this._skillPoints.update((points) => {\n            if (points > 0) {\n                points--;\n                this._healthMax.update((h) => h + 1);\n                this._health.update((h) => h + 1);\n            }\n            return points;\n        });\n    }\n    subscribe() {\n        this._coins.subscribe(this.save, this);\n        this._baseDamage.subscribe(this.save, this);\n        this._level.subscribe(this.save, this);\n        this._levelXp.subscribe(this.save, this);\n        this._skillPoints.subscribe(this.save, this);\n        this._xp.subscribe(this.save, this);\n        this._healthMax.subscribe(this.save, this);\n        this._speed.subscribe(this.save, this);\n    }\n    save() {\n        this.persistent.global.save(this.name, this.state);\n    }\n    get state() {\n        return {\n            coins: this._coins.get(),\n            baseDamage: this._baseDamage.get(),\n            level: this._level.get(),\n            levelXp: this._levelXp.get(),\n            skillPoints: this._skillPoints.get(),\n            xp: this._xp.get(),\n            healthMax: this._healthMax.get(),\n            speed: this._speed.get(),\n        };\n    }\n    static load(name, persistent) {\n        let state = persistent.global.load(name) || defaultGlobalState;\n        return new hero_Hero(name, state, persistent);\n    }\n}\nclass hero_HeroAI extends character_BaseCharacterAI {\n    constructor(character, dungeon, x, y) {\n        super(dungeon, {\n            x: x,\n            y: y,\n            width: 1,\n            height: 1,\n            zIndex: DungeonZIndexes.hero,\n            on_position: dungeon.camera.bind(dungeon),\n        });\n        this.interacting = false;\n        this.character = character;\n        this.init();\n        this.character.inventory.equipment.weapon.item.subscribe(this.onWeaponUpdate, this);\n        this.character.inventory.drop.subscribe(this.onDrop, this);\n    }\n    destroy() {\n        super.destroy();\n        this.character.inventory.equipment.weapon.item.unsubscribe(this.onWeaponUpdate, this);\n        this.character.inventory.drop.unsubscribe(this.onDrop, this);\n    }\n    interact() {\n    }\n    onKilledBy(by) {\n        this.dungeon.log(`${this.character.name} killed by ${by.name}`);\n    }\n    onDead() {\n        this.dungeon.controller.dead();\n    }\n    onDrop(event) {\n        let [drop] = event;\n        const cell = this.findDropCell();\n        if (cell) {\n            cell.dropItem = drop;\n        }\n    }\n    onWeaponUpdate(weapon) {\n        this.view.setWeapon(weapon);\n    }\n    action(finished) {\n        if (!this.character.dead.get()) {\n            const idle = this.animation instanceof IdleAnimation;\n            if (finished) {\n                this.scanDrop();\n            }\n            const joystick = this.dungeon.controller.joystick;\n            if (idle && joystick.inventory.once()) {\n                this.dungeon.controller.showInventory(this.character);\n                this.idle();\n                return true;\n            }\n            for (let d = 0; d <= 9; d++) {\n                const digit = (d + 1) % 10;\n                if (joystick.digit(digit).once()) {\n                    const cell = this.character.inventory.belt.cell(d);\n                    const item = cell.item.get();\n                    if (item && (item instanceof src_drop[\"Weapon\"] || idle)) {\n                        cell.use();\n                    }\n                }\n            }\n            if (idle && joystick.drop.once()) {\n                this.character.inventory.equipment.weapon.drop();\n            }\n            if (idle || finished) {\n                const triggered = joystick.hit.triggered;\n                const once = joystick.hit.once();\n                if (once) {\n                    const direction = this.view.is_left ? ScanDirection.LEFT : ScanDirection.RIGHT;\n                    const [object] = this.scanInteracting(direction, 1);\n                    if (object) {\n                        this.idle();\n                        object.interact(this);\n                        return true;\n                    }\n                }\n                if (triggered || once) {\n                    this.lookAtMonsters();\n                    this.hit();\n                    return true;\n                }\n            }\n            if (idle || finished) {\n                const d_x = hero_HeroAI.delta(joystick.moveLeft, joystick.moveRight);\n                const d_y = hero_HeroAI.delta(joystick.moveUp, joystick.moveDown);\n                if (d_x !== 0 || d_y !== 0) {\n                    if (this.move(d_x, d_y)) {\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    }\n    static delta(a, b) {\n        if (a.triggered) {\n            return -1;\n        }\n        else if (b.triggered) {\n            return 1;\n        }\n        else {\n            return 0;\n        }\n    }\n    scanDrop() {\n        var _a;\n        const cell = this.dungeon.cell(this.x, this.y);\n        if ((_a = cell.drop) === null || _a === void 0 ? void 0 : _a.pickedUp(this.character)) {\n            external_PIXI_[\"sound\"].play('fruit_collect');\n        }\n    }\n    scanHit() {\n        const weapon = this.character.weapon;\n        const distance = (weapon === null || weapon === void 0 ? void 0 : weapon.distance) || 1;\n        const direction = this.view.is_left ? ScanDirection.LEFT : ScanDirection.RIGHT;\n        const monsters = this.scanMonsters(direction, distance);\n        for (let monster of monsters) {\n            monster.character.hitDamage(this.character, this.character.damage);\n        }\n        if (monsters.length > 0) {\n            external_PIXI_[\"sound\"].play('hit_damage', { speed: (weapon === null || weapon === void 0 ? void 0 : weapon.speed) || 1 });\n        }\n    }\n    lookAtMonsters() {\n        const weapon = this.character.weapon;\n        const distance = (weapon === null || weapon === void 0 ? void 0 : weapon.distance) || 1;\n        const leftHealthSum = this.monstersHealth(ScanDirection.LEFT, distance);\n        const rightHealthSum = this.monstersHealth(ScanDirection.RIGHT, distance);\n        if (leftHealthSum > 0 && leftHealthSum > rightHealthSum) {\n            this.view.is_left = true;\n        }\n        else if (rightHealthSum > 0 && rightHealthSum > leftHealthSum) {\n            this.view.is_left = false;\n        }\n    }\n    scanInteracting(direction, max_distance) {\n        return this.scanCells(direction, max_distance, c => c.interacting);\n    }\n    scanMonsters(direction, max_distance) {\n        return this.scanObjects(direction, max_distance, c => c instanceof monster_MonsterAI);\n    }\n    monstersHealth(direction, max_distance) {\n        return this.scanMonsters(direction, max_distance).map(m => m.character.health.get()).reduce((a, b) => a + b, 0);\n    }\n}\nclass hero_HeroStateView extends external_PIXI_[\"Container\"] {\n    constructor(heroState, options) {\n        super();\n        this.fixedHPSize = options.fixedHPSize;\n        this.hpBarSize = options.hpBarSize || 8;\n        this.maxBarSize = options.maxBarSize || 256;\n        this.maxBarInnerSize = this.maxBarSize - (ui[\"Sizes\"].uiBorder << 1);\n        const barHeight = 18 + (ui[\"Sizes\"].uiBorder << 1);\n        const offsetY = barHeight + ui[\"Sizes\"].uiMargin;\n        this.heroState = heroState;\n        this.health = new bar_view_BarView({\n            color: ui[\"Colors\"].uiRed,\n            width: 0,\n            widthMax: this.maxBarInnerSize\n        });\n        this.xp = new bar_view_BarView({\n            color: ui[\"Colors\"].uiYellow,\n            width: 0,\n            widthMax: this.maxBarInnerSize\n        });\n        this.xp.position.set(0, offsetY);\n        this.coins = new external_PIXI_[\"BitmapText\"](\"\", { font: { name: \"alagard\", size: 16 } });\n        this.coins.position.set(0, offsetY * 2);\n        super.addChild(this.health, this.xp, this.coins);\n        heroState.health.subscribe(this.updateHealth, this);\n        heroState.healthMax.subscribe(this.updateHealthMax, this);\n        heroState.level.subscribe(this.updateXp, this);\n        heroState.levelXp.subscribe(this.updateXp, this);\n        heroState.skillPoints.subscribe(this.updateXp, this);\n        heroState.xp.subscribe(this.updateXp, this);\n        heroState.coins.subscribe(this.updateCoins, this);\n    }\n    destroy() {\n        super.destroy();\n        this.heroState.health.unsubscribe(this.updateHealth, this);\n        this.heroState.healthMax.unsubscribe(this.updateHealthMax, this);\n        this.heroState.level.unsubscribe(this.updateXp, this);\n        this.heroState.levelXp.unsubscribe(this.updateXp, this);\n        this.heroState.skillPoints.unsubscribe(this.updateXp, this);\n        this.heroState.xp.unsubscribe(this.updateXp, this);\n        this.heroState.coins.unsubscribe(this.updateCoins, this);\n    }\n    updateHealthMax(healthMax) {\n        const health = this.heroState.health.get();\n        if (!this.fixedHPSize) {\n            this.health.widthMax = this.hpBarSize * healthMax;\n        }\n        this.health.label = `${health}/${healthMax}`;\n    }\n    updateHealth(health) {\n        const healthMax = this.heroState.healthMax.get();\n        if (this.fixedHPSize) {\n            this.health.width = Math.floor(this.maxBarInnerSize * health / healthMax);\n        }\n        else {\n            this.health.width = this.hpBarSize * health;\n        }\n        this.health.label = `${health}/${healthMax}`;\n    }\n    updateXp() {\n        const level = this.heroState.level.get();\n        const levelXp = this.heroState.levelXp.get();\n        const skillPoints = this.heroState.skillPoints.get();\n        const xp = this.heroState.xp.get();\n        this.xp.widthMax = this.maxBarInnerSize;\n        this.xp.width = Math.floor(this.maxBarInnerSize * xp / levelXp);\n        this.xp.label = `L:${level} XP:${xp}/${levelXp} SP:${skillPoints}`;\n    }\n    updateCoins(coins) {\n        this.coins.text = `$${coins}`;\n    }\n}\n\n// CONCATENATED MODULE: ./src/tiny.monster.ts\n\n\n\n\nconst tinyMonsters = [\n    { name: \"chort\", category: MonsterCategory.DEMON, type: MonsterType.NORMAL, luck: 0.3, weapons: [] },\n    { name: \"wogol\", category: MonsterCategory.DEMON, type: MonsterType.NORMAL, luck: 0.3, weapons: [] },\n    { name: \"imp\", category: MonsterCategory.DEMON, type: MonsterType.NORMAL, luck: 0.3, weapons: [] },\n    {\n        name: \"ice_zombie\",\n        category: MonsterCategory.ZOMBIE,\n        type: MonsterType.NORMAL,\n        luck: 0.3,\n        weapons: [src_drop[\"monsterWeapons\"].knife]\n    },\n    {\n        name: \"tiny_zombie\",\n        category: MonsterCategory.ZOMBIE,\n        type: MonsterType.NORMAL,\n        luck: 0.3,\n        weapons: [src_drop[\"monsterWeapons\"].knife]\n    },\n    {\n        name: \"zombie\",\n        category: MonsterCategory.ZOMBIE,\n        type: MonsterType.NORMAL,\n        luck: 0.3,\n        weapons: [src_drop[\"monsterWeapons\"].knife]\n    },\n    {\n        name: \"orc_shaman\",\n        category: MonsterCategory.ORC,\n        type: MonsterType.LEADER,\n        luck: 0.4,\n        weapons: [src_drop[\"monsterWeapons\"].knife]\n    },\n    {\n        name: \"masked_orc\",\n        category: MonsterCategory.ORC,\n        type: MonsterType.NORMAL,\n        luck: 0.3,\n        weapons: [src_drop[\"monsterWeapons\"].knife]\n    },\n    {\n        name: \"orc_warrior\",\n        category: MonsterCategory.ORC,\n        type: MonsterType.MINION,\n        luck: 0.3,\n        weapons: [src_drop[\"monsterWeapons\"].knife]\n    },\n    { name: \"goblin\", category: MonsterCategory.ORC, type: MonsterType.MINION, luck: 0.3, weapons: [src_drop[\"monsterWeapons\"].knife] },\n    { name: \"swampy\", category: MonsterCategory.SLIME, type: MonsterType.NORMAL, luck: 0.3, weapons: [] },\n    { name: \"muddy\", category: MonsterCategory.SLIME, type: MonsterType.NORMAL, luck: 0.3, weapons: [] },\n    {\n        name: \"necromancer\",\n        category: MonsterCategory.UNDEAD,\n        type: MonsterType.LEADER,\n        luck: 0.4,\n        weapons: [src_drop[\"monsterWeapons\"].knife]\n    },\n    {\n        name: \"skeleton\",\n        category: MonsterCategory.UNDEAD,\n        type: MonsterType.MINION,\n        luck: 0.3,\n        weapons: [src_drop[\"monsterWeapons\"].knife]\n    },\n];\nclass tiny_monster_TinyMonster extends monster_MonsterCharacter {\n    constructor(config, level, weapon) {\n        super({\n            name: config.name,\n            category: config.category,\n            type: config.type,\n            speed: 0.8,\n            healthMax: 10 + Math.floor(level * 2),\n            level: level,\n            luck: config.luck,\n            baseDamage: 1 + 0.5 * level,\n            xp: 35 + 5 * level,\n            spawn: 3,\n            weapon: weapon,\n        });\n    }\n}\nclass tiny_monster_TinyMonsterAI extends monster_MonsterAI {\n    constructor(config, dungeon, x, y) {\n        super(dungeon, {\n            x: x,\n            y: y,\n            width: 1,\n            height: 1,\n            zIndex: DungeonZIndexes.character\n        });\n        this.max_distance = 5;\n        const weapon = config.luck < this.dungeon.rng.nextFloat() ?\n            src_drop[\"Weapon\"].select(this.dungeon.controller.resources, this.dungeon.rng, config.weapons) : null;\n        this.character = new tiny_monster_TinyMonster(config, dungeon.level, weapon);\n        this.view.setWeapon(this.character.weapon);\n        this.init();\n    }\n    action(finished) {\n        if (!this.character.dead.get() && finished) {\n            const leader = this.character.type === MonsterType.LEADER;\n            if (leader) {\n                if (this.spawnMinions()) {\n                    return false;\n                }\n                if (this.moveFromHeroOrAttack()) {\n                    return true;\n                }\n                this.ready();\n            }\n            else {\n                if (this.moveToHero()) {\n                    return true;\n                }\n                if (this.moveByPath()) {\n                    return true;\n                }\n                this.ready();\n                if (this.randomMove()) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    moveFromHeroOrAttack() {\n        const [hero] = this.scanHero(ScanDirection.AROUND, this.max_distance);\n        if (hero) {\n            this.lookAt(hero);\n            this.sendAlarm(hero);\n            const dist_x = Math.abs(this.x - hero.x);\n            const dist_y = Math.abs(this.y - hero.y);\n            if (dist_x > this.width || dist_y > this.height) {\n                const dx = Math.min(1, Math.max(-1, this.x - hero.x));\n                const dy = Math.min(1, Math.max(-1, this.y - hero.y));\n                console.log(\"move from hero\");\n                return this.move(dx, dy) || this.move(dx, 0) || this.move(0, dy);\n            }\n            else if (this.character.luck < this.dungeon.rng.nextFloat()) {\n                console.log(\"attack hero\");\n                this.hit();\n                return true;\n            }\n        }\n        return false;\n    }\n    drop() {\n        var _a;\n        if (Math.random() < this.character.luck) {\n            (_a = this.findDropCell()) === null || _a === void 0 ? void 0 : _a.randomDrop();\n        }\n    }\n    spawnMinion(x, y) {\n        const minions = tinyMonsters.filter(c => c.category === this.character.category && c.type === MonsterType.MINION);\n        if (minions.length === 0) {\n            console.warn(\"no minion config found\", this.character.category);\n            return null;\n        }\n        const config = this.dungeon.rng.choice(minions);\n        return new tiny_monster_TinyMonsterAI(config, this.dungeon, x, y);\n    }\n}\n\n// CONCATENATED MODULE: ./src/boss.monster.ts\n\n\n\n\n\n\n\nconst bossMonsters = [\n    {\n        name: \"big_zombie\", category: MonsterCategory.ZOMBIE, weapons: [\n            src_drop[\"monsterWeapons\"].anime_sword,\n            src_drop[\"monsterWeapons\"].baton_with_spikes,\n            src_drop[\"monsterWeapons\"].big_hammer,\n            src_drop[\"monsterWeapons\"].cleaver,\n            src_drop[\"monsterWeapons\"].mace,\n        ]\n    },\n    { name: \"big_demon\", category: MonsterCategory.DEMON, weapons: [] },\n    {\n        name: \"ogre\", category: MonsterCategory.ORC, weapons: [\n            src_drop[\"monsterWeapons\"].anime_sword,\n            src_drop[\"monsterWeapons\"].baton_with_spikes,\n            src_drop[\"monsterWeapons\"].big_hammer,\n            src_drop[\"monsterWeapons\"].cleaver,\n            src_drop[\"monsterWeapons\"].mace,\n        ]\n    },\n];\nclass boss_monster_BossMonster extends monster_MonsterCharacter {\n    constructor(config, level, weapon) {\n        super({\n            name: config.name,\n            category: config.category,\n            type: MonsterType.LEADER,\n            speed: 0.5,\n            healthMax: 50 + Math.floor(level * 10),\n            level: level,\n            luck: 0.4,\n            baseDamage: 5 + 0.5 * level,\n            xp: 100 + 50 * level,\n            spawn: 5,\n            weapon: weapon,\n        });\n    }\n}\nclass boss_monster_BossMonsterAI extends monster_MonsterAI {\n    constructor(config, dungeon, x, y) {\n        super(dungeon, {\n            width: 2,\n            height: 2,\n            x: x,\n            y: y,\n            zIndex: DungeonZIndexes.character\n        });\n        this.max_distance = 7;\n        const weapon = src_drop[\"Weapon\"].select(this.dungeon.controller.resources, this.dungeon.rng, config.weapons);\n        this.character = new boss_monster_BossMonster(config, dungeon.level, weapon);\n        this.view.setWeapon(this.character.weapon);\n        this.init();\n        const c_w = dungeon.controller.app.screen.width;\n        const healthView = new boss_monster_BossHealthView(this.character);\n        healthView.zIndex = 13;\n        healthView.position.set((c_w >> 1), 64);\n        dungeon.controller.stage.addChild(healthView);\n    }\n    action(finished) {\n        if (!this.character.dead.get() && finished) {\n            if (this.spawnMinions()) {\n                return false;\n            }\n            if (this.moveToHero()) {\n                return true;\n            }\n            if (this.moveByPath()) {\n                return true;\n            }\n            this.ready();\n            if (this.randomMove()) {\n                return true;\n            }\n        }\n        return false;\n    }\n    drop() {\n        var _a;\n        for (let i = 0; i < 9; i++) {\n            (_a = this.findDropCell()) === null || _a === void 0 ? void 0 : _a.randomDrop();\n        }\n    }\n    spawnMinion(x, y) {\n        const minions = tinyMonsters.filter(c => c.category === this.character.category && c.type !== MonsterType.LEADER);\n        if (minions.length === 0) {\n            console.warn(\"no minion config found\", this.character.category);\n            return null;\n        }\n        const config = this.dungeon.rng.choice(minions);\n        return new tiny_monster_TinyMonsterAI(config, this.dungeon, x, y);\n    }\n}\nclass boss_monster_BossHealthView extends external_PIXI_[\"Container\"] {\n    constructor(boss) {\n        super();\n        this.destroyed = false;\n        this.boss = boss;\n        const HEALTH_MAX_WIDTH = 500;\n        const HEALTH_WIDTH = 4;\n        this.pointWidth = Math.min(HEALTH_WIDTH, Math.floor(HEALTH_MAX_WIDTH / this.boss.healthMax.get()));\n        this.widthMax = this.pointWidth * this.boss.healthMax.get();\n        this.health = new bar_view_BarView({\n            color: ui[\"Colors\"].uiRed,\n            widthMax: this.widthMax,\n            labelCenter: true\n        });\n        this.health.position.set(-(this.widthMax >> 1), 0);\n        this.addChild(this.health);\n        this.boss.health.subscribe(this.updateHealth, this);\n        this.boss.dead.subscribe(this.updateDead, this);\n    }\n    destroy() {\n        if (!this.destroyed) {\n            this.destroyed = true;\n            this.boss.health.unsubscribe(this.updateHealth, this);\n            this.boss.dead.unsubscribe(this.updateDead, this);\n            this.health.destroy();\n            super.destroy();\n        }\n    }\n    updateHealth(health) {\n        this.health.width = this.pointWidth * health;\n        this.health.label = `${this.boss.name} - ${health}`;\n    }\n    updateDead(dead) {\n        if (dead) {\n            this.destroy();\n        }\n    }\n}\n\n// CONCATENATED MODULE: ./src/npc.ts\n\n\n\nclass NpcSkill {\n    constructor(npc, controller) {\n        this.npc = npc;\n        this.controller = controller;\n    }\n}\nclass SellingSkill extends NpcSkill {\n    constructor(npc, controller) {\n        super(npc, controller);\n    }\n    use(hero) {\n        this.controller.showInventory(hero, this.npc);\n    }\n}\nSellingSkill.id = 'selling';\nclass npc_HealSkill extends NpcSkill {\n    constructor(npc, controller) {\n        super(npc, controller);\n    }\n    use(hero) {\n        external_PIXI_[\"sound\"].play('big_egg_collect');\n        hero.heal(hero.healthMax.get());\n    }\n}\nnpc_HealSkill.id = 'heal';\nconst npcCharacters = [\n    { name: \"alchemist\", width: 1, height: 1, skills: [SellingSkill.id] },\n    { name: \"archer\", width: 1, height: 1, skills: [SellingSkill.id] },\n    { name: \"bishop\", width: 1, height: 2, skills: [] },\n    { name: \"blacksmith\", width: 1, height: 1, skills: [SellingSkill.id] },\n    { name: \"butcher\", width: 1, height: 1, skills: [SellingSkill.id] },\n    { name: \"elite_knight\", width: 1, height: 1, skills: [] },\n    { name: \"executioner\", width: 2, height: 2, skills: [] },\n    { name: \"fat_nun\", width: 1, height: 1, skills: [npc_HealSkill.id] },\n    { name: \"heavy_knight\", width: 1, height: 1, skills: [] },\n    { name: \"herald\", width: 1, height: 1, skills: [] },\n    { name: \"king\", width: 1, height: 1, skills: [] },\n    { name: \"knight\", width: 1, height: 1, skills: [] },\n    { name: \"large_elite_knight\", width: 2, height: 2, skills: [] },\n    { name: \"large_knight\", width: 2, height: 2, skills: [] },\n    { name: \"mage\", width: 1, height: 1, skills: [SellingSkill.id] },\n    { name: \"magic_shop_keeper\", width: 1, height: 1, skills: [SellingSkill.id] },\n    { name: \"merchant\", width: 1, height: 1, skills: [SellingSkill.id] },\n    { name: \"mountain_king\", width: 1, height: 1, skills: [] },\n    { name: \"normal_nun\", width: 1, height: 1, skills: [npc_HealSkill.id] },\n    { name: \"princess\", width: 1, height: 1, skills: [] },\n    { name: \"queen\", width: 1, height: 1, skills: [] },\n    { name: \"skinny_nun\", width: 1, height: 1, skills: [npc_HealSkill.id] },\n    { name: \"thief\", width: 1, height: 1, skills: [SellingSkill.id] },\n    { name: \"townsfolk_f\", width: 1, height: 1, skills: [] },\n];\nclass npc_NpcCharacter extends character_Character {\n    constructor(name) {\n        super({\n            name: name,\n            speed: 1,\n            healthMax: 100\n        });\n        this._context = {};\n        this._skill = {};\n        this.damage = 1;\n        this.weapon = null;\n    }\n    setContext(key, value) {\n        this._context[key] = value;\n    }\n    getContext(key) {\n        return this._context[key];\n    }\n    hasSkill(id) {\n        return this._skill.hasOwnProperty(id);\n    }\n    getSkill(id) {\n        return this._skill[id] || null;\n    }\n    addSkill(id, skill) {\n        this._skill[id] = skill;\n    }\n}\nclass npc_NpcAI extends character_BaseCharacterAI {\n    constructor(config, dungeon, controller, x, y) {\n        super(dungeon, {\n            width: config.width,\n            height: config.height,\n            x: x,\n            y: y,\n            zIndex: DungeonZIndexes.character\n        });\n        this.interacting = true;\n        this.character = new npc_NpcCharacter(config.name);\n        this.initSkills(controller, config.skills);\n        this.init();\n    }\n    initSkills(controller, skills) {\n        for (const id of skills) {\n            switch (id) {\n                case SellingSkill.id:\n                    this.character.addSkill(id, new SellingSkill(this.character, controller));\n                    break;\n                case npc_HealSkill.id:\n                    this.character.addSkill(id, new npc_HealSkill(this.character, controller));\n                    break;\n            }\n        }\n    }\n    onDead() {\n    }\n    onKilledBy(_by) {\n    }\n    action() {\n        return false;\n    }\n    scanHit() {\n    }\n    interact(hero) {\n        this.lookAt(hero);\n        this.dungeon.controller.showDialog(hero.character, this.character);\n    }\n}\n\n// CONCATENATED MODULE: ./src/dungeon.bonfire.ts\n\n\n\n\nconst dungeon_bonfire_TILE_SIZE = 16;\nvar BonfireState;\n(function (BonfireState) {\n    BonfireState[BonfireState[\"UNLIT\"] = 0] = \"UNLIT\";\n    BonfireState[BonfireState[\"LIGHT\"] = 1] = \"LIGHT\";\n    BonfireState[BonfireState[\"LIT\"] = 2] = \"LIT\";\n})(BonfireState || (BonfireState = {}));\nclass dungeon_bonfire_DungeonBonfire {\n    constructor(dungeon, x, y, light) {\n        this.width = 1;\n        this.height = 1;\n        this.static = true;\n        this.interacting = true;\n        this.dungeon = dungeon;\n        this.x = x;\n        this.y = y;\n        this._state = BonfireState.UNLIT;\n        this._sprite = this.dungeon.animated(this.x, this.y, `bonfire_unlit`);\n        this._sprite.zIndex = DungeonZIndexes.static + this.y * DungeonZIndexes.row;\n        this.dungeon.set(this.x, this.y, this);\n        if (light)\n            this.light();\n    }\n    get state() {\n        return this._state;\n    }\n    destroy() {\n        this.dungeon.remove(this.x, this.y, this);\n        this._sprite.destroy();\n    }\n    interact(hero) {\n        switch (this._state) {\n            case BonfireState.UNLIT:\n                hero.character.bonfires.add(this.dungeon.level);\n                this.light();\n                break;\n            case BonfireState.LIGHT:\n            case BonfireState.LIT:\n                this.dungeon.controller.showBonfire(hero.character);\n                break;\n        }\n    }\n    collide(_) {\n        return true;\n    }\n    light() {\n        if (this._state === BonfireState.UNLIT) {\n            this._state = BonfireState.LIGHT;\n            this._sprite.destroy();\n            this._sprite = this.dungeon.animated(this.x, this.y, \"bonfire_light\");\n            this._sprite.zIndex = DungeonZIndexes.static + this.y * DungeonZIndexes.row;\n            this._sprite.loop = false;\n            this._sprite.onComplete = () => this.lit();\n            this.dungeon.light.addLight({\n                x: this.x * dungeon_bonfire_TILE_SIZE + 8,\n                y: this.y * dungeon_bonfire_TILE_SIZE - dungeon_bonfire_TILE_SIZE,\n            }, LightType.BONFIRE);\n        }\n    }\n    lit() {\n        var _a;\n        this._state = BonfireState.LIT;\n        (_a = this._sprite) === null || _a === void 0 ? void 0 : _a.destroy();\n        this._sprite = this.dungeon.animated(this.x, this.y, \"bonfire_lit\");\n        this._sprite.zIndex = DungeonZIndexes.static + this.y * DungeonZIndexes.row;\n    }\n}\nclass dungeon_bonfire_DungeonBonfireDialogModal {\n    constructor(controller, hero) {\n        this.container = null;\n        this.background = null;\n        this.selectable = null;\n        this.controller = controller;\n        this.hero = hero;\n    }\n    init() {\n        const width = 400;\n        const height = 400;\n        const button_height = 32;\n        const button_text_size = 24;\n        this.selectable = new ui[\"SelectableGrid\"](this.controller.joystick);\n        this.background = new external_PIXI_[\"Graphics\"]();\n        this.background.beginFill(0x000000).drawRect(0, 0, width, height).endFill();\n        this.background.zIndex = 0;\n        this.container = new external_PIXI_[\"Container\"]();\n        this.container.addChild(this.background);\n        this.container.sortChildren();\n        this.container.position.set((this.controller.app.screen.width >> 1) - (width >> 1), (this.controller.app.screen.height >> 1) - (height >> 1));\n        this.controller.stage.addChild(this.container);\n        this.controller.app.ticker.add(this.handleInput, this);\n        const layout = new ui[\"Layout\"]();\n        layout.offset(ui[\"Sizes\"].uiMargin, ui[\"Sizes\"].uiMargin);\n        layout.commit();\n        let y = 0;\n        const addButton = (label, action) => {\n            const button = new ui[\"Button\"]({\n                label: label,\n                width: width - ui[\"Sizes\"].uiMargin * 2,\n                height: button_height,\n                textSize: button_text_size\n            });\n            this.container.addChild(button);\n            button.position.set(layout.x, layout.y);\n            layout.offset(0, button_height);\n            layout.offset(0, ui[\"Sizes\"].uiMargin);\n            this.selectable.set(0, y, button, action);\n            y++;\n        };\n        const levels = [...this.hero.bonfires].sort((a, b) => a - b);\n        for (const level of levels) {\n            addButton(`Level ${level}`, () => this.goto(level));\n        }\n        addButton(`Cancel`, () => this.cancel());\n    }\n    goto(level) {\n        this.controller.closeModal();\n        this.controller.generateDungeon({\n            hero: this.hero,\n            level: level\n        });\n    }\n    cancel() {\n        this.controller.closeModal();\n    }\n    handleInput() {\n        var _a;\n        (_a = this.selectable) === null || _a === void 0 ? void 0 : _a.handleInput();\n    }\n    destroy() {\n        var _a, _b;\n        this.controller.app.ticker.remove(this.handleInput, this);\n        (_a = this.container) === null || _a === void 0 ? void 0 : _a.destroy();\n        this.container = null;\n        (_b = this.background) === null || _b === void 0 ? void 0 : _b.destroy();\n        this.background = null;\n        this.selectable = null;\n    }\n}\n\n// CONCATENATED MODULE: ./src/dungeon.generator.ts\n\n\n\n\n\n\n\n\n\nclass dungeon_generator_BaseDungeonGenerator {\n    constructor(controller) {\n        this.resources = controller.resources;\n        this.controller = controller;\n    }\n    createDungeon(rng, seed, level, width, height) {\n        return new dungeon_map_DungeonMap(this.controller, new external_PIXI_[\"Ticker\"](), rng, seed, level, width, height);\n    }\n    replaceFloorRandomly(rng, dungeon) {\n        const replacements = ['floor_2.png', 'floor_3.png', 'floor_4.png', 'floor_5.png', 'floor_6.png', 'floor_7.png', 'floor_8.png'];\n        const percent = 0.2;\n        for (let y = 0; y < dungeon.height; y++) {\n            for (let x = 0; x < dungeon.width; x++) {\n                const cell = dungeon.cell(x, y);\n                if (cell.hasFloor && rng.nextFloat() < percent) {\n                    cell.floorName = rng.choice(replacements);\n                }\n            }\n        }\n    }\n    replaceWallRandomly(rng, dungeon) {\n        const banners = [\n            'wall_banner_red.png',\n            'wall_banner_blue.png',\n            'wall_banner_green.png',\n            'wall_banner_yellow.png',\n        ];\n        const goo = [\n            'wall_goo.png',\n        ];\n        const fountains = [\n            'wall_fountain_mid_red',\n            'wall_fountain_mid_blue',\n        ];\n        const holes = [\n            'wall_hole_1.png',\n            'wall_hole_2.png',\n        ];\n        const percent = 0.3;\n        for (let y = 0; y < dungeon.height; y++) {\n            for (let x = 0; x < dungeon.width; x++) {\n                const cell = dungeon.cell(x, y);\n                if (cell.wallName === 'wall_mid.png') {\n                    if (rng.nextFloat() < percent) {\n                        const replacements = [...holes];\n                        const has_floor = y + 1 < dungeon.height && dungeon.cell(x, y + 1).floorName === 'floor_1.png';\n                        if (has_floor) {\n                            replacements.push(...banners);\n                            replacements.push(...goo);\n                        }\n                        const has_top = y > 0 && dungeon.cell(x, y - 1).wallName === 'wall_top_mid.png';\n                        if (has_top && has_floor) {\n                            replacements.push(...fountains);\n                        }\n                        const replacement = rng.choice(replacements);\n                        switch (replacement) {\n                            case 'wall_goo.png':\n                                dungeon.cell(x, y).wallName = 'wall_goo.png';\n                                dungeon.cell(x, y + 1).floorName = 'wall_goo_base.png';\n                                break;\n                            case 'wall_fountain_mid_red':\n                                dungeon.cell(x, y - 1).wallName = 'wall_fountain_top.png';\n                                dungeon.cell(x, y).wallName = 'wall_fountain_mid_red';\n                                dungeon.cell(x, y + 1).floorName = 'wall_fountain_basin_red';\n                                break;\n                            case 'wall_fountain_mid_blue':\n                                dungeon.cell(x, y - 1).wallName = 'wall_fountain_top.png';\n                                dungeon.cell(x, y).wallName = 'wall_fountain_mid_blue';\n                                dungeon.cell(x, y + 1).floorName = 'wall_fountain_basin_blue';\n                                break;\n                            default:\n                                dungeon.cell(x, y).wallName = replacement;\n                                break;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    distance(a, b) {\n        return Math.max(Math.abs(a.x - b.x), Math.abs(a.y - b.y));\n    }\n    findFreePositions(dungeon, width, height) {\n        const free = [];\n        for (let y = height; y < dungeon.height; y++) {\n            for (let x = 0; x < dungeon.width - width; x++) {\n                let valid = true;\n                for (let dy = 0; dy < height && valid; dy++) {\n                    for (let dx = 0; dx < width && valid; dx++) {\n                        const cell = dungeon.cell(x + dx, y - dy);\n                        valid = cell.hasFloor && !cell.hasObject;\n                    }\n                }\n                if (valid)\n                    free.push(dungeon.cell(x, y));\n            }\n        }\n        return free;\n    }\n    placeHero(rng, dungeon, hero) {\n        const free = this.findFreePositions(dungeon, 2, 2);\n        if (free.length === 0) {\n            throw \"hero not placed\";\n        }\n        const cell = rng.choice(free);\n        const ai = new hero_HeroAI(hero, dungeon, cell.x, cell.y);\n        dungeon.light.addLight(ai.view, LightType.HERO);\n        return ai;\n    }\n    placeNpc(rng, dungeon, hero) {\n        const max_hero_distance = 10;\n        const npc_count = 5;\n        for (let n = 0; n < npc_count; n++) {\n            const free = this.findFreePositions(dungeon, 2, 2).filter(cell => {\n                return this.distance(hero, cell) < max_hero_distance;\n            });\n            if (free.length === 0) {\n                console.warn(\"no free place for npc\");\n            }\n            const i = rng.nextRange(0, free.length);\n            const [cell] = free.splice(i, 1);\n            const config = rng.choice(npcCharacters);\n            new npc_NpcAI(config, dungeon, this.controller, cell.x, cell.y);\n        }\n    }\n    placeMonsters(rng, dungeon, hero) {\n        const total_space = dungeon.width * dungeon.height;\n        const floor_space = Math.floor(total_space * 0.4);\n        const spawn_space = Math.floor(floor_space * 0.2);\n        const monster_count = Math.floor(spawn_space * 0.07);\n        console.log(`floor_space: ${floor_space}`);\n        console.log(`monster_count: ${monster_count}`);\n        for (let m = 0; m < monster_count; m++) {\n            if (!this.placeMonster(rng, dungeon, hero)) {\n                break;\n            }\n        }\n    }\n    placeMonster(rng, dungeon, hero) {\n        const monster_category = this.bossConfig(dungeon).category;\n        const filtered_monsters = tinyMonsters.filter(config => {\n            return config.category === monster_category ||\n                (config.category != MonsterCategory.DEMON &&\n                    config.category != MonsterCategory.ORC &&\n                    config.category != MonsterCategory.ZOMBIE);\n        });\n        if (filtered_monsters.length === 0) {\n            console.warn(\"no tiny monster config found\");\n            return false;\n        }\n        const min_hero_distance = 15;\n        const free = this.findFreePositions(dungeon, 2, 2).filter(cell => {\n            return this.distance(hero, cell) > min_hero_distance;\n        });\n        if (free.length === 0) {\n            console.warn(\"no free place for tiny monster\");\n            return false;\n        }\n        const i = rng.nextRange(0, free.length);\n        let [cell] = free.splice(i, 1);\n        const config = rng.choice(filtered_monsters);\n        new tiny_monster_TinyMonsterAI(config, dungeon, cell.x, cell.y);\n        return true;\n    }\n    placeBoss(rng, dungeon, hero) {\n        const min_hero_distance = 20;\n        const free = this.findFreePositions(dungeon, 2, 2).filter(cell => {\n            return this.distance(hero, cell) > min_hero_distance;\n        });\n        if (free.length > 0) {\n            const i = rng.nextRange(0, free.length);\n            let [cell] = free.splice(i, 1);\n            const config = this.bossConfig(dungeon);\n            new boss_monster_BossMonsterAI(config, dungeon, cell.x, cell.y);\n        }\n        else {\n            console.error(\"boss not placed\");\n        }\n    }\n    bossConfig(dungeon) {\n        return bossMonsters[Math.floor(dungeon.level / 5) % bossMonsters.length];\n    }\n    placeDrop(rng, dungeon) {\n        const free = [];\n        for (let y = 0; y < dungeon.height; y++) {\n            for (let x = 0; x < dungeon.height; x++) {\n                const cell = dungeon.cell(x, y);\n                if (cell.hasFloor && !cell.hasDrop && !cell.hasObject) {\n                    free.push(cell);\n                }\n            }\n        }\n        const drop_percent = 3;\n        const drop_count = Math.floor(free.length * drop_percent / 100.0);\n        for (let d = 0; d < drop_count && free.length > 0; d++) {\n            const i = rng.nextRange(0, free.length);\n            free.splice(i, 1)[0].randomDrop();\n        }\n    }\n    placeLadder(rng, dungeon, hero) {\n        const free3 = [];\n        const free1 = [];\n        const directions = [[-1, -1], [0, -1], [1, -1], [-1, 0], [1, 0], [-1, 1], [0, 1], [1, 1]];\n        for (let y = 1; y < dungeon.height - 1; y++) {\n            for (let x = 1; x < dungeon.height - 1; x++) {\n                const cell = dungeon.cell(x, y);\n                if (cell.hasFloor) {\n                    let c = 0;\n                    for (let [dx, dy] of directions) {\n                        if (dungeon.cell(x + dx, y + dy).hasFloor) {\n                            c++;\n                        }\n                    }\n                    const distance = this.distance(hero, { x: x, y: y });\n                    if (c === directions.length) {\n                        free3.push([cell, distance]);\n                    }\n                    else {\n                        free1.push([cell, distance]);\n                    }\n                }\n            }\n        }\n        free3.sort((a, b) => a[1] - b[1]);\n        free1.sort((a, b) => a[1] - b[1]);\n        const free = [...free1, ...free3].reverse().splice(0, 10);\n        if (free.length == 0) {\n            throw \"ladder not set\";\n        }\n        rng.choice(free)[0].ladder();\n    }\n    placeBonfire(rng, dungeon, hero) {\n        const max_hero_distance = 10;\n        const free = this.findFreePositions(dungeon, 2, 2).filter(cell => {\n            return this.distance(hero, cell) < max_hero_distance;\n        });\n        if (free.length > 0) {\n            const cell = rng.choice(free);\n            const light = hero.character.bonfires.has(dungeon.level);\n            return new dungeon_bonfire_DungeonBonfire(dungeon, cell.x, cell.y, light);\n        }\n        else {\n            throw \"bonfire not placed\";\n        }\n    }\n}\n\n// CONCATENATED MODULE: ./src/concurency.ts\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try {\n            step(generator.next(value));\n        }\n        catch (e) {\n            reject(e);\n        } }\n        function rejected(value) { try {\n            step(generator[\"throw\"](value));\n        }\n        catch (e) {\n            reject(e);\n        } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nfunction yields(delay = 0) {\n    return __awaiter(this, void 0, void 0, function* () {\n        return yield new Promise((resolve => setTimeout(resolve, delay)));\n    });\n}\n\n// CONCATENATED MODULE: ./src/wfc/model.ts\nvar model_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try {\n            step(generator.next(value));\n        }\n        catch (e) {\n            reject(e);\n        } }\n        function rejected(value) { try {\n            step(generator[\"throw\"](value));\n        }\n        catch (e) {\n            reject(e);\n        } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\nfunction model_buffer(size, value) {\n    const a = [];\n    for (let i = 0; i < size; i++) {\n        a.push(value);\n    }\n    return a;\n}\nclass Color {\n    constructor(R, G, B, A = 255) {\n        this.R = R;\n        this.G = G;\n        this.B = B;\n        this.A = A;\n    }\n    static fromRgb(rgb) {\n        const r = (rgb >> 16) & 0xFF;\n        const g = (rgb >> 8) & 0xFF;\n        const b = rgb & 0xFF;\n        return new Color(r, g, b);\n    }\n    static fromImage(imageData, x, y) {\n        return Color.fromBuffer(imageData.data, imageData.width, x, y);\n    }\n    static fromBuffer(buffer, w, x, y) {\n        let offset = 4 * (y * w + x);\n        let R = buffer[offset];\n        let G = buffer[offset + 1];\n        let B = buffer[offset + 2];\n        let A = buffer[offset + 3];\n        return new Color(R, G, B, A);\n    }\n    equals(that) {\n        return this.R === that.R &&\n            this.G === that.G &&\n            this.B === that.B &&\n            this.A === that.A;\n    }\n}\nclass Tile {\n    constructor(value, color, equal = (a, b) => a === b) {\n        this.value = value;\n        this.color = color;\n        this.equal = equal;\n    }\n    equals(that) {\n        return that.equal(this.value, that.value);\n    }\n}\nvar Resolution;\n(function (Resolution) {\n    Resolution[Resolution[\"Decided\"] = 0] = \"Decided\";\n    Resolution[Resolution[\"Undecided\"] = -1] = \"Undecided\";\n    Resolution[Resolution[\"Contradiction\"] = -2] = \"Contradiction\";\n})(Resolution || (Resolution = {}));\nclass model_Model {\n    constructor(rng, width, height) {\n        this.wave = [];\n        this.propagator = [];\n        this.compatible = [];\n        this.observed = null;\n        this.toPropagate = [];\n        this.backtrackItems = [];\n        this.backtrackItemsLengths = [];\n        this.prevChoices = [];\n        this.droppedBacktrackItemsCount = 0;\n        this.T = 0;\n        this.periodic = false;\n        this.weights = [];\n        this.weightLogWeights = [];\n        this.sumsOfOnes = [];\n        this.sumOfWeights = 0;\n        this.sumOfWeightLogWeights = 0;\n        this.startingEntropy = 0;\n        this.sumsOfWeights = [];\n        this.sumsOfWeightLogWeights = [];\n        this.entropies = [];\n        this.status = Resolution.Undecided;\n        this.deferredConstraintsStep = false;\n        this.debug = false;\n        this.rng = rng;\n        this.FMX = width;\n        this.FMY = height;\n    }\n    get percent() {\n        let count = 0;\n        for (let i = 0; i < this.wave.length; i++) {\n            if (this.sumsOfOnes[i] === 1) {\n                count++;\n            }\n        }\n        return count * 100.0 / this.wave.length;\n    }\n    init() {\n        this.wave = model_buffer(this.FMX * this.FMY, []);\n        this.compatible = [];\n        for (let i = 0; i < this.wave.length; i++) {\n            this.wave[i] = model_buffer(this.T, true);\n            this.compatible[i] = [];\n            for (let t = 0; t < this.T; t++) {\n                this.compatible[i][t] = model_buffer(4, 0);\n            }\n        }\n        this.weightLogWeights = [];\n        this.sumOfWeights = 0;\n        this.sumOfWeightLogWeights = 0;\n        for (let t = 0; t < this.T; t++) {\n            this.weightLogWeights[t] = this.weights[t] * Math.log(this.weights[t]);\n            this.sumOfWeights += this.weights[t];\n            this.sumOfWeightLogWeights += this.weightLogWeights[t];\n        }\n        this.startingEntropy = Math.log(this.sumOfWeights) - this.sumOfWeightLogWeights / this.sumOfWeights;\n        this.status = Resolution.Undecided;\n        this.initConstraint();\n    }\n    clear() {\n        this.sumsOfOnes = [];\n        this.sumsOfWeights = [];\n        this.sumsOfWeightLogWeights = [];\n        this.entropies = [];\n        for (let i = 0; i < this.wave.length; i++) {\n            for (let t = 0; t < this.T; t++) {\n                this.wave[i][t] = true;\n                for (let d = 0; d < 4; d++) {\n                    this.compatible[i][t][d] = this.propagator[model_Model.opposite[d]][t].length;\n                }\n            }\n            this.sumsOfOnes[i] = this.weights.length;\n            this.sumsOfWeights[i] = this.sumOfWeights;\n            this.sumsOfWeightLogWeights[i] = this.sumOfWeightLogWeights;\n            this.entropies[i] = this.startingEntropy;\n        }\n        this.toPropagate = [];\n        this.backtrackItems = [];\n        this.backtrackItemsLengths = [0];\n        this.droppedBacktrackItemsCount = 0;\n        this.prevChoices = [];\n        this.status = Resolution.Undecided;\n    }\n    run(limit = 0, debug = false) {\n        return model_awaiter(this, void 0, void 0, function* () {\n            if (this.wave.length === 0) {\n                console.time(\"model.init\");\n                this.init();\n                console.timeEnd(\"model.init\");\n            }\n            console.time(\"model.clear\");\n            this.clear();\n            console.timeEnd(\"model.clear\");\n            console.time(\"model.run\");\n            this.debug = debug;\n            let i = 0;\n            for (; i < limit || limit === 0; i++) {\n                if (i % 50 === 0) {\n                    yield yields();\n                }\n                if (this.debug) {\n                    console.log(\"step\", i);\n                }\n                this.step();\n                if (this.debug) {\n                    console.log(\"after step\", i);\n                    this.graphics([]);\n                }\n                if (this.status !== Resolution.Undecided) {\n                    break;\n                }\n            }\n            console.timeEnd(\"model.run\");\n            console.log(`complete, steps: ${i}`);\n            return this.status;\n        });\n    }\n    step() {\n        let index = -1;\n        let pattern;\n        let restart = false;\n        if (this.deferredConstraintsStep) {\n            if (this.debug)\n                console.log(\"step constraint\");\n            this.stepConstraint();\n        }\n        if (this.status != Resolution.Undecided) {\n            index = 0;\n            restart = true;\n            if (this.debug)\n                console.log(\"restart = true\");\n        }\n        if (!restart) {\n            console.assert(this.toPropagate.length == 0);\n            this.backtrackItemsLengths.push(this.droppedBacktrackItemsCount + this.backtrackItems.length);\n            [index, pattern] = this.observe();\n            if (this.debug)\n                console.log(\"observed\", index, pattern);\n            if (index !== -1) {\n                if (this.debug)\n                    console.log(\"push to prev choices\");\n                this.prevChoices.push([index, pattern]);\n            }\n        }\n        do {\n            if (this.debug)\n                console.log(\"do loop\");\n            restart = false;\n            if (this.debug)\n                console.log(\"status\", this.status);\n            if (this.status === Resolution.Undecided)\n                this.propagate();\n            if (this.status === Resolution.Undecided)\n                this.stepConstraint();\n            if (index === -1 && this.status === Resolution.Undecided) {\n                if (this.debug)\n                    console.log(\"decided\");\n                this.status = Resolution.Decided;\n                return this.status;\n            }\n            if (this.status === Resolution.Contradiction) {\n                if (this.debug)\n                    console.log(\"contradiction\");\n                index = 0;\n                while (true) {\n                    if (this.debug)\n                        console.log(\"while backtrack\");\n                    if (this.backtrackItemsLengths.length == 1) {\n                        if (this.debug)\n                            console.log(\"We've backtracked as much as we can, but, it's still not possible. That means it is impossible\");\n                        return Resolution.Contradiction;\n                    }\n                    this.backtrack();\n                    let item = this.prevChoices.pop();\n                    this.toPropagate = [];\n                    this.status = Resolution.Undecided;\n                    if (this.debug) {\n                        console.log(\"Mark the given choice as impossible\", item[0], item[1]);\n                        this.graphics([item[0]]);\n                    }\n                    if (this.internalBan(item[0], item[1])) {\n                        this.status = Resolution.Contradiction;\n                    }\n                    if (this.status === Resolution.Undecided)\n                        this.propagate();\n                    if (this.status === Resolution.Contradiction) {\n                        if (this.debug)\n                            console.log(\"If still in contradiction, repeat backtracking\");\n                        continue;\n                    }\n                    else {\n                        if (this.debug)\n                            console.log(\"// Include the last ban as part of the previous backtrack\");\n                        console.assert(this.toPropagate.length === 0);\n                        this.backtrackItemsLengths.pop();\n                        this.backtrackItemsLengths.push(this.droppedBacktrackItemsCount + this.backtrackItems.length);\n                    }\n                    if (this.debug)\n                        console.log(\"restart = true and break\");\n                    restart = true;\n                    break;\n                }\n            }\n        } while (restart);\n        return this.status;\n    }\n    observe() {\n        if (this.debug)\n            console.log(\"observe\");\n        let min = 1E+3;\n        let argmin = -1;\n        for (let i = 0; i < this.wave.length; i++) {\n            if (this.onBoundary(i % this.FMX, Math.floor(i / this.FMX)))\n                continue;\n            let amount = this.sumsOfOnes[i];\n            if (amount === 0) {\n                if (this.debug)\n                    console.error(`[wave=${i}] found zero sum of ones`);\n                if (this.debug)\n                    this.graphics([i]);\n                this.status = Resolution.Contradiction;\n                return [-1, -1];\n            }\n            let entropy = this.entropies[i];\n            if (amount > 1 && entropy <= min) {\n                let noise = 1E-6 * this.rng.nextFloat();\n                if (entropy + noise < min) {\n                    min = entropy + noise;\n                    argmin = i;\n                }\n            }\n        }\n        if (argmin == -1) {\n            if (this.debug)\n                console.log(\"complete observed\");\n            this.observed = model_buffer(this.FMX * this.FMY, 0);\n            for (let i = 0; i < this.wave.length; i++) {\n                let x = i % this.FMX, y = Math.floor(i / this.FMX);\n                if (this.onBoundary(x, y)) {\n                    continue;\n                }\n                this.testObserved(i);\n                for (let t = 0; t < this.T; t++) {\n                    if (this.wave[i][t]) {\n                        this.observed[i] = t;\n                        break;\n                    }\n                }\n            }\n            return [-1, -1];\n        }\n        let distribution_sum = 0;\n        let distribution = [];\n        for (let t = 0; t < this.T; t++) {\n            distribution[t] = this.wave[argmin][t] ? this.weights[t] : 0;\n            distribution_sum += distribution[t];\n        }\n        let rnd = this.rng.nextFloat() * distribution_sum;\n        let r = 0;\n        for (let weight of distribution) {\n            rnd -= weight;\n            if (rnd < 0)\n                break;\n            r++;\n        }\n        let w = this.wave[argmin];\n        for (let t = 0; t < this.T; t++) {\n            if (w[t] != (t == r)) {\n                if (this.debug)\n                    console.log(\"observe select\");\n                if (this.internalBan(argmin, t)) {\n                    this.status = Resolution.Contradiction;\n                }\n            }\n        }\n        if (this.debug) {\n            console.log(\"observed\", [argmin, r]);\n            this.graphics([argmin]);\n        }\n        return [argmin, r];\n    }\n    propagate() {\n        while (this.toPropagate.length > 0) {\n            let [i, t] = this.toPropagate.pop();\n            let x = i % this.FMX, y = Math.floor(i / this.FMX);\n            for (let direction = 0; direction < 4; direction++) {\n                const dx = model_Model.DX[direction], dy = model_Model.DY[direction];\n                let sx = x + dx, sy = y + dy;\n                if (this.onBoundary(sx, sy)) {\n                    continue;\n                }\n                if (sx < 0)\n                    sx += this.FMX;\n                else if (sx >= this.FMX)\n                    sx -= this.FMX;\n                if (sy < 0)\n                    sy += this.FMY;\n                else if (sy >= this.FMY)\n                    sy -= this.FMY;\n                let s = sx + sy * this.FMX;\n                let pattern1 = this.propagator[direction][t];\n                let compat = this.compatible[s];\n                for (let st of pattern1) {\n                    let comp = compat[st];\n                    comp[direction]--;\n                    if (comp[direction] == 0) {\n                        if (this.internalBan(s, st)) {\n                            this.status = Resolution.Contradiction;\n                        }\n                    }\n                }\n            }\n            if (this.status == Resolution.Contradiction) {\n                break;\n            }\n        }\n    }\n    ban(index, pattern) {\n        if (this.debug)\n            console.log(\"ban\", index, pattern);\n        if (this.wave[index][pattern]) {\n            this.deferredConstraintsStep = true;\n            if (this.internalBan(index, pattern)) {\n                return this.status = Resolution.Contradiction;\n            }\n        }\n        this.propagate();\n        return this.status;\n    }\n    internalBan(index, pattern) {\n        if (this.debug)\n            console.log(\"internal ban\", index, pattern);\n        this.wave[index][pattern] = false;\n        let comp = this.compatible[index][pattern];\n        for (let d = 0; d < 4; d++) {\n            comp[d] -= this.T;\n        }\n        this.toPropagate.push([index, pattern]);\n        this.sumsOfOnes[index] -= 1;\n        this.sumsOfWeights[index] -= this.weights[pattern];\n        this.sumsOfWeightLogWeights[index] -= this.weightLogWeights[pattern];\n        let sum = this.sumsOfWeights[index];\n        this.entropies[index] = Math.log(sum) - this.sumsOfWeightLogWeights[index] / sum;\n        this.backtrackItems.push([index, pattern]);\n        this.banConstraint(index, pattern);\n        if (this.sumsOfOnes[index] === 0) {\n            if (this.debug) {\n                console.error(\"sum is zero\", index);\n                this.graphics([index]);\n            }\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    backtrack() {\n        const targetLength = this.backtrackItemsLengths.pop() - this.droppedBacktrackItemsCount;\n        if (this.debug)\n            console.warn(\"backtrack\", targetLength);\n        const markup = [];\n        const toPropagateSet = new Set(this.toPropagate.map((i) => i.join(\",\")));\n        while (this.backtrackItems.length > targetLength) {\n            let [index, patternIndex] = this.backtrackItems.pop();\n            markup.push(index);\n            let comp = this.compatible[index][patternIndex];\n            for (let d = 0; d < 4; d++) {\n                comp[d] += this.T;\n            }\n            this.wave[index][patternIndex] = true;\n            this.sumsOfOnes[index] += 1;\n            this.sumsOfWeights[index] += this.weights[patternIndex];\n            this.sumsOfWeightLogWeights[index] += this.weightLogWeights[patternIndex];\n            let sum = this.sumsOfWeights[index];\n            this.entropies[index] = Math.log(sum) - this.sumsOfWeightLogWeights[index] / sum;\n            if (!toPropagateSet.has([index, patternIndex].join(\",\"))) {\n                let x = index % this.FMX, y = Math.floor(index / this.FMX);\n                for (let direction = 0; direction < 4; direction++) {\n                    let dx = model_Model.DX[direction], dy = model_Model.DY[direction];\n                    let sx = x + dx, sy = y + dy;\n                    if (this.onBoundary(sx, sy)) {\n                        continue;\n                    }\n                    if (sx < 0)\n                        sx += this.FMX;\n                    else if (sx >= this.FMX)\n                        sx -= this.FMX;\n                    if (sy < 0)\n                        sy += this.FMY;\n                    else if (sy >= this.FMY)\n                        sy -= this.FMY;\n                    let s = sx + sy * this.FMX;\n                    markup.push(s);\n                    const pattern = this.propagator[direction][patternIndex];\n                    for (let st of pattern) {\n                        this.compatible[s][st][direction]++;\n                    }\n                }\n            }\n            this.backtrackConstraint(index, patternIndex);\n        }\n        if (this.debug) {\n            console.log(\"backtracked\");\n            this.graphics(markup);\n        }\n    }\n}\nmodel_Model.DX = [-1, 0, 1, 0];\nmodel_Model.DY = [0, 1, 0, -1];\nmodel_Model.opposite = [2, 3, 0, 1];\n\n// CONCATENATED MODULE: ./src/geometry.ts\nconst x_dist = 2;\nconst y_dist = 3;\nclass ImmutableRect {\n    constructor(x, y, w, h) {\n        this.x = x;\n        this.y = y;\n        this.w = w;\n        this.h = h;\n    }\n    mutable() {\n        return new MutableRect(this.x, this.y, this.w, this.h);\n    }\n    expand() {\n        const a = this;\n        return new ImmutableRect(a.x - x_dist, a.y - y_dist, a.w + x_dist + x_dist, a.h + y_dist + y_dist);\n    }\n    expandV() {\n        const a = this;\n        return new ImmutableRect(a.x - x_dist, a.y, a.w + x_dist + x_dist, a.h);\n    }\n    expandH() {\n        const a = this;\n        return new ImmutableRect(a.x, a.y - y_dist, a.w, a.h + y_dist + y_dist);\n    }\n    isOverlap(b) {\n        const a = this;\n        return a.x < b.x + b.w\n            && a.x + a.w > b.x\n            && a.y < b.y + b.h\n            && a.y + a.h > b.y;\n    }\n    toString() {\n        return `{x=${this.x},y=${this.y},w=${this.w},h=${this.h}}`;\n    }\n}\nclass MutableRect {\n    constructor(x, y, w, h) {\n        this.x = x;\n        this.y = y;\n        this.w = w;\n        this.h = h;\n    }\n    static from(rect) {\n        return new MutableRect(rect.x, rect.y, rect.w, rect.h);\n    }\n    immutable() {\n        return new ImmutableRect(this.x, this.y, this.w, this.h);\n    }\n    isOverlap(b) {\n        const a = this;\n        return a.x < b.x + b.w\n            && a.x + a.w > b.x\n            && a.y < b.y + b.h\n            && a.y + a.h > b.y;\n    }\n    toString() {\n        return `{x=${this.x},y=${this.y},w=${this.w},h=${this.h}}`;\n    }\n}\n\n// CONCATENATED MODULE: ./src/tunneling.ts\n\nclass tunneling_TunnelingAlgorithm {\n    constructor(rng, width, height, options) {\n        this.possible = [];\n        this.rooms = [];\n        this.corridorsV = [];\n        this.corridorsH = [];\n        this.rng = rng;\n        this.width = width;\n        this.height = height;\n        this.room_min_w = options.room_min_w || 5;\n        this.room_min_h = options.room_min_h || 5;\n        this.room_max_w = options.room_max_w || 20;\n        this.room_max_h = options.room_max_h || 20;\n        this.room_min_x = options.room_min_x || 2;\n        this.room_min_y = options.room_min_y || 2;\n        this.max_corr_dist = options.max_corr_dist || 20;\n        this.max_corr_width = options.max_corr_width || 5;\n        this.skew = options.skew || 3;\n        this.x_dist = options.x_dist || 2;\n        this.y_dist = options.y_dist || 2;\n        this.min_corr_dist_x = options.min_corr_dist_x || (this.x_dist << 1) + 1;\n        this.min_corr_dist_y = options.min_corr_dist_y || (this.y_dist << 1) + 1;\n        this.max_rooms = options.max_rooms || 0;\n        this.debug = options.debug || false;\n    }\n    isOverlap(a) {\n        const f = a.isOverlap.bind(a);\n        return this.rooms.some(f) ||\n            this.corridorsV.some(f) ||\n            this.corridorsH.some(f);\n    }\n    ;\n    valid(rect) {\n        return rect.x >= 0 && rect.y >= 0 && rect.w > 0 && rect.h > 0 &&\n            rect.x + rect.w < this.width &&\n            rect.y + rect.h < this.height &&\n            !this.isOverlap(rect);\n    }\n    generate() {\n        this.rooms.splice(0, this.rooms.length);\n        this.corridorsH.splice(0, this.corridorsH.length);\n        this.corridorsV.splice(0, this.corridorsV.length);\n        if (this.generateFirstRoom()) {\n            if (this.max_rooms > 0) {\n                while (this.rooms.length < this.max_rooms) {\n                    if (!this.generateNextRoom()) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n            else {\n                while (this.generateNextRoom()) {\n                }\n                return true;\n            }\n        }\n        return false;\n    }\n    generateFirstRoom() {\n        const room_w = this.rng.nextRange(this.room_min_w, this.room_max_w);\n        const room_h = this.rng.nextRange(this.room_min_h, this.room_max_h);\n        const min_x = Math.max(this.room_min_x, (this.width >> 1) - room_w);\n        const min_y = Math.max(this.room_min_y, (this.height >> 1) - room_h);\n        const max_x = Math.min(this.width - this.room_min_x - room_w, (this.width >> 1) + room_w);\n        const max_y = Math.min(this.height - this.room_min_y - room_h, (this.height >> 1) + room_h);\n        const room = new ImmutableRect(this.nextRange(min_x, max_x), this.nextRange(min_y, max_y), room_w, room_h);\n        if (!this.isOverlap(room.expand())) {\n            this.rooms.push(room);\n            return true;\n        }\n        return false;\n    }\n    generateNextRoom() {\n        if (this.debug)\n            console.log(\"generate next room\");\n        this.possible.splice(0, this.possible.length);\n        this.rooms.forEach((room) => {\n            const topC = this.findTopCorridorArea(room);\n            const bottomC = this.findBottomCorridorArea(room);\n            const rightC = this.findRightCorridorArea(room);\n            const leftC = this.findLeftCorridorArea(room);\n            if (topC) {\n                if (this.debug)\n                    console.log(\"possible top corridor area\", room, topC);\n                const topR = this.findTopRoomArea(topC);\n                if (topR) {\n                    if (this.debug)\n                        console.log(\"add possible top room area\", room, topC, topR);\n                    this.possible.push(new Possible(topR, topC, Direction.TOP));\n                }\n            }\n            if (bottomC) {\n                if (this.debug)\n                    console.log(\"possible bottom corridor area\", room, bottomC);\n                const bottomR = this.findBottomRoomArea(bottomC);\n                if (bottomR) {\n                    if (this.debug)\n                        console.log(\"add possible bottom room area\", room, bottomC, bottomR);\n                    this.possible.push(new Possible(bottomR, bottomC, Direction.BOTTOM));\n                }\n            }\n            if (rightC) {\n                if (this.debug)\n                    console.log(\"possible right corridor area\", room, rightC);\n                const rightR = this.findRightRoomArea(rightC);\n                if (rightR) {\n                    if (this.debug)\n                        console.log(\"add possible right room area\", room, rightC, rightR);\n                    this.possible.push(new Possible(rightR, rightC, Direction.RIGHT));\n                }\n            }\n            if (leftC) {\n                if (this.debug)\n                    console.log(\"possible left corridor area\", room, leftC);\n                const leftR = this.findLeftRoomArea(leftC);\n                if (leftR) {\n                    if (this.debug)\n                        console.log(\"add possible left room area\", room, leftC, leftR);\n                    this.possible.push(new Possible(leftR, leftC, Direction.LEFT));\n                }\n            }\n        });\n        if (this.debug)\n            console.log(\"possible\", [...this.possible]);\n        if (this.debug)\n            console.log(\"rooms\", [...this.rooms]);\n        if (this.debug)\n            console.log(\"corridorsV\", [...this.corridorsV]);\n        if (this.debug)\n            console.log(\"corridorsH\", [...this.corridorsH]);\n        while (this.possible.length > 0) {\n            const i = this.rng.nextRange(0, this.possible.length);\n            const possible = this.possible[i];\n            this.possible.splice(i, 1);\n            switch (possible.direction) {\n                case Direction.TOP:\n                    if (this.generateTopRoom(possible)) {\n                        return true;\n                    }\n                    break;\n                case Direction.BOTTOM:\n                    if (this.generateBottomRoom(possible)) {\n                        return true;\n                    }\n                    break;\n                case Direction.RIGHT:\n                    if (this.generateRightRoom(possible)) {\n                        return true;\n                    }\n                    break;\n                case Direction.LEFT:\n                    if (this.generateLeftRoom(possible)) {\n                        return true;\n                    }\n                    break;\n            }\n        }\n        return false;\n    }\n    findTopCorridorArea(room) {\n        const buffer = MutableRect.from(room);\n        buffer.h = this.min_corr_dist_y;\n        buffer.y -= this.min_corr_dist_y;\n        buffer.x += this.x_dist;\n        buffer.w -= this.x_dist << 1;\n        let h = -1;\n        let y = -1;\n        for (; buffer.h <= this.max_corr_dist; buffer.h++, buffer.y--) {\n            if (this.valid(buffer)) {\n                h = buffer.h;\n                y = buffer.y;\n            }\n            else {\n                break;\n            }\n        }\n        if (h >= 0 && y >= 0) {\n            buffer.h = h;\n            buffer.y = y;\n            return buffer.immutable();\n        }\n        else {\n            return null;\n        }\n    }\n    findBottomCorridorArea(room) {\n        const buffer = MutableRect.from(room);\n        buffer.y += room.h;\n        buffer.h = this.min_corr_dist_y;\n        buffer.x += this.x_dist;\n        buffer.w -= this.x_dist << 1;\n        let h = -1;\n        for (; buffer.h < this.max_corr_dist; buffer.h++) {\n            if (this.valid(buffer)) {\n                h = buffer.h;\n            }\n            else {\n                break;\n            }\n        }\n        if (h >= 0) {\n            buffer.h = h;\n            return buffer.immutable();\n        }\n        else {\n            return null;\n        }\n    }\n    findRightCorridorArea(room) {\n        const buffer = MutableRect.from(room);\n        buffer.x += buffer.w;\n        buffer.y += this.y_dist;\n        buffer.h -= this.y_dist << 1;\n        let w = -1;\n        for (; buffer.w < this.max_corr_dist; buffer.w++) {\n            if (this.valid(buffer)) {\n                w = buffer.w;\n            }\n            else {\n                break;\n            }\n        }\n        if (w >= 0) {\n            buffer.w = w;\n            return buffer.immutable();\n        }\n        else {\n            return null;\n        }\n    }\n    findLeftCorridorArea(room) {\n        const buffer = MutableRect.from(room);\n        buffer.w = this.min_corr_dist_x;\n        buffer.x -= this.min_corr_dist_x;\n        buffer.y += this.y_dist;\n        buffer.h -= this.y_dist << 1;\n        let w = -1;\n        let x = -1;\n        for (; buffer.w <= this.max_corr_dist; buffer.w++, buffer.x--) {\n            if (this.valid(buffer)) {\n                w = buffer.w;\n                x = buffer.x;\n            }\n            else {\n                break;\n            }\n        }\n        if (w >= 0 && x >= 0) {\n            buffer.w = w;\n            buffer.x = x;\n            return buffer.immutable();\n        }\n        else {\n            return null;\n        }\n    }\n    findTopRoomArea(corridor) {\n        const buffer = MutableRect.from(corridor);\n        buffer.h -= this.min_corr_dist_y;\n        buffer.x -= this.x_dist;\n        buffer.w += this.x_dist << 1;\n        if (buffer.h < this.room_min_h) {\n            const d = this.room_min_h - buffer.h;\n            buffer.h += d;\n            buffer.y -= d;\n        }\n        let y = buffer.y;\n        let h = buffer.h;\n        for (; buffer.h <= this.room_max_h; buffer.h++, buffer.y--) {\n            if (this.valid(buffer)) {\n                h = buffer.h;\n                y = buffer.y;\n            }\n            else {\n                buffer.h = h;\n                buffer.y = y;\n                break;\n            }\n        }\n        if (y >= 0 && h >= 0) {\n            let x = buffer.x;\n            let w = buffer.w;\n            for (const min_x = corridor.x + this.x_dist + 1 - this.room_max_w; buffer.x > min_x; buffer.x--, buffer.w++) {\n                if (this.valid(buffer)) {\n                    x = buffer.x;\n                    w = buffer.w;\n                }\n                else {\n                    break;\n                }\n            }\n            buffer.x = x;\n            buffer.w = w;\n            for (const max_x = corridor.x + corridor.w - this.x_dist - 1 + this.room_max_w; buffer.x + buffer.w < max_x; buffer.w++) {\n                if (this.valid(buffer)) {\n                    w = buffer.w;\n                }\n                else {\n                    break;\n                }\n            }\n            buffer.w = w;\n            return buffer.immutable();\n        }\n        return null;\n    }\n    findBottomRoomArea(corridor) {\n        const buffer = MutableRect.from(corridor);\n        buffer.y += this.min_corr_dist_y;\n        buffer.h -= this.min_corr_dist_y;\n        buffer.x -= this.x_dist;\n        buffer.w += this.x_dist << 1;\n        if (buffer.h < this.room_min_h) {\n            buffer.h = this.room_min_h;\n        }\n        let h = buffer.h;\n        for (; buffer.h <= this.room_max_h; buffer.h++) {\n            if (this.valid(buffer)) {\n                h = buffer.h;\n            }\n            else {\n                buffer.h = h;\n                break;\n            }\n        }\n        if (h >= 0) {\n            let x = buffer.x;\n            let w = buffer.w;\n            for (const min_x = corridor.x + this.x_dist + 1 - this.room_max_w; buffer.x > min_x; buffer.x--, buffer.w++) {\n                if (this.valid(buffer)) {\n                    x = buffer.x;\n                    w = buffer.w;\n                }\n                else {\n                    break;\n                }\n            }\n            buffer.x = x;\n            buffer.w = w;\n            for (const max_x = corridor.x + corridor.w - this.x_dist - 1 + this.room_max_w; buffer.x + buffer.w < max_x; buffer.w++) {\n                if (this.valid(buffer)) {\n                    w = buffer.w;\n                }\n                else {\n                    break;\n                }\n            }\n            buffer.w = w;\n            return buffer.immutable();\n        }\n        return null;\n    }\n    findRightRoomArea(corridor) {\n        const buffer = MutableRect.from(corridor);\n        buffer.x += this.min_corr_dist_x;\n        buffer.w -= this.min_corr_dist_x;\n        buffer.y -= this.y_dist;\n        buffer.h += this.y_dist << 1;\n        if (buffer.w < this.room_min_w) {\n            buffer.w = this.room_min_w;\n        }\n        let w = buffer.w;\n        for (; buffer.w <= this.room_max_w; buffer.w++) {\n            if (this.valid(buffer)) {\n                w = buffer.w;\n            }\n            else {\n                buffer.w = w;\n                break;\n            }\n        }\n        if (w >= 0) {\n            let y = buffer.y;\n            let h = buffer.h;\n            for (const min_y = corridor.y + this.y_dist + 1 - this.room_max_h; buffer.y > min_y; buffer.y--, buffer.h++) {\n                if (this.valid(buffer)) {\n                    y = buffer.y;\n                    h = buffer.h;\n                }\n                else {\n                    buffer.y = y;\n                    buffer.h = h;\n                    break;\n                }\n            }\n            for (const max_y = corridor.y + corridor.h - this.y_dist - 1 + this.room_max_h; buffer.y + buffer.h < max_y; buffer.h++) {\n                if (this.valid(buffer)) {\n                    h = buffer.h;\n                }\n                else {\n                    buffer.h = h;\n                    break;\n                }\n            }\n            return buffer.immutable();\n        }\n        return null;\n    }\n    findLeftRoomArea(corridor) {\n        const buffer = MutableRect.from(corridor);\n        buffer.w -= this.min_corr_dist_x;\n        buffer.y -= this.y_dist;\n        buffer.h += this.y_dist << 1;\n        if (buffer.w < this.room_min_w) {\n            const d = this.room_min_w - buffer.w;\n            buffer.w += d;\n            buffer.x -= d;\n        }\n        let x = buffer.x;\n        let w = buffer.w;\n        for (; buffer.w <= this.room_max_w; buffer.w++, buffer.x--) {\n            if (this.valid(buffer)) {\n                w = buffer.w;\n                x = buffer.x;\n            }\n            else {\n                buffer.x = x;\n                buffer.w = w;\n                break;\n            }\n        }\n        if (x >= 0 && w >= 0) {\n            let y = buffer.y;\n            let h = buffer.h;\n            for (const min_y = corridor.y + this.y_dist + 1 - this.room_max_h; buffer.y > min_y; buffer.y--, buffer.h++) {\n                if (this.valid(buffer)) {\n                    y = buffer.y;\n                    h = buffer.h;\n                }\n                else {\n                    break;\n                }\n            }\n            buffer.y = y;\n            buffer.h = h;\n            for (const max_y = corridor.y - this.y_dist - 1 + this.room_max_h; buffer.y + buffer.h < max_y; buffer.h++) {\n                if (this.valid(buffer)) {\n                    h = buffer.h;\n                }\n                else {\n                    break;\n                }\n            }\n            buffer.h = h;\n            return buffer.immutable();\n        }\n        else {\n            if (this.debug)\n                console.warn(\"left room area not valid\", corridor, buffer);\n        }\n        return null;\n    }\n    generateTopRoom(possible) {\n        const corr_w = this.nextRange(1, Math.min(this.max_corr_width, possible.corridor.w));\n        const corr_h = this.nextRange(this.min_corr_dist_y, possible.corridor.h);\n        const corr_y = possible.corridor.y + (possible.corridor.h - corr_h);\n        const corr_x = this.nextRange(possible.corridor.x, possible.corridor.x + possible.corridor.w - corr_w);\n        const corr = new ImmutableRect(corr_x, corr_y, corr_w, corr_h);\n        if (this.valid(corr.expandV())) {\n            const room_min_y = Math.max(3, possible.room.y, corr.y - this.room_max_h);\n            const room_y = this.nextRange(room_min_y, corr.y - this.room_min_h);\n            const room_h = corr.y - room_y;\n            const room_max_x = corr.x - this.x_dist;\n            const room_min_x = Math.max(2, possible.room.x, corr.x + corr.w + this.x_dist - this.room_max_w);\n            const room_x = this.nextRange(room_min_x, room_max_x);\n            const room_min_right_x = corr.x + corr.w + this.x_dist;\n            const room_max_right_x = Math.min(possible.room.x + possible.room.w, room_x + this.room_max_w);\n            const room_right_x = this.nextRange(room_min_right_x, room_max_right_x);\n            const room_w = room_right_x - room_x;\n            const room = new ImmutableRect(room_x, room_y, room_w, room_h);\n            if (this.valid(room.expand())) {\n                if (this.debug)\n                    console.log(\"add top room\", corr, room);\n                this.corridorsV.push(corr);\n                this.rooms.push(room);\n                this.connectWithOthers(room);\n                return true;\n            }\n            else {\n                if (this.debug)\n                    console.warn(\"top room not valid\");\n            }\n        }\n        else {\n            if (this.debug)\n                console.warn(\"top corridor not valid\");\n        }\n        return false;\n    }\n    generateBottomRoom(possible) {\n        const corr_y = possible.corridor.y;\n        const corr_w = this.nextRange(1, Math.min(this.max_corr_width, possible.corridor.w));\n        const corr_h = this.nextRange(this.min_corr_dist_y, possible.corridor.h);\n        const corr_x = this.nextRange(possible.corridor.x, possible.corridor.x + possible.corridor.w - corr_w);\n        const corr = new ImmutableRect(corr_x, corr_y, corr_w, corr_h);\n        if (this.valid(corr.expandV())) {\n            const room_y = corr.y + corr.h;\n            const room_min_y = room_y + this.room_min_h;\n            const room_max_y = Math.min(possible.room.y + possible.room.h, room_min_y + this.room_max_h);\n            const room_bottom_y = this.nextRange(room_min_y, room_max_y);\n            const room_h = room_bottom_y - room_y;\n            const room_max_x = corr.x - this.x_dist;\n            const room_min_x = Math.max(2, possible.room.x, corr.x + corr.w + this.x_dist - this.room_max_w);\n            const room_x = this.nextRange(room_min_x, room_max_x);\n            const room_min_right_x = corr.x + corr.w + this.x_dist;\n            const room_max_right_x = Math.min(possible.room.x + possible.room.w, room_x + this.room_max_w);\n            const room_right_x = this.nextRange(room_min_right_x, room_max_right_x);\n            const room_w = room_right_x - room_x;\n            const room = new ImmutableRect(room_x, room_y, room_w, room_h);\n            if (this.valid(room.expand())) {\n                if (this.debug)\n                    console.log(\"add bottom room\", corr, room);\n                this.corridorsV.push(corr);\n                this.rooms.push(room);\n                this.connectWithOthers(room);\n                return true;\n            }\n            else {\n                if (this.debug)\n                    console.warn(\"bottom room not valid\", corr, room);\n            }\n        }\n        else {\n            if (this.debug)\n                console.warn(\"bottom corridor not valid\", corr);\n        }\n        return false;\n    }\n    generateRightRoom(possible) {\n        const corr_x = possible.corridor.x;\n        const corr_h = this.nextRange(1, Math.min(this.max_corr_width, possible.corridor.h));\n        const corr_w = this.nextRange(this.min_corr_dist_x, possible.corridor.w);\n        const corr_y = this.nextRange(possible.corridor.y, possible.corridor.y + possible.corridor.h - corr_h);\n        const corr = new ImmutableRect(corr_x, corr_y, corr_w, corr_h);\n        if (this.valid(corr.expandH())) {\n            const room_x = corr.x + corr.w;\n            const room_min_x = room_x + this.room_min_w;\n            const room_max_x = Math.min(possible.room.x + possible.room.w, room_min_x + this.room_max_w);\n            const room_right_x = this.nextRange(room_min_x, room_max_x);\n            const room_w = room_right_x - room_x;\n            const room_max_y = corr.y - this.y_dist;\n            const room_min_y = Math.max(2, possible.room.y, corr.y + corr.h + this.y_dist - this.room_max_h);\n            const room_y = this.nextRange(room_min_y, room_max_y);\n            const room_min_bottom_y = corr.y + corr.h + this.y_dist;\n            const room_max_bottom_y = Math.min(possible.room.y + possible.room.h, room_y + this.room_max_h);\n            const room_bottom_y = this.nextRange(room_min_bottom_y, room_max_bottom_y);\n            const room_h = room_bottom_y - room_y;\n            const room = new ImmutableRect(room_x, room_y, room_w, room_h);\n            if (this.valid(room.expand())) {\n                if (this.debug)\n                    console.log(\"add right room\", corr, room);\n                this.corridorsH.push(corr);\n                this.rooms.push(room);\n                this.connectWithOthers(room);\n                return true;\n            }\n            else {\n                if (this.debug)\n                    console.warn(\"right room not valid\", corr, room);\n            }\n        }\n        else {\n            if (this.debug)\n                console.warn(\"right corridor not valid\", corr);\n        }\n        return false;\n    }\n    generateLeftRoom(possible) {\n        const corr_h = this.nextRange(1, Math.min(this.max_corr_width, possible.corridor.h));\n        const corr_w = this.nextRange(this.min_corr_dist_x, possible.corridor.w);\n        const corr_x = possible.corridor.x + (possible.corridor.w - corr_w);\n        const corr_y = this.nextRange(possible.corridor.y, possible.corridor.y + possible.corridor.h - corr_h);\n        const corr = new ImmutableRect(corr_x, corr_y, corr_w, corr_h);\n        if (this.valid(corr.expandH())) {\n            const room_min_x = Math.max(2, possible.room.x, corr.x - this.room_max_w);\n            const room_x = this.nextRange(room_min_x, corr.x - this.room_min_w);\n            const room_w = corr.x - room_x;\n            const room_max_y = corr.y - this.y_dist;\n            const room_min_y = Math.max(3, possible.room.y, corr.y + corr.h + this.y_dist - this.room_max_h);\n            const room_y = this.nextRange(room_min_y, room_max_y);\n            const room_min_bottom_y = corr.y + corr.h + this.y_dist;\n            const room_max_bottom_y = Math.min(possible.room.y + possible.room.h, room_y + this.room_max_h);\n            const room_bottom_y = this.nextRange(room_min_bottom_y, room_max_bottom_y);\n            const room_h = room_bottom_y - room_y;\n            const room = new ImmutableRect(room_x, room_y, room_w, room_h);\n            if (this.valid(room.expand())) {\n                if (this.debug)\n                    console.log(\"add left room\", corr, room);\n                this.corridorsH.push(corr);\n                this.rooms.push(room);\n                this.connectWithOthers(room);\n                return true;\n            }\n            else {\n                if (this.debug)\n                    console.warn(\"left room not valid\");\n            }\n        }\n        else {\n            if (this.debug)\n                console.warn(\"left corridor not valid\");\n        }\n        return false;\n    }\n    connectWithOthers(room) {\n        const a = room;\n        for (let i = 0; i < this.rooms.length - 1; i++) {\n            let b = this.rooms[i];\n            const max_x = Math.max(a.x, b.x);\n            const min_x_w = Math.min(a.x + a.w, b.x + b.w);\n            if (max_x + 5 <= min_x_w) {\n                let rect;\n                if (a.y + a.h < b.y) {\n                    rect = new ImmutableRect(max_x + 2, a.y + a.h, min_x_w - max_x - 4, b.y - a.y - a.h);\n                }\n                else {\n                    rect = new ImmutableRect(max_x + 2, b.y + b.h, min_x_w - max_x - 4, a.y - b.y - b.h);\n                }\n                if (this.debug)\n                    console.log(\"test v corr\", rect);\n                if (rect.w < this.max_corr_dist && this.valid(rect.expandV())) {\n                    if (this.debug)\n                        console.log(\"add v corr\", rect);\n                    this.corridorsV.push(rect);\n                }\n            }\n            const max_y = Math.max(a.y, b.y);\n            const min_y_h = Math.min(a.y + a.h, b.y + b.h);\n            if (max_y + 3 <= min_y_h) {\n                let rect;\n                if (a.x + a.w < b.x) {\n                    rect = new ImmutableRect(a.x + a.w, max_y + 1, b.x - a.x - a.w, min_y_h - max_y - 2);\n                }\n                else {\n                    rect = new ImmutableRect(b.x + b.w, max_y + 1, a.x - b.x - b.w, min_y_h - max_y - 2);\n                }\n                if (this.debug)\n                    console.log(\"test h corr\", rect);\n                if (rect.h < this.max_corr_dist && this.valid(rect.expandH())) {\n                    if (this.debug)\n                        console.log(\"add h corr\", rect);\n                    this.corridorsH.push(rect);\n                }\n            }\n        }\n    }\n    nextRange(min, max) {\n        return Math.round(this.rng.nextNormal(min, max, this.skew));\n    }\n}\nvar Direction;\n(function (Direction) {\n    Direction[Direction[\"TOP\"] = 0] = \"TOP\";\n    Direction[Direction[\"RIGHT\"] = 1] = \"RIGHT\";\n    Direction[Direction[\"BOTTOM\"] = 2] = \"BOTTOM\";\n    Direction[Direction[\"LEFT\"] = 3] = \"LEFT\";\n})(Direction || (Direction = {}));\nclass Possible {\n    constructor(room, corridor, direction) {\n        this.room = room;\n        this.corridor = corridor;\n        this.direction = direction;\n    }\n}\n\n// CONCATENATED MODULE: ./src/indexer.ts\nclass Indexer {\n    constructor(equality) {\n        this.values = [];\n        this.equality = equality;\n    }\n    index(value) {\n        for (let i = 0; i < this.values.length; i++) {\n            if (this.equality(value, this.values[i])) {\n                return i;\n            }\n        }\n        this.values.push(value);\n        return this.values.length - 1;\n    }\n    get(n) {\n        return this.values[n];\n    }\n    static array() {\n        return new Indexer((a, b) => {\n            if (a.length !== b.length)\n                return false;\n            for (let i = 0; i < a.length; i++) {\n                if (a[i] !== b[i])\n                    return false;\n            }\n            return true;\n        });\n    }\n    static identity() {\n        return new Indexer((a, b) => a === b);\n    }\n}\n\n// CONCATENATED MODULE: ./src/tunneler/model.ts\nclass Point {\n    constructor(x = 0, y = 0) {\n        this.x = x;\n        this.y = y;\n    }\n    plus(that) {\n        return new Point(this.x + that.x, this.y + that.y);\n    }\n    minus(that) {\n        return new Point(this.x - that.x, this.y - that.y);\n    }\n    multiply(value) {\n        return new Point(this.x * value, this.y * value);\n    }\n    get negative() {\n        return new Point(-this.x, -this.y);\n    }\n    equal(x, y) {\n        return this.x === x && this.y === y;\n    }\n    equals(that) {\n        return this.x === that.x && this.y === that.y;\n    }\n    toString() {\n        return `{x: ${this.x}, y: ${this.y}}`;\n    }\n    static from(point) {\n        return new Point(point.x, point.y);\n    }\n}\nPoint.NORTH = new Point(-1, 0);\nPoint.SOUTH = new Point(1, 0);\nPoint.EAST = new Point(0, 1);\nPoint.WEST = new Point(0, -1);\nPoint.NORTH_EAST = new Point(-1, 1);\nPoint.SOUTH_EAST = new Point(1, 1);\nPoint.SOUTH_WEST = new Point(1, -1);\nPoint.NORTH_WEST = new Point(-1, -1);\nPoint.ZERO = new Point(0, 0);\nvar model_Direction;\n(function (Direction) {\n    Direction[Direction[\"NORTH\"] = 0] = \"NORTH\";\n    Direction[Direction[\"EAST\"] = 1] = \"EAST\";\n    Direction[Direction[\"SOUTH\"] = 2] = \"SOUTH\";\n    Direction[Direction[\"WEST\"] = 3] = \"WEST\";\n    Direction[Direction[\"NORTH_EAST\"] = 4] = \"NORTH_EAST\";\n    Direction[Direction[\"SOUTH_EAST\"] = 5] = \"SOUTH_EAST\";\n    Direction[Direction[\"SOUTH_WEST\"] = 6] = \"SOUTH_WEST\";\n    Direction[Direction[\"NORTH_WEST\"] = 7] = \"NORTH_WEST\";\n})(model_Direction || (model_Direction = {}));\nvar TunnelerCellType;\n(function (TunnelerCellType) {\n    TunnelerCellType[TunnelerCellType[\"OPEN\"] = 0] = \"OPEN\";\n    TunnelerCellType[TunnelerCellType[\"CLOSED\"] = 1] = \"CLOSED\";\n    TunnelerCellType[TunnelerCellType[\"GUARANTEED_OPEN\"] = 2] = \"GUARANTEED_OPEN\";\n    TunnelerCellType[TunnelerCellType[\"GUARANTEED_CLOSED\"] = 3] = \"GUARANTEED_CLOSED\";\n    TunnelerCellType[TunnelerCellType[\"NON_JOIN_OPEN\"] = 4] = \"NON_JOIN_OPEN\";\n    TunnelerCellType[TunnelerCellType[\"NON_JOIN_CLOSED\"] = 5] = \"NON_JOIN_CLOSED\";\n    TunnelerCellType[TunnelerCellType[\"NON_JOIN_GUARANTEED_OPEN\"] = 6] = \"NON_JOIN_GUARANTEED_OPEN\";\n    TunnelerCellType[TunnelerCellType[\"NON_JOIN_GUARANTEED_CLOSED\"] = 7] = \"NON_JOIN_GUARANTEED_CLOSED\";\n    TunnelerCellType[TunnelerCellType[\"INSIDE_ROOM_OPEN\"] = 8] = \"INSIDE_ROOM_OPEN\";\n    TunnelerCellType[TunnelerCellType[\"INSIDE_TUNNEL_OPEN\"] = 9] = \"INSIDE_TUNNEL_OPEN\";\n    TunnelerCellType[TunnelerCellType[\"INSIDE_ANTEROOM_OPEN\"] = 10] = \"INSIDE_ANTEROOM_OPEN\";\n    TunnelerCellType[TunnelerCellType[\"H_DOOR\"] = 11] = \"H_DOOR\";\n    TunnelerCellType[TunnelerCellType[\"V_DOOR\"] = 12] = \"V_DOOR\";\n    TunnelerCellType[TunnelerCellType[\"COLUMN\"] = 13] = \"COLUMN\";\n})(TunnelerCellType || (TunnelerCellType = {}));\nvar RoomSize;\n(function (RoomSize) {\n    RoomSize[RoomSize[\"SMALL\"] = 0] = \"SMALL\";\n    RoomSize[RoomSize[\"MEDIUM\"] = 1] = \"MEDIUM\";\n    RoomSize[RoomSize[\"LARGE\"] = 2] = \"LARGE\";\n})(RoomSize || (RoomSize = {}));\nclass Room {\n    constructor(inside = []) {\n        this.inside = inside;\n        this.inDungeon = false;\n    }\n    randomSquare() {\n        return this.inside[Math.floor(Math.random() * this.inside.length)];\n    }\n    static compare(first, second) {\n        return first.inside.length - second.inside.length;\n    }\n}\nclass FillRect {\n    constructor(startX, startY, endX, endY, type) {\n        this.startX = startX;\n        this.startY = startY;\n        this.endX = endX;\n        this.endY = endY;\n        this.type = type;\n    }\n}\n\n// CONCATENATED MODULE: ./src/tunneler/crawler.ts\n\nclass crawler_Crawler {\n    constructor(rng, dungeonCrawler, location, direction, age, maxAge, generation) {\n        this.rng = rng;\n        this.dungeonCrawler = dungeonCrawler;\n        this.config = dungeonCrawler.config;\n        this.location = location;\n        this.direction = direction;\n        this.age = age;\n        this.maxAge = maxAge;\n        this.generation = generation;\n        console.assert(this.valid(location));\n        console.assert(this.validDirection(direction));\n    }\n    rightDirection() {\n        if (this.direction.x === 0) {\n            return new Point(this.direction.y, 0);\n        }\n        else if (this.direction.y === 0) {\n            return new Point(0, -this.direction.x);\n        }\n        else {\n            throw \"illegal direction\";\n        }\n    }\n    valid(point) {\n        return point.x >= 0 && point.y >= 0 && point.x < this.config.width && point.y < this.config.height;\n    }\n    validDirection(direction) {\n        return (direction.x === 0 && (direction.y === -1 || direction.y === 1)) || (direction.y === 0 && (direction.x === -1 || direction.x === 1));\n    }\n    frontFree(position, heading, leftFree, rightFree) {\n        console.assert((leftFree >= 1) && (rightFree >= 1));\n        console.assert(this.valid(position));\n        console.assert(heading.x === 0 && ((heading.y === 1) || (heading.y === -1)) || heading.y === 0 && ((heading.x === 1) || (heading.x === -1)));\n        let right;\n        if (heading.x === 0) {\n            right = new Point(heading.y, 0);\n        }\n        else if (heading.y === 0) {\n            right = new Point(0, -heading.x);\n        }\n        else {\n            throw \"invalid heading\";\n        }\n        const frontFree = this.findFrontFree(leftFree, rightFree, position, right, heading);\n        console.assert(frontFree >= 0);\n        if (frontFree > 0) {\n            leftFree = this.findLeftFree(leftFree, frontFree, position, right, heading);\n            rightFree = this.findRightFree(rightFree, frontFree, position, right, heading);\n        }\n        return [frontFree, leftFree, rightFree];\n    }\n    findFrontFree(leftFree, rightFree, position, right, heading) {\n        let frontFree = 0;\n        while (true) {\n            frontFree++;\n            for (let i = -leftFree; i <= rightFree; i++) {\n                const cell = position.plus(right.multiply(i)).plus(heading.multiply(frontFree));\n                if (!this.valid(cell)) {\n                    return Math.max(0, frontFree - 1);\n                }\n                if (this.freePredicate(this.dungeonCrawler.getMap(cell))) {\n                    return Math.max(0, frontFree - 1);\n                }\n            }\n        }\n    }\n    findLeftFree(leftFree, frontFree, position, right, heading) {\n        while (true) {\n            leftFree++;\n            for (let i = 1; i <= frontFree; i++) {\n                const cell = position.minus(right.multiply(leftFree)).plus(heading.multiply(i));\n                if (!this.valid(cell)) {\n                    return leftFree - 1;\n                }\n                if (this.freePredicate(this.dungeonCrawler.getMap(cell))) {\n                    return leftFree - 1;\n                }\n            }\n        }\n    }\n    findRightFree(rightFree, frontFree, position, right, heading) {\n        while (true) {\n            rightFree++;\n            for (let i = 1; i <= frontFree; i++) {\n                const cell = position.plus(right.multiply(rightFree)).plus(heading.multiply(i));\n                if (!this.valid(cell)) {\n                    return rightFree - 1;\n                }\n                if (this.freePredicate(this.dungeonCrawler.getMap(cell))) {\n                    return rightFree - 1;\n                }\n            }\n        }\n    }\n    freePredicate(type) {\n        return (type !== TunnelerCellType.CLOSED) && (type !== TunnelerCellType.NON_JOIN_CLOSED);\n    }\n    contains(value, ...options) {\n        for (const option of options) {\n            if (value === option) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n\n// CONCATENATED MODULE: ./src/tunneler/wall.crawler.ts\n\n\nclass wall_crawler_WallCrawler extends crawler_Crawler {\n    constructor(rng, dungeonCrawler, location, direction, age, maxAge, generation, intendedDirection, stepLength, opening, corridorWidth, straightSingleSpawnProbability, straightDoubleSpawnProbability, turnSingleSpawnProbability, turnDoubleSpawnProbability, changeDirectionProbability) {\n        super(rng, dungeonCrawler, location, direction, age, maxAge, generation);\n        this.intendedDirection = intendedDirection;\n        this.stepLength = stepLength;\n        this.opening = opening;\n        this.corridorWidth = corridorWidth;\n        this.straightSingleSpawnProbability = straightSingleSpawnProbability;\n        this.straightDoubleSpawnProbability = straightDoubleSpawnProbability;\n        this.turnSingleSpawnProbability = turnSingleSpawnProbability;\n        this.turnDoubleSpawnProbability = turnDoubleSpawnProbability;\n        this.changeDirectionProbability = changeDirectionProbability;\n        console.assert(corridorWidth >= 0);\n    }\n    freePredicate(type) {\n        if (this.config.crawlersInTunnels && this.config.crawlersInAnterooms) {\n            if (!this.contains(type, TunnelerCellType.OPEN, TunnelerCellType.NON_JOIN_OPEN, TunnelerCellType.GUARANTEED_OPEN, TunnelerCellType.INSIDE_TUNNEL_OPEN, TunnelerCellType.INSIDE_ANTEROOM_OPEN, TunnelerCellType.NON_JOIN_GUARANTEED_OPEN)) {\n                return true;\n            }\n        }\n        else if (this.config.crawlersInTunnels) {\n            if (!this.contains(type, TunnelerCellType.OPEN, TunnelerCellType.NON_JOIN_OPEN, TunnelerCellType.GUARANTEED_OPEN, TunnelerCellType.INSIDE_TUNNEL_OPEN, TunnelerCellType.NON_JOIN_GUARANTEED_OPEN)) {\n                return true;\n            }\n        }\n        else {\n            if (!this.contains(type, TunnelerCellType.OPEN, TunnelerCellType.NON_JOIN_OPEN, TunnelerCellType.GUARANTEED_OPEN, TunnelerCellType.NON_JOIN_GUARANTEED_OPEN)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    stepAhead() {\n        if (this.generation !== this.dungeonCrawler.activeGeneration) {\n            console.assert(this.generation > this.dungeonCrawler.activeGeneration);\n            return true;\n        }\n        this.age++;\n        if (this.age >= this.maxAge) {\n            return false;\n        }\n        else if (this.age < 0) {\n            return true;\n        }\n        let [frontFree, leftFree, rightFree] = this.frontFree(this.location, this.direction, this.corridorWidth, this.corridorWidth);\n        const right = this.rightDirection();\n        const left = right.negative;\n        let test = right;\n        if ((this.opening === 0) && (frontFree < this.config.joinDistance)) {\n            if (this.join(frontFree)) {\n                return false;\n            }\n        }\n        let tilesLaid = this.stepLength;\n        if (frontFree > this.corridorWidth) {\n            if ((frontFree - this.corridorWidth) < this.stepLength) {\n                tilesLaid = frontFree - this.corridorWidth;\n            }\n            for (let i = 1; i <= tilesLaid; i++) {\n                test = this.location.plus(this.direction.multiply(i));\n                if (this.opening === 1) {\n                    this.dungeonCrawler.setMap(test, TunnelerCellType.CLOSED);\n                }\n                else {\n                    console.assert(this.opening === 0);\n                    this.dungeonCrawler.setMap(test, TunnelerCellType.NON_JOIN_CLOSED);\n                }\n            }\n            this.location = test;\n            let diceRoll = this.rng.int % 100;\n            let childGeneration = this.generation + 1;\n            let summedProbability = 0;\n            for (let i = 0; i <= 10; i++) {\n                summedProbability = summedProbability + this.getChildDelayProbabilityForGenerationCrawlers(i);\n                if (diceRoll < summedProbability) {\n                    childGeneration = this.generation + i;\n                    break;\n                }\n            }\n            const options = {\n                straightSingleSpawnProbability: this.dungeonCrawler.mutate(this.straightSingleSpawnProbability),\n                straightDoubleSpawnProbability: this.dungeonCrawler.mutate(this.straightDoubleSpawnProbability),\n                turnSingleSpawnProbability: this.dungeonCrawler.mutate(this.turnSingleSpawnProbability),\n                turnDoubleSpawnProbability: this.dungeonCrawler.mutate(this.turnDoubleSpawnProbability),\n                changeDirectionProbability: this.dungeonCrawler.mutate(this.changeDirectionProbability),\n            };\n            if ((this.rng.int % 100) < this.changeDirectionProbability) {\n                let oldDirection = this.direction;\n                if (((this.intendedDirection.x === 0) && (this.intendedDirection.y === 0)) ||\n                    ((this.intendedDirection.x === this.direction.x) && (this.intendedDirection.y === this.direction.y))) {\n                    let random = this.rng.int % 4;\n                    if (random === 0) {\n                        this.direction = right;\n                    }\n                    else if (random === 1) {\n                        this.direction = left;\n                    }\n                    else {\n                        if ((rightFree > leftFree) || ((rightFree === leftFree) && this.rng.boolean)) {\n                            this.direction = right;\n                        }\n                        else {\n                            this.direction = left;\n                        }\n                    }\n                }\n                else {\n                    if ((this.intendedDirection.x === 0) || (this.intendedDirection.y === 0)) {\n                        this.direction = this.intendedDirection;\n                    }\n                    else {\n                        console.assert(!this.intendedDirection.equal(0, 0));\n                        this.direction = this.intendedDirection.minus(this.direction);\n                    }\n                }\n                if ((this.rng.int % 100) < this.turnDoubleSpawnProbability) {\n                    this.spawnWallCrawler(this.direction.negative, this.direction.negative, childGeneration, options);\n                    this.spawnWallCrawler(oldDirection, oldDirection, childGeneration, options);\n                }\n                else if ((this.rng.int % 100) < this.turnSingleSpawnProbability) {\n                    this.spawnWallCrawler(this.direction.negative, this.direction.negative, childGeneration, options);\n                }\n            }\n            else {\n                if ((this.rng.int % 100) < this.straightDoubleSpawnProbability) {\n                    this.spawnWallCrawler(right, right, childGeneration, options);\n                    this.spawnWallCrawler(left, left, childGeneration, options);\n                }\n                else if ((this.rng.int % 100) < this.straightSingleSpawnProbability) {\n                    if (leftFree > rightFree || leftFree === rightFree && this.rng.boolean) {\n                        test = left;\n                    }\n                    else {\n                        test = right;\n                    }\n                    if ((this.rng.int % 3) === 0) {\n                        test = test.negative;\n                    }\n                    this.spawnWallCrawler(test, test, childGeneration, options);\n                }\n            }\n        }\n        else {\n            if (this.direction.equals(this.intendedDirection) || this.intendedDirection.equal(0, 0)) {\n                let [rightFree] = this.frontFree(this.location, right, this.corridorWidth, this.corridorWidth);\n                let [leftFree] = this.frontFree(this.location, left, this.corridorWidth, this.corridorWidth);\n                if ((rightFree <= this.corridorWidth) && (leftFree <= this.corridorWidth)) {\n                    return false;\n                }\n                else if ((rightFree > 2 * this.corridorWidth + 1) && (leftFree > 2 * this.corridorWidth + 1)) {\n                    if (this.rng.boolean) {\n                        this.direction = right;\n                    }\n                    else {\n                        this.direction = left;\n                    }\n                }\n                else if (rightFree > leftFree)\n                    this.direction = right;\n                else if (leftFree > rightFree)\n                    this.direction = left;\n                else if (this.rng.boolean) {\n                    this.direction = right;\n                }\n                else {\n                    this.direction = left;\n                }\n            }\n            else {\n                if ((this.intendedDirection.x === 0) || (this.intendedDirection.y === 0)) {\n                    let [directionFree] = this.frontFree(this.location, this.intendedDirection, this.corridorWidth, this.corridorWidth);\n                    if (directionFree > this.corridorWidth) {\n                        this.direction = this.intendedDirection;\n                    }\n                    else {\n                        return false;\n                    }\n                }\n                else {\n                    console.assert(!this.intendedDirection.equal(0, 0));\n                    test = this.intendedDirection.minus(this.direction);\n                    let [testFree] = this.frontFree(this.location, test, this.corridorWidth, this.corridorWidth);\n                    if (testFree > this.corridorWidth) {\n                        this.direction = test;\n                    }\n                    else {\n                        return false;\n                    }\n                }\n            }\n        }\n        return true;\n    }\n    spawnWallCrawler(direction, intendedDirection, generation, options) {\n        if ((this.rng.int % 100) < this.config.noHeadingProbability) {\n            intendedDirection = Point.ZERO;\n        }\n        this.dungeonCrawler.createWallCrawler(this.location, direction, 0, this.dungeonCrawler.getMaxAgeCrawlers(generation), generation, intendedDirection, this.dungeonCrawler.getStepLength(generation), 1, this.dungeonCrawler.getCorridorWidth(generation), options.straightSingleSpawnProbability, options.straightDoubleSpawnProbability, options.turnSingleSpawnProbability, options.turnDoubleSpawnProbability, options.changeDirectionProbability);\n    }\n    join(frontFree) {\n        let right = this.rightDirection();\n        let test = this.location.plus(this.direction.multiply(frontFree + 1));\n        if (!this.valid(test)) {\n            return false;\n        }\n        let type = this.dungeonCrawler.getMap(test);\n        if (this.contains(type, TunnelerCellType.CLOSED, TunnelerCellType.GUARANTEED_CLOSED)) {\n            for (let i = 1; i <= frontFree; i++) {\n                const point = this.location.plus(this.direction.multiply(i));\n                if (!this.valid(point)) {\n                    return false;\n                }\n                this.dungeonCrawler.setMap(point, TunnelerCellType.NON_JOIN_CLOSED);\n            }\n            return true;\n        }\n        else if (this.contains(type, TunnelerCellType.NON_JOIN_CLOSED, TunnelerCellType.NON_JOIN_GUARANTEED_CLOSED)) {\n            return false;\n        }\n        let wall = new Point();\n        let sidestep = 0;\n        for (let i = 1; i <= this.corridorWidth; i++) {\n            let point = this.location.plus(right.multiply(i)).plus(this.direction.multiply(frontFree + 1));\n            if (!this.valid(point)) {\n                return false;\n            }\n            type = this.dungeonCrawler.getMap(point);\n            if (this.contains(type, TunnelerCellType.CLOSED, TunnelerCellType.GUARANTEED_CLOSED, TunnelerCellType.NON_JOIN_CLOSED, TunnelerCellType.NON_JOIN_GUARANTEED_CLOSED)) {\n                wall = point;\n                sidestep = i;\n                break;\n            }\n            point = this.location.minus(right.multiply(i).plus(this.direction.multiply(frontFree + 1)));\n            if (!this.valid(point)) {\n                return false;\n            }\n            type = this.dungeonCrawler.getMap(point);\n            if (this.contains(type, TunnelerCellType.CLOSED, TunnelerCellType.GUARANTEED_CLOSED, TunnelerCellType.NON_JOIN_CLOSED, TunnelerCellType.NON_JOIN_GUARANTEED_CLOSED)) {\n                wall = point;\n                sidestep = -i;\n                break;\n            }\n        }\n        if ((wall.x !== 0) || (wall.y !== 0)) {\n            return false;\n        }\n        if (sidestep !== 0) {\n            return false;\n        }\n        if (this.contains(type, TunnelerCellType.NON_JOIN_CLOSED, TunnelerCellType.NON_JOIN_GUARANTEED_CLOSED)) {\n            return false;\n        }\n        if (sidestep < 0) {\n            test = right;\n        }\n        else {\n            test = right.negative;\n        }\n        let [free] = this.frontFree(wall, test, 1, 1);\n        let abs_sidestep;\n        let factor_sidestep;\n        if (sidestep > 0) {\n            abs_sidestep = sidestep;\n            factor_sidestep = 1;\n        }\n        else {\n            abs_sidestep = -sidestep;\n            factor_sidestep = -1;\n        }\n        if (free < abs_sidestep + 1) {\n            return false;\n        }\n        for (let i = 1; i <= frontFree + 1; i++) {\n            const point = this.location.plus(this.direction.multiply(i));\n            if (!this.valid(point)) {\n                return false;\n            }\n            this.dungeonCrawler.setMap(point, TunnelerCellType.NON_JOIN_CLOSED);\n        }\n        for (let i = 1; i < abs_sidestep; i++) {\n            const point = this.location.plus(right.multiply(i * factor_sidestep)).plus(this.direction.multiply(frontFree + 1));\n            if (!this.valid(point)) {\n                return false;\n            }\n            this.dungeonCrawler.setMap(point, TunnelerCellType.NON_JOIN_CLOSED);\n        }\n        return true;\n    }\n    getChildDelayProbabilityForGenerationCrawlers(generation) {\n        if ((0 <= generation) && (generation <= 10)) {\n            return this.config.childDelayProbabilityForGenerationCrawlers[generation];\n        }\n        else {\n            return 0;\n        }\n    }\n}\n\n// CONCATENATED MODULE: ./src/tunneler/tunnel.crawler.ts\n\n\nclass tunnel_crawler_TunnelCrawler extends crawler_Crawler {\n    constructor(rng, dungeonCrawler, location, direction, age, maxAge, generation, intendedDirection, stepLength, tunnelWidth, straightDoubleSpawnProbability, turnDoubleSpawnProbability, changeDirectionProbability, makeRoomsRightProbability, makeRoomsLeftProbability, joinPreference) {\n        super(rng, dungeonCrawler, location, direction, age, maxAge, generation);\n        this.intendedDirection = intendedDirection;\n        this.stepLength = stepLength;\n        this.tunnelWidth = tunnelWidth;\n        this.straightDoubleSpawnProbability = straightDoubleSpawnProbability;\n        this.turnDoubleSpawnProbability = turnDoubleSpawnProbability;\n        this.changeDirectionProbability = changeDirectionProbability;\n        this.makeRoomsRightProbability = makeRoomsRightProbability;\n        this.makeRoomsLeftProbability = makeRoomsLeftProbability;\n        this.joinPreference = joinPreference;\n    }\n    stepAhead() {\n        const dungeonCrawler = this.dungeonCrawler;\n        if (this.generation !== dungeonCrawler.activeGeneration) {\n            console.assert(this.generation > dungeonCrawler.activeGeneration);\n            return true;\n        }\n        this.age++;\n        if (this.age >= this.maxAge)\n            return false;\n        else if (this.age < 0)\n            return true;\n        console.assert(this.tunnelWidth >= 0);\n        let [frontFree, leftFree, rightFree] = this.frontFree(this.location, this.direction, this.tunnelWidth + 1, this.tunnelWidth + 1);\n        if (frontFree === 0) {\n            return false;\n        }\n        let [sizeSideways, sizeBranching] = this.sidewaysBranchingRoomSizes();\n        let right = this.rightDirection();\n        let left = right.negative;\n        const roomGeneration = this.roomGeneration();\n        if ((frontFree < (2 * this.stepLength)) || ((this.maxAge - 1) === this.age)) {\n            return this.joinOrBuildTerminatingRoom(sizeBranching, frontFree, leftFree, rightFree, right, left);\n        }\n        console.assert(frontFree >= 2 * this.stepLength);\n        console.assert(this.stepLength > 0);\n        this.buildTunnel(this.stepLength, this.tunnelWidth);\n        if ((this.rng.int % 100) < this.makeRoomsRightProbability) {\n            let spawnPoint = this.location.plus(this.direction.multiply((this.stepLength >> 1 + 1))).plus(right.multiply(this.tunnelWidth));\n            this.spawnRoomCrawler(spawnPoint, right, -1, 2, roomGeneration, sizeSideways, false);\n        }\n        if ((this.rng.int % 100) < this.makeRoomsLeftProbability) {\n            let spawnPoint = this.location.plus(this.direction.multiply((this.stepLength >> 1 + 1))).plus(left.multiply(this.tunnelWidth));\n            this.spawnRoomCrawler(spawnPoint, left, -1, 2, roomGeneration, sizeSideways, false);\n        }\n        this.location = this.location.plus(this.direction.multiply(this.stepLength));\n        const smallAnteroomPossible = this.isAnteroomPossible(right, this.tunnelWidth + 2, this.tunnelWidth + 2, 2 * this.tunnelWidth + 5);\n        const largeAnteroomPossible = this.isAnteroomPossible(right, this.tunnelWidth + 3, this.tunnelWidth + 3, 2 * this.tunnelWidth + 7);\n        let sizeUpTunnel = false;\n        let sizeDownTunnel = false;\n        let diceRoll = this.rng.int % 100;\n        const sizeUpProbability = this.getSizeUpProbability(this.generation);\n        let sizeDownProbability = sizeUpProbability + this.getSizeDownProbability(this.generation);\n        if (diceRoll < sizeUpProbability) {\n            sizeUpTunnel = true;\n        }\n        else if (diceRoll < sizeDownProbability) {\n            sizeDownTunnel = true;\n        }\n        if (sizeUpTunnel && !largeAnteroomPossible) {\n            return true;\n        }\n        const changeDirection = this.isChangeDirection();\n        const doSpawn = this.isSpawn(changeDirection);\n        if (!changeDirection && !doSpawn) {\n            return true;\n        }\n        const doSpawnRoom = this.isSpawnRoom(doSpawn);\n        const diceRollSpawn = this.rng.int % 100;\n        let childGeneration = this.generation + 1;\n        if (doSpawn) {\n            if (!sizeUpTunnel) {\n                let summedProbability = 0;\n                for (let i = 0; i <= 10; i++) {\n                    summedProbability = summedProbability + this.getChildDelayProbabilityForGenerationTunnelCrawlers(i);\n                    if (diceRollSpawn < summedProbability) {\n                        childGeneration = this.generation + i;\n                        break;\n                    }\n                }\n            }\n            else {\n                childGeneration = this.generation + this.config.sizeUpGenDelay;\n            }\n        }\n        const options = this.mutateOptions();\n        let spawnPoints = this.determineSpawnPoints(sizeUpTunnel, doSpawn, smallAnteroomPossible, right, left);\n        if (spawnPoints === true) {\n            return true;\n        }\n        const [spawnPointDirection, spawnPointRight, spawnPointLeft, builtAnteroom] = spawnPoints;\n        let usedRight = false;\n        let usedLeft = false;\n        let oldDirection = this.direction;\n        let goStraight = false;\n        if (changeDirection) {\n            let [frontFreeRight] = this.frontFree(spawnPointRight, right, this.tunnelWidth + 1, this.tunnelWidth + 1);\n            let [frontFreeLeft] = this.frontFree(spawnPointLeft, left, this.tunnelWidth + 1, this.tunnelWidth + 1);\n            if (this.intendedDirection.equal(0, 0) || this.intendedDirection.equals(this.direction)) {\n                if ((!sizeUpTunnel) || (!doSpawn)) {\n                    if ((frontFreeRight > frontFreeLeft) || ((frontFreeRight === frontFreeLeft) && this.rng.boolean)) {\n                        if (frontFreeRight > 0) {\n                            this.location = spawnPointRight;\n                            this.direction = right;\n                            usedRight = true;\n                        }\n                    }\n                    else if (frontFreeLeft > 0) {\n                        this.location = spawnPointLeft;\n                        this.direction = left;\n                        usedLeft = true;\n                    }\n                }\n                else {\n                    console.assert(doSpawn);\n                    if ((frontFreeRight < frontFreeLeft) || ((frontFreeRight === frontFreeLeft) && this.rng.boolean)) {\n                        if (frontFreeRight > 0) {\n                            this.location = spawnPointRight;\n                            this.direction = right;\n                            usedRight = true;\n                        }\n                    }\n                    else if (frontFreeLeft > 0) {\n                        this.location = spawnPointLeft;\n                        this.direction = left;\n                        usedLeft = true;\n                    }\n                }\n            }\n            else {\n                if ((this.intendedDirection.x === 0) || (this.intendedDirection.y === 0)) {\n                    this.direction = this.intendedDirection;\n                    if ((this.direction.equals(right))) {\n                        if (frontFreeRight > 0) {\n                            usedRight = true;\n                            this.location = spawnPointRight;\n                        }\n                    }\n                    else if (frontFreeLeft > 0) {\n                        console.assert(this.direction.equals(left));\n                        this.location = spawnPointLeft;\n                        usedLeft = true;\n                    }\n                }\n                else {\n                    console.assert(!this.intendedDirection.equal(0, 0));\n                    this.direction = this.intendedDirection.minus(this.direction);\n                    if (this.direction.equals(right)) {\n                        if (frontFreeRight > 0) {\n                            usedRight = true;\n                            this.location = spawnPointRight;\n                        }\n                    }\n                    else if (frontFreeLeft > 0) {\n                        console.assert(this.direction.equals(left));\n                        this.location = spawnPointLeft;\n                        usedLeft = true;\n                    }\n                }\n            }\n            if (doSpawn) {\n                let spawnPoint = Point.ZERO;\n                let spawnDirection = Point.ZERO;\n                if (usedLeft) {\n                    spawnPoint = spawnPointRight;\n                    spawnDirection = right;\n                }\n                else if (usedRight) {\n                    spawnPoint = spawnPointLeft;\n                    spawnDirection = left;\n                }\n                else {\n                    goStraight = true;\n                }\n                if (!goStraight) {\n                    let diceRoll = this.rng.int % 100;\n                    if (doSpawnRoom && (diceRoll < 50)) {\n                        this.spawnRoomCrawler(spawnPoint, spawnDirection, 0, 2, roomGeneration, sizeBranching, builtAnteroom);\n                    }\n                    else {\n                        this.spawnTunnelCrawler(sizeUpTunnel, sizeDownTunnel, spawnPoint, spawnDirection, childGeneration, spawnDirection, options);\n                    }\n                    if (doSpawnRoom && (diceRoll >= 50)) {\n                        this.spawnRoomCrawler(spawnPointDirection, oldDirection, 0, 2, roomGeneration, sizeBranching, builtAnteroom);\n                    }\n                    else {\n                        this.spawnTunnelCrawler(sizeUpTunnel, sizeDownTunnel, spawnPointDirection, oldDirection, childGeneration, oldDirection, options);\n                    }\n                }\n            }\n        }\n        else {\n            goStraight = true;\n        }\n        if (goStraight) {\n            this.location = spawnPointDirection;\n            const diceRoll = this.rng.int % 100;\n            if (doSpawnRoom && (diceRoll < 50)) {\n                this.spawnRoomCrawler(spawnPointRight, right, 0, 2, roomGeneration, sizeBranching, builtAnteroom);\n            }\n            else {\n                this.spawnTunnelCrawler(sizeUpTunnel, sizeDownTunnel, spawnPointRight, right, childGeneration, right, options);\n            }\n            if (doSpawnRoom && (diceRoll >= 50)) {\n                this.spawnRoomCrawler(spawnPointRight, left, 0, 2, roomGeneration, sizeBranching, builtAnteroom);\n            }\n            else {\n                this.spawnTunnelCrawler(sizeUpTunnel, sizeDownTunnel, spawnPointLeft, left, childGeneration, left, options);\n            }\n        }\n        return true;\n    }\n    isAnteroomPossible(right, leftFree, rightFree, minFrontFree) {\n        const dungeonCrawler = this.dungeonCrawler;\n        let anteroomPossible = false;\n        console.assert(this.tunnelWidth >= 0);\n        console.assert(dungeonCrawler.getMap(this.location) === TunnelerCellType.INSIDE_TUNNEL_OPEN);\n        dungeonCrawler.setMap(this.location, TunnelerCellType.CLOSED);\n        for (let m = 1; m <= this.tunnelWidth; m++) {\n            console.assert(dungeonCrawler.getMap(this.location.plus(right.multiply(m))) === TunnelerCellType.INSIDE_TUNNEL_OPEN);\n            console.assert(dungeonCrawler.getMap(this.location.minus(right.multiply(m))) === TunnelerCellType.INSIDE_TUNNEL_OPEN);\n            dungeonCrawler.setMap(this.location.plus(right.multiply(m)), TunnelerCellType.CLOSED);\n            dungeonCrawler.setMap(this.location.minus(right.multiply(m)), TunnelerCellType.CLOSED);\n        }\n        let [frontFree] = this.frontFree(this.location.minus(this.direction), this.direction, leftFree, rightFree);\n        if (frontFree >= minFrontFree) {\n            anteroomPossible = true;\n        }\n        dungeonCrawler.setMap(this.location, TunnelerCellType.INSIDE_TUNNEL_OPEN);\n        for (let m = 1; m <= this.tunnelWidth; m++) {\n            dungeonCrawler.setMap(this.location.plus(right.multiply(m)), TunnelerCellType.INSIDE_TUNNEL_OPEN);\n            dungeonCrawler.setMap(this.location.minus(right.multiply(m)), TunnelerCellType.INSIDE_TUNNEL_OPEN);\n        }\n        return anteroomPossible;\n    }\n    determineSpawnPoints(sizeUpTunnel, doSpawn, smallAnteroomPossible, right, left) {\n        const dungeonCrawler = this.dungeonCrawler;\n        if (sizeUpTunnel) {\n            if (((this.rng.int % 100) < this.getAnteroomProbability(this.tunnelWidth)) || doSpawn) {\n                const result = this.buildAnteroom(2 * this.tunnelWidth + 5, this.tunnelWidth + 2);\n                console.assert(result);\n                const spawnDirection = this.location.plus(this.direction.multiply(2 * this.tunnelWidth + 5));\n                const spawnRight = this.location.plus(this.direction.multiply(this.tunnelWidth + 3)).plus(right.multiply(this.tunnelWidth + 2));\n                const spawnLeft = this.location.plus(this.direction.multiply(this.tunnelWidth + 3)).plus(left.multiply(this.tunnelWidth + 2));\n                return [spawnDirection, spawnRight, spawnLeft, true];\n            }\n        }\n        else {\n            if (((this.rng.int % 100) < this.getAnteroomProbability(this.tunnelWidth)) && smallAnteroomPossible) {\n                const result = this.buildAnteroom(2 * this.tunnelWidth + 3, this.tunnelWidth + 1);\n                console.assert(result);\n                const spawnDirection = this.location.plus(this.direction.multiply(2 * this.tunnelWidth + 3));\n                const spawnRight = this.location.plus(this.direction.multiply(this.tunnelWidth + 2)).plus(right.multiply(this.tunnelWidth + 1));\n                const spawnLeft = this.location.plus(this.direction.multiply(this.tunnelWidth + 2)).plus(left.multiply(this.tunnelWidth + 1));\n                return [spawnDirection, spawnRight, spawnLeft, true];\n            }\n        }\n        const spawnDirection = this.location;\n        const spawnRight = this.location.minus(this.direction.multiply(this.tunnelWidth)).plus(right.multiply(this.tunnelWidth));\n        const spawnLeft = this.location.minus(this.direction.multiply(this.tunnelWidth)).plus(left.multiply(this.tunnelWidth));\n        if (this.dungeonCrawler.getMap(spawnRight) !== TunnelerCellType.INSIDE_TUNNEL_OPEN ||\n            dungeonCrawler.getMap(spawnLeft) !== TunnelerCellType.INSIDE_TUNNEL_OPEN) {\n            return true;\n        }\n        else {\n            return [spawnDirection, spawnRight, spawnLeft, false];\n        }\n    }\n    joinOrBuildTerminatingRoom(sizeBranching, frontFree, leftFree, rightFree, right, left) {\n        const dungeonCrawler = this.dungeonCrawler;\n        let guaranteedClosedAhead = false;\n        let openAhead = false;\n        let roomAhead = false;\n        let count = 0;\n        for (let i = -this.tunnelWidth; i <= this.tunnelWidth; i++) {\n            const test = this.location.plus(this.direction.multiply(frontFree + 1)).plus(right.multiply(i));\n            const cell = dungeonCrawler.getMap(test);\n            if (this.contains(cell, TunnelerCellType.OPEN, TunnelerCellType.GUARANTEED_OPEN, TunnelerCellType.INSIDE_TUNNEL_OPEN, TunnelerCellType.INSIDE_ANTEROOM_OPEN)) {\n                openAhead = true;\n                count++;\n            }\n            else if (this.contains(cell, TunnelerCellType.GUARANTEED_CLOSED, TunnelerCellType.NON_JOIN_GUARANTEED_CLOSED)) {\n                guaranteedClosedAhead = true;\n                count = 0;\n            }\n            else if (cell === TunnelerCellType.INSIDE_ROOM_OPEN) {\n                roomAhead = true;\n                count = 0;\n            }\n            else\n                count = 0;\n        }\n        if ((((this.rng.int % 100) <= this.joinPreference) &&\n            ((this.age < this.maxAge - 1) || (frontFree <= this.config.tunnelJoinDist))) || (frontFree < 5)) {\n            const result = this.joinOtherTunnel(count, frontFree, leftFree, rightFree, openAhead, roomAhead, guaranteedClosedAhead, right);\n            if (result != null) {\n                return result;\n            }\n        }\n        if (dungeonCrawler.isMoreRoomsDungeon(sizeBranching)) {\n            this.spawnRoomCrawler(this.location, this.direction, 0, 2, this.generation, sizeBranching, false);\n        }\n        let joinPreference = (this.rng.int % 11) * 10;\n        if ((this.joinPreference !== 100) || (this.makeRoomsLeftProbability !== this.config.lastChanceTunnelCrawler.makeRoomsLeftProbability) ||\n            (this.makeRoomsRightProbability !== this.config.lastChanceTunnelCrawler.makeRoomsRightProbability) ||\n            (this.changeDirectionProbability !== this.config.lastChanceTunnelCrawler.changeDirectionProbability) ||\n            (this.straightDoubleSpawnProbability !== this.config.lastChanceTunnelCrawler.straightDoubleSpawnProbability) ||\n            (this.turnDoubleSpawnProbability !== this.config.lastChanceTunnelCrawler.turnDoubleSpawnProbability) ||\n            (this.tunnelWidth !== 0)) {\n            let [frontFreeRight] = this.frontFree(this.location.plus(right.multiply(this.tunnelWidth)), right, this.tunnelWidth + 1, this.tunnelWidth + 1);\n            let [frontFreeLeft] = this.frontFree(this.location.minus(right.multiply(this.tunnelWidth)), left, this.tunnelWidth + 1, this.tunnelWidth + 1);\n            let [frontFreeBack] = this.frontFree(this.location, this.direction.negative, this.tunnelWidth + 1, this.tunnelWidth + 1);\n            const fork = (location, direction, generation, intendedDirection) => {\n                this.dungeonCrawler.createTunnelCrawler(location, direction, 0, this.maxAge, generation, intendedDirection, 3, 0, this.config.lastChanceTunnelCrawler.straightDoubleSpawnProbability, this.config.lastChanceTunnelCrawler.turnDoubleSpawnProbability, this.config.lastChanceTunnelCrawler.changeDirectionProbability, this.config.lastChanceTunnelCrawler.makeRoomsRightProbability, this.config.lastChanceTunnelCrawler.makeRoomsLeftProbability, joinPreference);\n            };\n            if (this.tunnelWidth === 0) {\n                if ((this.makeRoomsLeftProbability === this.config.lastChanceTunnelCrawler.makeRoomsLeftProbability) &&\n                    (this.makeRoomsRightProbability === this.config.lastChanceTunnelCrawler.makeRoomsRightProbability) &&\n                    (this.changeDirectionProbability === this.config.lastChanceTunnelCrawler.changeDirectionProbability) &&\n                    (this.straightDoubleSpawnProbability === this.config.lastChanceTunnelCrawler.straightDoubleSpawnProbability) &&\n                    (this.turnDoubleSpawnProbability === this.config.lastChanceTunnelCrawler.turnDoubleSpawnProbability)) {\n                    if ((frontFree >= frontFreeRight) && (frontFree >= frontFreeLeft) && (frontFree >= frontFreeBack)) {\n                        fork(this.location, this.direction, this.generation + 1, this.direction);\n                    }\n                    else if ((frontFreeBack >= frontFreeRight) && (frontFreeBack >= frontFreeLeft)) {\n                        fork(this.location, this.direction.negative, this.generation + this.config.genDelayLastChance, this.direction.negative);\n                    }\n                    else if ((frontFreeRight >= frontFreeLeft) || ((frontFreeRight === frontFreeLeft) && ((this.rng.int % 100) < 50))) {\n                        fork(this.location, right, this.generation + this.config.genDelayLastChance, right);\n                    }\n                    else {\n                        fork(this.location, left, this.generation + this.config.genDelayLastChance, left);\n                    }\n                }\n                else {\n                    fork(this.location, this.direction, this.generation + this.config.genDelayLastChance, this.direction);\n                }\n            }\n            else {\n                if (guaranteedClosedAhead) {\n                    fork(this.location.plus(right.multiply(this.tunnelWidth)), right, this.generation + this.config.genDelayLastChance, right);\n                    fork(this.location.minus(right.multiply(this.tunnelWidth)), left, this.generation + this.config.genDelayLastChance, left);\n                }\n                else if ((frontFreeRight >= frontFreeLeft) || ((frontFreeRight === frontFreeLeft) && ((this.rng.int % 100) < 50))) {\n                    fork(this.location.plus(right.multiply(this.tunnelWidth)), right, this.generation + this.config.genDelayLastChance, right);\n                    fork(this.location.minus(right.multiply(this.tunnelWidth)), this.direction, this.generation + this.config.genDelayLastChance, this.direction);\n                }\n                else {\n                    fork(this.location.plus(right.multiply(this.tunnelWidth)), this.direction, this.generation + this.config.genDelayLastChance, this.direction);\n                    fork(this.location.minus(right.multiply(this.tunnelWidth)), this.direction, this.generation + this.config.genDelayLastChance, this.direction);\n                }\n            }\n        }\n        return false;\n    }\n    joinOtherTunnel(count, frontFree, leftFree, rightFree, openAhead, roomAhead, guaranteedClosedAhead, right) {\n        const dungeonCrawler = this.dungeonCrawler;\n        if ((2 * this.tunnelWidth + 1) === count) {\n            this.buildTunnel(frontFree, this.tunnelWidth);\n            return false;\n        }\n        if (openAhead) {\n            return this.buildSmallerTunnel(frontFree, dungeonCrawler, right);\n        }\n        if (roomAhead && (this.tunnelWidth === 0)) {\n            if (frontFree > 1) {\n                const test = this.location.plus(this.direction.multiply(frontFree + 1));\n                const cell = dungeonCrawler.getMap(test);\n                console.assert(cell === TunnelerCellType.INSIDE_ROOM_OPEN);\n                this.buildTunnel(frontFree - 1, 0);\n                if (this.direction.x === 0)\n                    dungeonCrawler.setMap(this.location.plus(this.direction.multiply(frontFree)), TunnelerCellType.V_DOOR);\n                else {\n                    console.assert(this.direction.y === 0);\n                    dungeonCrawler.setMap(this.location.plus(this.direction.multiply(frontFree)), TunnelerCellType.H_DOOR);\n                }\n                return false;\n            }\n        }\n        if (guaranteedClosedAhead) {\n            if (this.tunnelWidth === 0) {\n                if (this.joinPreference !== 100 ||\n                    this.makeRoomsLeftProbability !== 20 ||\n                    this.makeRoomsRightProbability !== 20 ||\n                    this.changeDirectionProbability !== 30 ||\n                    this.straightDoubleSpawnProbability !== 0 ||\n                    this.turnDoubleSpawnProbability !== 0 ||\n                    this.tunnelWidth !== 0) {\n                    const joinPreference = (this.rng.int % 11) * 10;\n                    const direction = leftFree >= rightFree ? right.negative : right;\n                    dungeonCrawler.createTunnelCrawler(this.location, direction, 0, this.maxAge, this.generation + 1, direction, 3, 0, 0, 0, 30, 20, 20, joinPreference);\n                }\n                return false;\n            }\n        }\n        if (!openAhead && !guaranteedClosedAhead) {\n            if (this.isSpecialCase(frontFree, right)) {\n                const isJoined = this.buildTunnel(frontFree, this.tunnelWidth);\n                console.assert(isJoined);\n                for (let i = -this.tunnelWidth; i <= this.tunnelWidth; i++) {\n                    dungeonCrawler.setMap(this.location.plus(this.direction.multiply(frontFree + 1)).plus(right.multiply(i)), TunnelerCellType.INSIDE_TUNNEL_OPEN);\n                }\n                let directionLength = frontFree + 2;\n                let contactInNextRow = true;\n                let rowAfterIsOK = true;\n                while (contactInNextRow && rowAfterIsOK) {\n                    for (let i = -this.tunnelWidth; i <= this.tunnelWidth; i++) {\n                        const test = this.location.plus(this.direction.multiply(directionLength)).plus(right.multiply(i));\n                        const cell = dungeonCrawler.getMap(test);\n                        if (cell !== TunnelerCellType.CLOSED) {\n                            contactInNextRow = false;\n                            break;\n                        }\n                    }\n                    let testRight = this.location.plus(this.direction.multiply(directionLength)).plus(right.multiply(this.tunnelWidth + 1));\n                    let testLeft = this.location.plus(this.direction.multiply(directionLength)).minus(right.multiply(this.tunnelWidth + 1));\n                    let rightCell = dungeonCrawler.getMap(testRight);\n                    let leftCell = dungeonCrawler.getMap(testLeft);\n                    if (!this.contains(rightCell, TunnelerCellType.OPEN, TunnelerCellType.GUARANTEED_OPEN, TunnelerCellType.INSIDE_TUNNEL_OPEN, TunnelerCellType.INSIDE_ANTEROOM_OPEN) &&\n                        !this.contains(leftCell, TunnelerCellType.OPEN, TunnelerCellType.GUARANTEED_OPEN, TunnelerCellType.INSIDE_TUNNEL_OPEN, TunnelerCellType.INSIDE_ANTEROOM_OPEN)) {\n                        contactInNextRow = false;\n                        break;\n                    }\n                    if ((rightCell === TunnelerCellType.INSIDE_ROOM_OPEN) || (leftCell === TunnelerCellType.INSIDE_ROOM_OPEN)) {\n                        contactInNextRow = false;\n                        break;\n                    }\n                    for (let i = -this.tunnelWidth; i <= this.tunnelWidth; i++) {\n                        const test = this.location.plus(this.direction.multiply(directionLength + 1)).plus(right.multiply(i));\n                        const cell = dungeonCrawler.getMap(test);\n                        if (cell !== TunnelerCellType.CLOSED) {\n                            rowAfterIsOK = false;\n                        }\n                    }\n                    testRight = this.location.plus(this.direction.multiply(directionLength + 1)).plus(right.multiply(this.tunnelWidth + 1));\n                    testLeft = this.location.plus(this.direction.multiply(directionLength + 1)).minus(right.multiply(this.tunnelWidth + 1));\n                    rightCell = dungeonCrawler.getMap(testRight);\n                    leftCell = dungeonCrawler.getMap(testLeft);\n                    if (!this.contains(rightCell, TunnelerCellType.OPEN, TunnelerCellType.GUARANTEED_OPEN, TunnelerCellType.INSIDE_TUNNEL_OPEN, TunnelerCellType.INSIDE_ANTEROOM_OPEN, TunnelerCellType.CLOSED) &&\n                        !this.contains(leftCell, TunnelerCellType.OPEN, TunnelerCellType.GUARANTEED_OPEN, TunnelerCellType.INSIDE_TUNNEL_OPEN, TunnelerCellType.INSIDE_ANTEROOM_OPEN, TunnelerCellType.CLOSED)) {\n                        rowAfterIsOK = false;\n                    }\n                    if ((rightCell === TunnelerCellType.INSIDE_ROOM_OPEN) || (leftCell === TunnelerCellType.INSIDE_ROOM_OPEN))\n                        rowAfterIsOK = false;\n                    let allOpen = true;\n                    for (let i = -this.tunnelWidth - 1; i <= this.tunnelWidth + 1; i++) {\n                        const test = this.location.plus(this.direction.multiply(directionLength + 1)).plus(right.multiply(i));\n                        const cell = dungeonCrawler.getMap(test);\n                        if ((cell !== TunnelerCellType.INSIDE_TUNNEL_OPEN) && (cell !== TunnelerCellType.INSIDE_ANTEROOM_OPEN)) {\n                            allOpen = false;\n                        }\n                    }\n                    if (allOpen) {\n                        rowAfterIsOK = true;\n                    }\n                    if (contactInNextRow && rowAfterIsOK) {\n                        for (let i = -this.tunnelWidth; i <= this.tunnelWidth; i++) {\n                            dungeonCrawler.setMap(this.location.plus(this.direction.multiply(directionLength)).plus(right.multiply(i)), TunnelerCellType.INSIDE_TUNNEL_OPEN);\n                        }\n                    }\n                    directionLength++;\n                }\n                return false;\n            }\n            if (this.tunnelWidth === 0) {\n                if (dungeonCrawler.getMap(this.location.plus(this.direction.multiply(frontFree + 1))) === TunnelerCellType.CLOSED) {\n                    if (dungeonCrawler.getMap(this.location.plus(this.direction.multiply(frontFree + 1)).plus(right)) === TunnelerCellType.INSIDE_ROOM_OPEN) {\n                        this.direction = right.negative;\n                        if (this.direction.equals(this.intendedDirection.negative)) {\n                            this.direction = this.intendedDirection;\n                        }\n                        return true;\n                    }\n                    else if (dungeonCrawler.getMap(this.location.plus(this.direction.multiply(frontFree + 1)).minus(right)) === TunnelerCellType.INSIDE_ROOM_OPEN) {\n                        this.direction = right;\n                        if (this.direction.equals(this.intendedDirection.negative)) {\n                            this.direction = this.intendedDirection;\n                        }\n                        return true;\n                    }\n                }\n            }\n        }\n        return null;\n    }\n    isSpecialCase(frontFree, right) {\n        const dungeonCrawler = this.dungeonCrawler;\n        let isSpecialCase = true;\n        for (let i = -this.tunnelWidth; i <= this.tunnelWidth; i++) {\n            const test = this.location.plus(this.direction.multiply(frontFree + 1)).plus(right.multiply(i));\n            const cell = dungeonCrawler.getMap(test);\n            if (cell !== TunnelerCellType.CLOSED) {\n                isSpecialCase = false;\n                break;\n            }\n        }\n        let testRight = this.location.plus(this.direction.multiply(frontFree + 1)).plus(right.multiply(this.tunnelWidth + 1));\n        let testLeft = this.location.plus(this.direction.multiply(frontFree + 1)).minus(right.multiply(this.tunnelWidth + 1));\n        let rightCell = dungeonCrawler.getMap(testRight);\n        let leftCell = dungeonCrawler.getMap(testLeft);\n        if (!this.contains(rightCell, TunnelerCellType.OPEN, TunnelerCellType.GUARANTEED_OPEN, TunnelerCellType.INSIDE_TUNNEL_OPEN, TunnelerCellType.INSIDE_ANTEROOM_OPEN) &&\n            !this.contains(leftCell, TunnelerCellType.OPEN, TunnelerCellType.GUARANTEED_OPEN, TunnelerCellType.INSIDE_TUNNEL_OPEN, TunnelerCellType.INSIDE_ANTEROOM_OPEN)) {\n            isSpecialCase = false;\n        }\n        if ((rightCell === TunnelerCellType.INSIDE_ROOM_OPEN) || (leftCell === TunnelerCellType.INSIDE_ROOM_OPEN)) {\n            isSpecialCase = false;\n        }\n        for (let i = -this.tunnelWidth - 1; i <= this.tunnelWidth + 1; i++) {\n            const test = this.location.plus(this.direction.multiply(frontFree + 2)).plus(right.multiply(i));\n            const cell = dungeonCrawler.getMap(test);\n            if (cell === TunnelerCellType.INSIDE_ROOM_OPEN) {\n                isSpecialCase = false;\n                break;\n            }\n        }\n        return isSpecialCase;\n    }\n    spawnTunnelCrawler(sizeUpTunnel, sizeDownTunnel, location, direction, generation, intendedDirection, options) {\n        let tunnelWidth = this.tunnelWidth;\n        let stepLength = this.stepLength;\n        if (sizeUpTunnel) {\n            tunnelWidth++;\n            stepLength = stepLength + 2;\n        }\n        else if (sizeDownTunnel) {\n            tunnelWidth--;\n            if (tunnelWidth < 0) {\n                tunnelWidth = 0;\n            }\n            stepLength = stepLength - 2;\n            if (stepLength < 3) {\n                stepLength = 3;\n            }\n        }\n        this.dungeonCrawler.createTunnelCrawler(location, direction, 0, this.getMaxAgeTunnelCrawlers(generation), generation, intendedDirection, stepLength, tunnelWidth, options.straightDoubleSpawnProbability, options.turnDoubleSpawnProbability, options.changeDirectionProbability, options.makeRoomsRightProbability, options.makeRoomsLeftProbability, options.joinPreference);\n    }\n    spawnRoomCrawler(location, direction, age, maxAge, generation, size, builtAnteroom) {\n        const defaultWidth = Math.max(1, 2 * this.tunnelWidth);\n        if (builtAnteroom) {\n            generation = this.generation + Math.floor((generation - this.generation) / (this.config.genSpeedUpOnAnteroom));\n        }\n        this.dungeonCrawler.createRoomCrawler(location, direction, age, maxAge, generation, defaultWidth, size);\n    }\n    buildSmallerTunnel(frontFree, dungeonCrawler, right) {\n        const test = this.location.plus(this.direction.multiply(frontFree + 1));\n        const cell = dungeonCrawler.getMap(test);\n        if (this.contains(cell, TunnelerCellType.OPEN, TunnelerCellType.GUARANTEED_OPEN, TunnelerCellType.INSIDE_TUNNEL_OPEN, TunnelerCellType.INSIDE_ANTEROOM_OPEN)) {\n            if (!this.buildTunnel(frontFree, 0)) {\n                console.error(\"openAhead, failed to join, frontFree = \" + frontFree);\n            }\n            return false;\n        }\n        let offset = 0;\n        for (let i = 1; i <= this.tunnelWidth; i++) {\n            const testP = this.location.plus(this.direction.multiply(frontFree + 1)).plus(right.multiply(i));\n            const cellP = dungeonCrawler.getMap(testP);\n            if (this.contains(cellP, TunnelerCellType.OPEN, TunnelerCellType.GUARANTEED_OPEN, TunnelerCellType.INSIDE_TUNNEL_OPEN, TunnelerCellType.INSIDE_ANTEROOM_OPEN)) {\n                offset = i;\n                break;\n            }\n            const testM = this.location.plus(this.direction.multiply(frontFree + 1)).minus(right.multiply(i));\n            const cellM = dungeonCrawler.getMap(testM);\n            if (this.contains(cellM, TunnelerCellType.OPEN, TunnelerCellType.GUARANTEED_OPEN, TunnelerCellType.INSIDE_TUNNEL_OPEN, TunnelerCellType.INSIDE_ANTEROOM_OPEN)) {\n                offset = -i;\n                break;\n            }\n        }\n        console.assert(offset !== 0);\n        for (let i = 1; i <= frontFree; i++) {\n            const point = this.location.plus(this.direction.multiply(i)).plus(right.multiply(offset));\n            dungeonCrawler.setMap(point, TunnelerCellType.INSIDE_TUNNEL_OPEN);\n        }\n        return false;\n    }\n    roomGeneration() {\n        let diceRoll = this.rng.int % 100;\n        let roomGeneration = this.generation;\n        let summedProbability = 0;\n        for (let i = 0; i <= 10; i++) {\n            summedProbability = summedProbability + this.getChildDelayProbabilityForGenerationRoomCrawlers(i);\n            if (diceRoll < summedProbability) {\n                roomGeneration = this.generation + i;\n                break;\n            }\n        }\n        return roomGeneration;\n    }\n    sidewaysBranchingRoomSizes() {\n        let sizeSideways;\n        let sizeBranching;\n        const probabilityMediumSideways = this.getRoomSizeProbabilitySideways(this.tunnelWidth, RoomSize.MEDIUM);\n        const probabilitySmallSideways = this.getRoomSizeProbabilitySideways(this.tunnelWidth, RoomSize.SMALL);\n        const probabilityMediumBranching = this.getRoomSizeProbabilityBranching(this.tunnelWidth, RoomSize.MEDIUM);\n        const probSmallBranching = this.getRoomSizeProbabilityBranching(this.tunnelWidth, RoomSize.SMALL);\n        let diceRoll = this.rng.int % 100;\n        if (diceRoll < probabilitySmallSideways)\n            sizeSideways = RoomSize.SMALL;\n        else if (diceRoll < (probabilitySmallSideways + probabilityMediumSideways))\n            sizeSideways = RoomSize.MEDIUM;\n        else\n            sizeSideways = RoomSize.LARGE;\n        if (diceRoll < probSmallBranching)\n            sizeBranching = RoomSize.SMALL;\n        else if (diceRoll < (probSmallBranching + probabilityMediumBranching))\n            sizeBranching = RoomSize.MEDIUM;\n        else\n            sizeBranching = RoomSize.LARGE;\n        return [sizeSideways, sizeBranching];\n    }\n    isChangeDirection() {\n        return (this.rng.int % 100) < this.changeDirectionProbability;\n    }\n    isSpawn(changeDirection) {\n        if (changeDirection && ((this.rng.int % 100) < this.turnDoubleSpawnProbability)) {\n            return true;\n        }\n        else if (!changeDirection && ((this.rng.int % 100) < this.straightDoubleSpawnProbability)) {\n            return true;\n        }\n        return false;\n    }\n    isSpawnRoom(doSpawn) {\n        return doSpawn && ((this.rng.int % 100) > this.config.patience);\n    }\n    buildAnteroom(length, width) {\n        if ((length < 3) || (width < 1)) {\n            console.error(\"Anteroom must be at least 3x3\");\n            return false;\n        }\n        let [frontFree] = this.frontFree(this.location, this.direction, width + 1, width + 1);\n        if (frontFree <= length) {\n            return false;\n        }\n        const right = this.rightDirection();\n        for (let directionLength = 1; directionLength <= length; directionLength++) {\n            for (let side = -width; side <= width; side++) {\n                const current = this.location.plus(this.direction.multiply(directionLength)).plus(right.multiply(side));\n                this.dungeonCrawler.setMap(current, TunnelerCellType.INSIDE_ANTEROOM_OPEN);\n            }\n        }\n        if ((width >= 3) && (length >= 7) && this.config.columnsInTunnels) {\n            let directionLength = 2;\n            this.placeColumns(width, directionLength, right);\n        }\n        return true;\n    }\n    buildTunnel(length, width) {\n        if ((length < 1) || (width < 0)) {\n            console.error(\"Trying to build zero size tunnel with length = \" + length + \"; width =  \" + width);\n            return false;\n        }\n        let [frontFree] = this.frontFree(this.location, this.direction, width + 1, width + 1);\n        if (frontFree < length) {\n            return false;\n        }\n        const right = this.rightDirection();\n        for (let directionLength = 1; directionLength <= length; directionLength++) {\n            for (let side = -width; side <= width; side++) {\n                const current = this.location.plus(this.direction.multiply(directionLength)).plus(right.multiply(side));\n                this.dungeonCrawler.setMap(current, TunnelerCellType.INSIDE_TUNNEL_OPEN);\n            }\n        }\n        if ((width >= 3) && (length >= 7) && this.config.columnsInTunnels) {\n            const numCols = Math.floor((length - 1) / 6);\n            console.assert(numCols > 0);\n            for (let i = 0; i < numCols; i++) {\n                let directionLength = 2 + i * 3;\n                this.placeColumns(width, directionLength, right);\n            }\n        }\n        return true;\n    }\n    placeColumns(width, directionLength, right) {\n        let side = -width + 1;\n        let point = this.location.plus(this.direction.multiply(directionLength)).plus(right.multiply(side));\n        this.dungeonCrawler.setMap(point, TunnelerCellType.COLUMN);\n        side = width - 1;\n        point = this.location.plus(this.direction.multiply(directionLength)).plus(right.multiply(side));\n        this.dungeonCrawler.setMap(point, TunnelerCellType.COLUMN);\n        directionLength = directionLength - 1;\n        side = -width + 1;\n        point = this.location.plus(this.direction.multiply(directionLength)).plus(right.multiply(side));\n        this.dungeonCrawler.setMap(point, TunnelerCellType.COLUMN);\n        side = width - 1;\n        point = this.location.plus(this.direction.multiply(directionLength)).plus(right.multiply(side));\n        this.dungeonCrawler.setMap(point, TunnelerCellType.COLUMN);\n    }\n    getChildDelayProbabilityForGenerationRoomCrawlers(generation) {\n        if ((0 <= generation) && (generation <= 10)) {\n            return this.config.childDelayProbabilityForGenerationRoomCrawlers[generation];\n        }\n        else {\n            return 0;\n        }\n    }\n    getChildDelayProbabilityForGenerationTunnelCrawlers(generation) {\n        if ((0 <= generation) && (generation <= 10)) {\n            return this.config.childDelayProbabilityForGenerationTunnelCrawlers[generation];\n        }\n        else {\n            return 0;\n        }\n    }\n    getAnteroomProbability(tunnelWidth) {\n        if (tunnelWidth >= this.config.anteroomProbability.length) {\n            return 100;\n        }\n        else {\n            return this.config.anteroomProbability[tunnelWidth];\n        }\n    }\n    getSizeUpProbability(generation) {\n        if (generation >= this.config.sizeUpProbability.length) {\n            return this.config.sizeUpProbability[this.config.sizeUpProbability.length - 1];\n        }\n        else {\n            return this.config.sizeUpProbability[generation];\n        }\n    }\n    getSizeDownProbability(generation) {\n        if (generation >= this.config.sizeDownProbability.length) {\n            return this.config.sizeDownProbability[this.config.sizeDownProbability.length - 1];\n        }\n        else {\n            return this.config.sizeDownProbability[generation];\n        }\n    }\n    getMaxAgeTunnelCrawlers(generation) {\n        if (generation >= this.config.maxAgesTunnelCrawlers.length) {\n            return this.config.maxAgesTunnelCrawlers[this.config.maxAgesTunnelCrawlers.length - 1];\n        }\n        else {\n            return this.config.maxAgesTunnelCrawlers[generation];\n        }\n    }\n    getRoomSizeProbabilitySideways(tunnelWidth, size) {\n        if (tunnelWidth >= this.config.roomSizeProbabilitySidewaysRooms.length) {\n            if (RoomSize.LARGE === size) {\n                return 100;\n            }\n            else {\n                return 0;\n            }\n        }\n        else {\n            switch (size) {\n                case RoomSize.LARGE:\n                    return (this.config.roomSizeProbabilitySidewaysRooms[tunnelWidth][2]);\n                case RoomSize.MEDIUM:\n                    return (this.config.roomSizeProbabilitySidewaysRooms[tunnelWidth][1]);\n                case RoomSize.SMALL:\n                    return (this.config.roomSizeProbabilitySidewaysRooms[tunnelWidth][0]);\n            }\n        }\n    }\n    getRoomSizeProbabilityBranching(tunnelWidth, size) {\n        if (tunnelWidth >= this.config.roomSizeProbabilityBranching.length) {\n            if (RoomSize.LARGE === size) {\n                return 100;\n            }\n            else {\n                return 0;\n            }\n        }\n        else {\n            switch (size) {\n                case RoomSize.LARGE:\n                    return (this.config.roomSizeProbabilityBranching[tunnelWidth][2]);\n                case RoomSize.MEDIUM:\n                    return (this.config.roomSizeProbabilityBranching[tunnelWidth][1]);\n                case RoomSize.SMALL:\n                    return (this.config.roomSizeProbabilityBranching[tunnelWidth][0]);\n            }\n        }\n    }\n    mutateOptions() {\n        return {\n            straightDoubleSpawnProbability: this.dungeonCrawler.mutate(this.straightDoubleSpawnProbability),\n            turnDoubleSpawnProbability: this.dungeonCrawler.mutate(this.turnDoubleSpawnProbability),\n            changeDirectionProbability: this.dungeonCrawler.mutate(this.changeDirectionProbability),\n            makeRoomsRightProbability: this.dungeonCrawler.mutate(this.makeRoomsRightProbability),\n            makeRoomsLeftProbability: this.dungeonCrawler.mutate(this.makeRoomsLeftProbability),\n            joinPreference: this.dungeonCrawler.mutate(this.joinPreference),\n        };\n    }\n}\n\n// CONCATENATED MODULE: ./src/tunneler/room.crawler.ts\n\n\nclass room_crawler_RoomCrawler extends crawler_Crawler {\n    constructor(rng, dungeonCrawler, location, direction, age, maxAge, generation, defaultWidth, size) {\n        super(rng, dungeonCrawler, location, direction, age, maxAge, generation);\n        this.defaultWidth = defaultWidth;\n        this.size = size;\n    }\n    stepAhead() {\n        if (!this.dungeonCrawler.isMoreRoomsDungeon(this.size)) {\n            return false;\n        }\n        if (this.generation !== this.dungeonCrawler.activeGeneration) {\n            console.assert(this.generation > this.dungeonCrawler.activeGeneration);\n            return true;\n        }\n        this.age++;\n        if (this.age >= this.maxAge)\n            return false;\n        else if (this.age < 0)\n            return true;\n        const right = this.rightDirection();\n        let defaultWidth = this.defaultWidth;\n        const minSize = this.getMinRoomSize(this.size);\n        const maxSize = this.getMaxRoomSize(this.size);\n        let leftFree;\n        let rightFree;\n        let frontFree;\n        do {\n            [frontFree, leftFree, rightFree] = this.frontFree(this.location, this.direction, defaultWidth + 1, defaultWidth + 1);\n            let length = frontFree - 2;\n            let width = leftFree + rightFree - 1;\n            if (length < 2) {\n                break;\n            }\n            if (width / length < this.config.roomAspectRatio) {\n                length = Math.floor(width / this.config.roomAspectRatio);\n                if (width / length < this.config.roomAspectRatio) {\n                    console.error(\"length = \" + length + \", width = \" + width + \", but width/length should be >= \" + this.config.roomAspectRatio);\n                }\n            }\n            if (length / width < this.config.roomAspectRatio) {\n                width = Math.floor(length / this.config.roomAspectRatio);\n                if (length / width < this.config.roomAspectRatio) {\n                    console.error(\"length = \" + length + \", width = \" + width + \", but length/width should be >= \" + this.config.roomAspectRatio);\n                }\n            }\n            if (width / length < this.config.roomAspectRatio) {\n                console.error(\"The Emperor suggests you make your roomAspectRatio in the design file smaller...\");\n                return false;\n            }\n            while (length * width > maxSize) {\n                if (length > width)\n                    length--;\n                else if (width > length)\n                    width--;\n                else if ((this.rng.int % 100) < 50)\n                    length--;\n                else\n                    width--;\n            }\n            console.assert(length * width <= maxSize);\n            if (length * width >= minSize) {\n                const room = new Room();\n                if (leftFree <= rightFree) {\n                    if ((2 * leftFree - 1) > width) {\n                        this.attachRoom(room, right, length, (width >> 1) - width + 1, width >> 2);\n                    }\n                    else {\n                        this.attachRoom(room, right, length, -leftFree + 1, -leftFree + width);\n                    }\n                    if (this.direction.x === 0) {\n                        this.dungeonCrawler.setMap(this.location.plus(this.direction), TunnelerCellType.V_DOOR);\n                    }\n                    else {\n                        console.assert(this.direction.y === 0);\n                        this.dungeonCrawler.setMap(this.location.plus(this.direction), TunnelerCellType.H_DOOR);\n                    }\n                }\n                else {\n                    if ((2 * rightFree - 1) > width) {\n                        this.attachRoom(room, right, length, -(width >> 1), -(width >> 1) + width - 1);\n                    }\n                    else {\n                        this.attachRoom(room, right, length, rightFree - width, rightFree - 1);\n                    }\n                    if (this.direction.x === 0) {\n                        this.dungeonCrawler.setMap(this.location.plus(this.direction), TunnelerCellType.V_DOOR);\n                    }\n                    else {\n                        console.assert(this.direction.y === 0);\n                        this.dungeonCrawler.setMap(this.location.plus(this.direction), TunnelerCellType.H_DOOR);\n                    }\n                }\n                this.dungeonCrawler.builtRoomDungeon(this.size);\n                room.inDungeon = true;\n                this.dungeonCrawler.addRoom(room);\n                return false;\n            }\n            else {\n                defaultWidth++;\n            }\n        } while ((frontFree - 2) >= ((2 * defaultWidth + 1) * this.config.roomAspectRatio));\n        return false;\n    }\n    attachRoom(room, right, length, from, to) {\n        for (let direction = 1; direction <= length; direction++) {\n            for (let sideDistance = from; sideDistance <= to; sideDistance++) {\n                const point = this.location.plus(this.direction.multiply(direction + 1)).plus(right.multiply(sideDistance));\n                this.dungeonCrawler.setMap(point, TunnelerCellType.INSIDE_ROOM_OPEN);\n                room.inside.push(point);\n            }\n        }\n    }\n    getMinRoomSize(size) {\n        switch (size) {\n            case RoomSize.SMALL:\n                return this.config.minRoomSize;\n            case RoomSize.MEDIUM:\n                return this.config.mediumRoomSize;\n            case RoomSize.LARGE:\n                return this.config.largeRoomSize;\n        }\n    }\n    getMaxRoomSize(size) {\n        switch (size) {\n            case RoomSize.SMALL:\n                return (this.config.mediumRoomSize - 1);\n            case RoomSize.MEDIUM:\n                return (this.config.largeRoomSize - 1);\n            case RoomSize.LARGE:\n                return (this.config.maxRoomSize - 1);\n        }\n    }\n}\n\n// CONCATENATED MODULE: ./src/tunneler/dungeon.crawler.ts\n\n\n\n\nclass dungeon_crawler_DungeonCrawler {\n    constructor(config, rng) {\n        this.rooms = [];\n        this.mapFlagsDirections = [];\n        this.crawlers = [];\n        this.activeGeneration = 0;\n        this.currSmallRoomsLabyrinth = 0;\n        this.currMediumRoomsLabyrinth = 0;\n        this.currLargeRoomsLabyrinth = 0;\n        this.currSmallRoomsDungeon = 0;\n        this.currMediumRoomsDungeon = 0;\n        this.currLargeRoomsDungeon = 0;\n        this.rng = rng;\n        this.config = config;\n        console.assert(config.childDelayProbabilityForGenerationCrawlers.length === 11);\n        console.assert(config.childDelayProbabilityForGenerationRoomCrawlers.length === 11);\n        console.assert(config.roomAspectRatio >= 0 && config.roomAspectRatio <= 1, \"roomAspectRatio must be a double between 0 and 1\");\n        console.assert(config.genSpeedUpOnAnteroom >= 1, \"Please use genSpeedUpOnAnteroom >= 1; parameter reset to 1\");\n        console.assert(!config.crawlersInAnterooms || (config.crawlersInAnterooms && config.crawlersInTunnels), \"when you allow Crawlers in Anterooms, you must also allow them in Tunnels\");\n        this.map = [];\n        for (let i = 0; i < this.config.width * this.config.height; i++) {\n            this.map[i] = this.config.background;\n            this.mapFlagsDirections[i] = false;\n        }\n        for (let i = 0; i < 4; i++) {\n            this.crawlers[i] = null;\n        }\n        this.setRect(0, 0, this.config.width - 1, 0, TunnelerCellType.GUARANTEED_CLOSED);\n        this.setRect(0, 0, 0, this.config.height - 1, TunnelerCellType.GUARANTEED_CLOSED);\n        this.setRect(this.config.width - 1, 0, this.config.width - 1, this.config.height - 1, TunnelerCellType.GUARANTEED_CLOSED);\n        this.setRect(0, this.config.height - 1, this.config.width - 1, this.config.height - 1, TunnelerCellType.GUARANTEED_CLOSED);\n        for (const des of this.config.design) {\n            this.setRectFill(des);\n        }\n        for (const entry of this.config.openings) {\n            switch (entry) {\n                case model_Direction.NORTH:\n                    this.setRect(0, Math.floor(this.config.height / 2) - 1, 2, Math.floor(this.config.height / 2) + 1, TunnelerCellType.GUARANTEED_OPEN);\n                    break;\n                case model_Direction.WEST:\n                    this.setRect(Math.floor(this.config.width / 2) - 1, 0, Math.floor(this.config.width / 2) + 1, 2, TunnelerCellType.GUARANTEED_OPEN);\n                    break;\n                case model_Direction.EAST:\n                    this.setRect(Math.floor(this.config.width / 2) - 1, this.config.height - 3, Math.floor(this.config.width / 2) + 1, this.config.height - 1, TunnelerCellType.GUARANTEED_OPEN);\n                    break;\n                case model_Direction.SOUTH:\n                    this.setRect(this.config.width - 3, Math.floor(this.config.height / 2) - 1, this.config.width - 1, Math.floor(this.config.height / 2) + 1, TunnelerCellType.GUARANTEED_OPEN);\n                    break;\n                case model_Direction.NORTH_WEST:\n                    this.setRect(0, 0, 2, 2, TunnelerCellType.GUARANTEED_OPEN);\n                    break;\n                case model_Direction.NORTH_EAST:\n                    this.setRect(0, this.config.height - 3, 2, this.config.height - 1, TunnelerCellType.GUARANTEED_OPEN);\n                    break;\n                case model_Direction.SOUTH_WEST:\n                    this.setRect(this.config.width - 3, 0, this.config.width - 1, 2, TunnelerCellType.GUARANTEED_OPEN);\n                    break;\n                case model_Direction.SOUTH_EAST:\n                    this.setRect(this.config.width - 3, this.config.height - 3, this.config.width - 1, this.config.height - 1, TunnelerCellType.GUARANTEED_OPEN);\n                    break;\n                default:\n                    console.assert(false);\n                    break;\n            }\n        }\n        const spawnRandomWallCrawler = (location, direction, generation) => {\n            this.createWallCrawler(location, direction, 0, this.getMaxAgeCrawlers(generation), generation, direction, this.getStepLength(generation), 1, this.getCorridorWidth(generation), this.mutate2(config.randCrawler.straightSingleSpawnProbability), this.mutate2(config.randCrawler.straightDoubleSpawnProbability), this.mutate2(config.randCrawler.turnSingleSpawnProbability), this.mutate2(config.randCrawler.turnDoubleSpawnProbability), this.mutate2(config.randCrawler.changeDirectionProbability));\n        };\n        for (let generation = 0; generation < config.randCrawler.perGeneration.length; generation++) {\n            let crawlersPer1000Squares = config.randCrawler.perGeneration[generation];\n            if (crawlersPer1000Squares > 0) {\n                let crawlersPerTopBottomWall = Math.floor((this.config.height * crawlersPer1000Squares) / 1000);\n                if (crawlersPerTopBottomWall === 0) {\n                    if (this.rng.int % 1000 < (this.config.height * crawlersPer1000Squares))\n                        crawlersPerTopBottomWall = 1;\n                }\n                let yIndex = 0;\n                for (let ind = 0; ind < crawlersPerTopBottomWall; ind++) {\n                    yIndex = 2 + this.rng.int % (this.config.height - 4);\n                    spawnRandomWallCrawler(new Point(0, yIndex), Point.SOUTH, generation);\n                    yIndex = 2 + this.rng.int % (this.config.height - 4);\n                    spawnRandomWallCrawler(new Point(this.config.width - 1, yIndex), Point.NORTH, generation);\n                }\n                let crawlersPerLeftRightWall = Math.floor((this.config.width * crawlersPer1000Squares) / 1000);\n                if (crawlersPerLeftRightWall === 0) {\n                    if (this.rng.int % 1000 < (this.config.width * crawlersPer1000Squares))\n                        crawlersPerLeftRightWall = 1;\n                }\n                let xIndex = 0;\n                for (let i = 0; i < crawlersPerLeftRightWall; i++) {\n                    xIndex = 2 + this.rng.int % (this.config.width - 4);\n                    spawnRandomWallCrawler(new Point(xIndex, 0), Point.EAST, generation);\n                    xIndex = 2 + this.rng.int % (this.config.width - 4);\n                    spawnRandomWallCrawler(new Point(xIndex, this.config.height - 1), Point.EAST, generation);\n                }\n            }\n        }\n        for (const cd of config.crawlers) {\n            this.createWallCrawler(cd.location, cd.direction, -cd.age, cd.maxAge, cd.generation, cd.intendedDirection, cd.stepLength, cd.opening, cd.corridorWidth, cd.straightSingleSpawnProbability, cd.straightDoubleSpawnProbability, cd.turnSingleSpawnProbability, cd.turnDoubleSpawnProbability, cd.changeDirectionProbability);\n        }\n        for (let [first, second] of config.crawlerPairs) {\n            let firstIsOpen = true;\n            if (this.rng.boolean)\n                firstIsOpen = false;\n            this.createWallCrawler(first.location, first.direction, -first.age, first.maxAge, first.generation, first.intendedDirection, first.stepLength, (firstIsOpen ? 1 : 0), first.corridorWidth, first.straightSingleSpawnProbability, first.straightDoubleSpawnProbability, first.turnSingleSpawnProbability, first.turnDoubleSpawnProbability, first.changeDirectionProbability);\n            this.setMap(first.location, TunnelerCellType.CLOSED);\n            this.createWallCrawler(second.location, second.direction, -second.age, second.maxAge, second.generation, second.intendedDirection, second.stepLength, (firstIsOpen ? 1 : 0), second.corridorWidth, second.straightSingleSpawnProbability, second.straightDoubleSpawnProbability, second.turnSingleSpawnProbability, second.turnDoubleSpawnProbability, second.changeDirectionProbability);\n            this.setMap(second.location, TunnelerCellType.CLOSED);\n        }\n        for (let td of config.tunnelCrawlers) {\n            this.createTunnelCrawler(td.location, td.direction, -td.age, td.maxAge, td.generation, td.intendedDirection, td.stepLength, td.tunnelWidth, td.straightDoubleSpawnProbability, td.turnDoubleSpawnProbability, td.changeDirectionProbability, td.makeRoomsRightProbability, td.makeRoomsLeftProbability, td.joinPreference);\n        }\n    }\n    isOpen(pos) {\n        let type = this.getMap(pos);\n        return (type === TunnelerCellType.OPEN) ||\n            (type === TunnelerCellType.NON_JOIN_OPEN) ||\n            (type === TunnelerCellType.INSIDE_TUNNEL_OPEN) ||\n            (type === TunnelerCellType.INSIDE_ANTEROOM_OPEN) ||\n            (type === TunnelerCellType.GUARANTEED_OPEN) ||\n            (type === TunnelerCellType.NON_JOIN_GUARANTEED_OPEN);\n    }\n    static isActive(pos, Active) {\n        for (let i of Active) {\n            if ((pos.x === i.x) && (pos.y === i.y))\n                return true;\n        }\n        return false;\n    }\n    setMap(point, data) {\n        const x = point.x;\n        const y = point.y;\n        console.assert(data !== undefined);\n        console.assert((x < this.config.width) && (y < this.config.height) && (x >= 0) && (y >= 0));\n        this.map[x * this.config.height + y] = data;\n    }\n    getMap(point) {\n        const x = point.x;\n        const y = point.y;\n        console.assert((x < this.config.width) && (y < this.config.height) && (x >= 0) && (y >= 0));\n        return this.map[x * this.config.height + y];\n    }\n    isMapOpen(point) {\n        switch (this.getMap(point)) {\n            case TunnelerCellType.OPEN:\n            case TunnelerCellType.GUARANTEED_OPEN:\n            case TunnelerCellType.NON_JOIN_OPEN:\n            case TunnelerCellType.NON_JOIN_GUARANTEED_OPEN:\n            case TunnelerCellType.INSIDE_ROOM_OPEN:\n            case TunnelerCellType.INSIDE_TUNNEL_OPEN:\n            case TunnelerCellType.INSIDE_ANTEROOM_OPEN:\n            case TunnelerCellType.H_DOOR:\n            case TunnelerCellType.V_DOOR:\n                return true;\n            default:\n                return false;\n        }\n    }\n    isMoreRoomsLabyrinth(size = null) {\n        if (size !== null) {\n            switch (size) {\n                case RoomSize.SMALL:\n                    return (this.config.numSmallRoomsInLabyrinth > this.currSmallRoomsLabyrinth);\n                case RoomSize.MEDIUM:\n                    return (this.config.numMediumRoomsInLabyrinth > this.currMediumRoomsLabyrinth);\n                case RoomSize.LARGE:\n                    return (this.config.numLargeRoomsInLabyrinth > this.currLargeRoomsLabyrinth);\n            }\n        }\n        else {\n            return (this.isMoreRoomsLabyrinth(RoomSize.SMALL) || this.isMoreRoomsLabyrinth(RoomSize.MEDIUM) || this.isMoreRoomsLabyrinth(RoomSize.LARGE));\n        }\n    }\n    isMoreRoomsDungeon(size) {\n        if (size !== null) {\n            switch (size) {\n                case RoomSize.SMALL:\n                    return (this.config.numSmallRoomsInDungeon > this.currSmallRoomsDungeon);\n                case RoomSize.MEDIUM:\n                    return (this.config.numMediumRoomsInDungeon > this.currMediumRoomsDungeon);\n                case RoomSize.LARGE:\n                    return (this.config.numLargeRoomsInDungeon > this.currLargeRoomsDungeon);\n            }\n        }\n        else {\n            return (this.isMoreRoomsDungeon(RoomSize.SMALL) || this.isMoreRoomsDungeon(RoomSize.MEDIUM) || this.isMoreRoomsDungeon(RoomSize.LARGE));\n        }\n    }\n    builtRoomDungeon(size) {\n        if (RoomSize.SMALL === size)\n            this.currSmallRoomsDungeon++;\n        else if (RoomSize.MEDIUM === size)\n            this.currMediumRoomsDungeon++;\n        else if (RoomSize.LARGE === size)\n            this.currLargeRoomsDungeon++;\n    }\n    getStepLength(generation) {\n        if (generation >= this.config.stepLengths.length)\n            return this.config.stepLengths[this.config.stepLengths.length - 1];\n        else\n            return this.config.stepLengths[generation];\n    }\n    getCorridorWidth(generation) {\n        if (generation >= this.config.corridorWidths.length)\n            return this.config.corridorWidths[this.config.corridorWidths.length - 1];\n        else\n            return this.config.corridorWidths[generation];\n    }\n    getMaxAgeCrawlers(generation) {\n        if (generation >= this.config.maxAgesCrawlers.length)\n            return this.config.maxAgesCrawlers[this.config.maxAgesCrawlers.length - 1];\n        else\n            return this.config.maxAgesCrawlers[generation];\n    }\n    addRoom(r) {\n        this.rooms.push(r);\n    }\n    isChecked(pos) {\n        console.assert((pos.x < this.config.width) && (pos.y < this.config.height) && (pos.x >= 0) && (pos.y >= 0));\n        return this.mapFlagsDirections[pos.x * this.config.height + pos.y];\n    }\n    static isCheckedList(pos, checked) {\n        for (let i = 0; i < checked.length; i++) {\n            if ((pos.x === checked[i].x) && (pos.y === checked[i].y))\n                return true;\n        }\n        return false;\n    }\n    setChecked(pos) {\n        console.assert((pos.x < this.config.width) && (pos.y < this.config.height) && (pos.x >= 0) && (pos.y >= 0));\n        this.mapFlagsDirections[pos.x * this.config.height + pos.y] = true;\n    }\n    setRectFill(rect) {\n        this.setRect(rect.startX, rect.startY, rect.endX, rect.endY, rect.type);\n    }\n    setRect(startX, startY, endX, endY, data) {\n        if ((endX < startX) || (endY < startY)) {\n            console.error(`Refuse to set incorrectly specified rectangle; sX = ${startX} sY=${startY} eX=${endX} endY=${endY}`);\n            return;\n        }\n        else {\n            for (let x = startX; x <= endX; x++)\n                for (let y = startY; y <= endY; y++)\n                    this.setMap({ x: x, y: y }, data);\n        }\n    }\n    createWallCrawler(location, direction, age, maxAge, generation, intendedDirection, stepLength, opening, corridorWidth, straightSingleSpawnProbability, straightDoubleSpawnProbability, turnSingleSpawnProbability, turnDoubleSpawnProbability, changeDirectionProbability) {\n        let crawler = new wall_crawler_WallCrawler(this.rng, this, Point.from(location), Point.from(direction), age, maxAge, generation, Point.from(intendedDirection), stepLength, opening, corridorWidth, straightSingleSpawnProbability, straightDoubleSpawnProbability, turnSingleSpawnProbability, turnDoubleSpawnProbability, changeDirectionProbability);\n        for (let i = 0; i < this.crawlers.length; i++) {\n            if (this.crawlers[i] === null) {\n                this.crawlers[i] = crawler;\n                return;\n            }\n        }\n        this.crawlers.push(crawler);\n    }\n    createTunnelCrawler(location, direction, age, maxAge, generation, intendedDirection, stepLength, tunnelWidth, straightDoubleSpawnProbability, turnDoubleSpawnProbability, changeDirectionProbability, makeRoomsRightProbability, makeRoomsLeftProbability, joinPreference) {\n        let crawler = new tunnel_crawler_TunnelCrawler(this.rng, this, Point.from(location), Point.from(direction), age, maxAge, generation, Point.from(intendedDirection), stepLength, tunnelWidth, straightDoubleSpawnProbability, turnDoubleSpawnProbability, changeDirectionProbability, makeRoomsRightProbability, makeRoomsLeftProbability, joinPreference);\n        for (let i = 0; i < this.crawlers.length; i++) {\n            if (this.crawlers[i] === null) {\n                this.crawlers[i] = crawler;\n                return;\n            }\n        }\n        this.crawlers.push(crawler);\n    }\n    createRoomCrawler(location, direction, age, maxAge, generation, defaultWidth, size) {\n        const crawler = new room_crawler_RoomCrawler(this.rng, this, Point.from(location), Point.from(direction), age, maxAge, generation, defaultWidth, size);\n        for (let i = 0; i < this.crawlers.length; i++) {\n            if (this.crawlers[i] === null) {\n                this.crawlers[i] = crawler;\n                return;\n            }\n        }\n        this.crawlers.push(crawler);\n    }\n    mutate(input) {\n        let output = input - this.config.mutator + (this.rng.int % (2 * this.config.mutator + 1));\n        if (output < 0)\n            return 0;\n        else\n            return output;\n    }\n    mutate2(input) {\n        if (input <= 50) {\n            if (input < 0)\n                return 0;\n            else\n                return (this.rng.int % (2 * input + 1));\n        }\n        else {\n            if (input > 100)\n                return 100;\n            else\n                return (2 * input - 100 + this.rng.int % (200 - 2 * input + 1));\n        }\n    }\n    createSeedCrawlersInTunnels() {\n        let numberFound = 0;\n        let tries = 0;\n        new wall_crawler_WallCrawler(this.rng, this, new Point(2, 2), Point.SOUTH, 0, 1, 0, Point.SOUTH, 1, 0, 1, 0, 0, 0, 0, 0);\n        while ((numberFound < this.config.seedCrawlersInTunnels) && (tries < this.config.width * this.config.height)) {\n            tries++;\n            let startX = 1 + this.rng.int % (this.config.width - 4);\n            let startY = 1 + this.rng.int % (this.config.height - 4);\n            let test = new Point(startX, startY);\n            if ((this.rng.int % 100) < 50)\n                startX = 0;\n            else\n                startY = 0;\n            if (startX === 0) {\n                if ((this.rng.int % 100) < 50)\n                    startY = -1;\n                else\n                    startY = 1;\n            }\n            else {\n                console.assert(startY === 0);\n                if ((this.rng.int % 100) < 50)\n                    startX = -1;\n                else\n                    startX = 1;\n            }\n            let direction = new Point(startX, startY);\n            let orthogonal;\n            if (direction.x === 0) {\n                orthogonal = new Point(direction.y, 0);\n            }\n            else if (direction.y === 0) {\n                orthogonal = new Point(0, -direction.x);\n            }\n            else {\n                throw \"illegal direction\";\n            }\n            let notFound = true;\n            while (notFound) {\n                test = test.plus(direction);\n                if ((test.x < 2) || (test.y < 2) || (test.x > this.config.width - 3) || (test.y > this.config.height - 3)) {\n                    break;\n                }\n                if (this.getMap(test) !== TunnelerCellType.INSIDE_TUNNEL_OPEN)\n                    continue;\n                if ((this.getMap(test.plus(direction)) !== TunnelerCellType.INSIDE_TUNNEL_OPEN) || (this.getMap(test.minus(direction)) !== TunnelerCellType.INSIDE_TUNNEL_OPEN) ||\n                    (this.getMap(test.plus(orthogonal)) !== TunnelerCellType.INSIDE_TUNNEL_OPEN) || (this.getMap(test.minus(orthogonal)) !== TunnelerCellType.INSIDE_TUNNEL_OPEN) ||\n                    (this.getMap(test.plus(direction).plus(orthogonal)) !== TunnelerCellType.INSIDE_TUNNEL_OPEN) || (this.getMap(test.minus(direction).plus(orthogonal)) !== TunnelerCellType.INSIDE_TUNNEL_OPEN) ||\n                    (this.getMap(test.plus(direction).minus(orthogonal)) !== TunnelerCellType.INSIDE_TUNNEL_OPEN) || (this.getMap(test.minus(direction).minus(orthogonal)) !== TunnelerCellType.INSIDE_TUNNEL_OPEN))\n                    continue;\n                this.setMap(test, TunnelerCellType.CLOSED);\n                this.createWallCrawler(test, direction, 0, this.config.tunnelCrawlerStats.maxAge, this.activeGeneration + 1, direction, this.config.tunnelCrawlerStats.stepLength, 1, 1, this.config.tunnelCrawlerStats.straightSingleSpawnProbability, this.config.tunnelCrawlerStats.straightDoubleSpawnProbability, this.config.tunnelCrawlerStats.turnSingleSpawnProbability, this.config.tunnelCrawlerStats.turnDoubleSpawnProbability, this.config.tunnelCrawlerStats.changeDirectionProbability);\n                this.createWallCrawler(test, orthogonal, 0, this.config.tunnelCrawlerStats.maxAge, this.activeGeneration + 1, direction, this.config.tunnelCrawlerStats.stepLength, 1, 1, this.config.tunnelCrawlerStats.straightSingleSpawnProbability, this.config.tunnelCrawlerStats.straightDoubleSpawnProbability, this.config.tunnelCrawlerStats.turnSingleSpawnProbability, this.config.tunnelCrawlerStats.turnDoubleSpawnProbability, this.config.tunnelCrawlerStats.changeDirectionProbability);\n                this.createWallCrawler(test, orthogonal.negative, 0, this.config.tunnelCrawlerStats.maxAge, this.activeGeneration + 1, direction, this.config.tunnelCrawlerStats.stepLength, 1, 1, this.config.tunnelCrawlerStats.straightSingleSpawnProbability, this.config.tunnelCrawlerStats.straightDoubleSpawnProbability, this.config.tunnelCrawlerStats.turnSingleSpawnProbability, this.config.tunnelCrawlerStats.turnDoubleSpawnProbability, this.config.tunnelCrawlerStats.changeDirectionProbability);\n                if ((this.rng.int % 100) < this.config.tunnelCrawlerClosedProbability)\n                    this.createWallCrawler(test, direction.negative, 0, this.config.tunnelCrawlerStats.maxAge, this.activeGeneration + 1, direction, this.config.tunnelCrawlerStats.stepLength, 0, 1, this.config.tunnelCrawlerStats.straightSingleSpawnProbability, this.config.tunnelCrawlerStats.straightDoubleSpawnProbability, this.config.tunnelCrawlerStats.turnSingleSpawnProbability, this.config.tunnelCrawlerStats.turnDoubleSpawnProbability, this.config.tunnelCrawlerStats.changeDirectionProbability);\n                else\n                    this.createWallCrawler(test, direction.negative, 0, this.config.tunnelCrawlerStats.maxAge, this.activeGeneration + 1, direction, this.config.tunnelCrawlerStats.stepLength, 1, 1, this.config.tunnelCrawlerStats.straightSingleSpawnProbability, this.config.tunnelCrawlerStats.straightDoubleSpawnProbability, this.config.tunnelCrawlerStats.turnSingleSpawnProbability, this.config.tunnelCrawlerStats.turnDoubleSpawnProbability, this.config.tunnelCrawlerStats.changeDirectionProbability);\n                notFound = false;\n                numberFound++;\n            }\n        }\n    }\n    makeIteration() {\n        for (let i = 0; i < this.crawlers.length; i++) {\n            if (null !== this.crawlers[i]) {\n                if (!this.crawlers[i].stepAhead()) {\n                    this.crawlers[i] = null;\n                }\n            }\n        }\n        return false;\n    }\n    advanceGeneration() {\n        let isCrawlerExists = false;\n        let highestNegativeAge = 0;\n        for (let i = 0; i < this.crawlers.length; i++) {\n            if (null !== this.crawlers[i]) {\n                isCrawlerExists = true;\n                if (this.crawlers[i].generation === this.activeGeneration) {\n                    let a = this.crawlers[i].age;\n                    if (a >= 0)\n                        return true;\n                    else if ((highestNegativeAge === 0) || (a > highestNegativeAge))\n                        highestNegativeAge = a;\n                }\n            }\n        }\n        if (highestNegativeAge === 0) {\n            this.activeGeneration++;\n            return isCrawlerExists;\n        }\n        else {\n            console.assert(highestNegativeAge < 0);\n            for (let i = 0; i < this.crawlers.length; i++) {\n                if (null !== this.crawlers[i]) {\n                    if (this.crawlers[i].generation === this.activeGeneration)\n                        this.crawlers[i].age -= highestNegativeAge;\n                }\n            }\n            return isCrawlerExists;\n        }\n    }\n    createRoom(rect) {\n        if ((this.config.width < 10) || (this.config.height < 10))\n            return false;\n        if ((rect.endX - rect.startX) <= 5)\n            return false;\n        if ((rect.endY - rect.startY) <= 5)\n            return false;\n        let startX = rect.startX + 1 + this.rng.int % (rect.endX - rect.startX - 3);\n        let startY = rect.startY + 1 + this.rng.int % (rect.endY - rect.startY - 3);\n        let start = new Point(startX, startY);\n        if (!this.isOpen(start))\n            return false;\n        if (this.isChecked(start))\n            return false;\n        let maxRS = this.config.maxRoomSize;\n        if (!this.isMoreRoomsLabyrinth(RoomSize.LARGE))\n            maxRS = this.config.largeRoomSize;\n        if (!this.isMoreRoomsLabyrinth(RoomSize.LARGE) && !this.isMoreRoomsLabyrinth(RoomSize.MEDIUM))\n            maxRS = this.config.mediumRoomSize;\n        if (!this.isMoreRoomsLabyrinth())\n            return false;\n        let stillFindingMultiples = true;\n        let RoomSquaresChecked = [];\n        let RoomSquaresActive = [];\n        let ActiveFoundThisTurn = [];\n        RoomSquaresActive.push(start);\n        let numberFound;\n        while (stillFindingMultiples) {\n            stillFindingMultiples = false;\n            for (let actIt = 0; actIt < RoomSquaresActive.length;) {\n                let Curr = RoomSquaresActive[actIt];\n                numberFound = 0;\n                if (this.isOpen(Curr.plus(Point.NORTH)) && !dungeon_crawler_DungeonCrawler.isCheckedList(Curr.plus(Point.NORTH), RoomSquaresChecked) &&\n                    !dungeon_crawler_DungeonCrawler.isActive(Curr.plus(Point.NORTH), RoomSquaresActive) && !dungeon_crawler_DungeonCrawler.isActive(Curr.plus(Point.NORTH), ActiveFoundThisTurn))\n                    numberFound++;\n                if (this.isOpen(Curr.plus(Point.SOUTH)) && !dungeon_crawler_DungeonCrawler.isCheckedList(Curr.plus(Point.SOUTH), RoomSquaresChecked) &&\n                    !dungeon_crawler_DungeonCrawler.isActive(Curr.plus(Point.SOUTH), RoomSquaresActive) && !dungeon_crawler_DungeonCrawler.isActive(Curr.plus(Point.SOUTH), ActiveFoundThisTurn))\n                    numberFound++;\n                if (this.isOpen(Curr.plus(Point.EAST)) && !dungeon_crawler_DungeonCrawler.isCheckedList(Curr.plus(Point.EAST), RoomSquaresChecked) &&\n                    !dungeon_crawler_DungeonCrawler.isActive(Curr.plus(Point.EAST), RoomSquaresActive) && !dungeon_crawler_DungeonCrawler.isActive(Curr.plus(Point.EAST), ActiveFoundThisTurn))\n                    numberFound++;\n                if (this.isOpen(Curr.plus(Point.WEST)) && !dungeon_crawler_DungeonCrawler.isCheckedList(Curr.plus(Point.WEST), RoomSquaresChecked) &&\n                    !dungeon_crawler_DungeonCrawler.isActive(Curr.plus(Point.WEST), RoomSquaresActive) && !dungeon_crawler_DungeonCrawler.isActive(Curr.plus(Point.WEST), ActiveFoundThisTurn))\n                    numberFound++;\n                if (this.isOpen(Curr.plus(Point.NORTH_EAST)) && !dungeon_crawler_DungeonCrawler.isCheckedList(Curr.plus(Point.NORTH_EAST), RoomSquaresChecked) &&\n                    !dungeon_crawler_DungeonCrawler.isActive(Curr.plus(Point.NORTH_EAST), RoomSquaresActive) && !dungeon_crawler_DungeonCrawler.isActive(Curr.plus(Point.NORTH_EAST), ActiveFoundThisTurn))\n                    numberFound++;\n                if (this.isOpen(Curr.plus(Point.NORTH_WEST)) && !dungeon_crawler_DungeonCrawler.isCheckedList(Curr.plus(Point.NORTH_WEST), RoomSquaresChecked) &&\n                    !dungeon_crawler_DungeonCrawler.isActive(Curr.plus(Point.NORTH_WEST), RoomSquaresActive) && !dungeon_crawler_DungeonCrawler.isActive(Curr.plus(Point.NORTH_WEST), ActiveFoundThisTurn))\n                    numberFound++;\n                if (this.isOpen(Curr.plus(Point.SOUTH_EAST)) && !dungeon_crawler_DungeonCrawler.isCheckedList(Curr.plus(Point.SOUTH_EAST), RoomSquaresChecked) &&\n                    !dungeon_crawler_DungeonCrawler.isActive(Curr.plus(Point.SOUTH_EAST), RoomSquaresActive) && !dungeon_crawler_DungeonCrawler.isActive(Curr.plus(Point.SOUTH_EAST), ActiveFoundThisTurn))\n                    numberFound++;\n                if (this.isOpen(Curr.plus(Point.SOUTH_WEST)) && !dungeon_crawler_DungeonCrawler.isCheckedList(Curr.plus(Point.SOUTH_WEST), RoomSquaresChecked) &&\n                    !dungeon_crawler_DungeonCrawler.isActive(Curr.plus(Point.SOUTH_WEST), RoomSquaresActive) && !dungeon_crawler_DungeonCrawler.isActive(Curr.plus(Point.SOUTH_WEST), ActiveFoundThisTurn))\n                    numberFound++;\n                if (numberFound > 2) {\n                    stillFindingMultiples = true;\n                    if (this.isOpen(Curr.plus(Point.NORTH)) && !dungeon_crawler_DungeonCrawler.isCheckedList(Curr.plus(Point.NORTH), RoomSquaresChecked) &&\n                        !dungeon_crawler_DungeonCrawler.isActive(Curr.plus(Point.NORTH), RoomSquaresActive) && !dungeon_crawler_DungeonCrawler.isActive(Curr.plus(Point.NORTH), ActiveFoundThisTurn))\n                        ActiveFoundThisTurn.push(Curr.plus(Point.NORTH));\n                    if (this.isOpen(Curr.plus(Point.SOUTH)) && !dungeon_crawler_DungeonCrawler.isCheckedList(Curr.plus(Point.SOUTH), RoomSquaresChecked) &&\n                        !dungeon_crawler_DungeonCrawler.isActive(Curr.plus(Point.SOUTH), RoomSquaresActive) && !dungeon_crawler_DungeonCrawler.isActive(Curr.plus(Point.SOUTH), ActiveFoundThisTurn))\n                        ActiveFoundThisTurn.push(Curr.plus(Point.SOUTH));\n                    if (this.isOpen(Curr.plus(Point.EAST)) && !dungeon_crawler_DungeonCrawler.isCheckedList(Curr.plus(Point.EAST), RoomSquaresChecked) &&\n                        !dungeon_crawler_DungeonCrawler.isActive(Curr.plus(Point.EAST), RoomSquaresActive) && !dungeon_crawler_DungeonCrawler.isActive(Curr.plus(Point.EAST), ActiveFoundThisTurn))\n                        ActiveFoundThisTurn.push(Curr.plus(Point.EAST));\n                    if (this.isOpen(Curr.plus(Point.WEST)) && !dungeon_crawler_DungeonCrawler.isCheckedList(Curr.plus(Point.WEST), RoomSquaresChecked) &&\n                        !dungeon_crawler_DungeonCrawler.isActive(Curr.plus(Point.WEST), RoomSquaresActive) && !dungeon_crawler_DungeonCrawler.isActive(Curr.plus(Point.WEST), ActiveFoundThisTurn))\n                        ActiveFoundThisTurn.push(Curr.plus(Point.WEST));\n                    if (this.isOpen(Curr.plus(Point.NORTH_EAST)) && !dungeon_crawler_DungeonCrawler.isCheckedList(Curr.plus(Point.NORTH_EAST), RoomSquaresChecked) &&\n                        !dungeon_crawler_DungeonCrawler.isActive(Curr.plus(Point.NORTH_EAST), RoomSquaresActive) && !dungeon_crawler_DungeonCrawler.isActive(Curr.plus(Point.NORTH_EAST), ActiveFoundThisTurn))\n                        ActiveFoundThisTurn.push(Curr.plus(Point.NORTH_EAST));\n                    if (this.isOpen(Curr.plus(Point.NORTH_WEST)) && !dungeon_crawler_DungeonCrawler.isCheckedList(Curr.plus(Point.NORTH_WEST), RoomSquaresChecked) &&\n                        !dungeon_crawler_DungeonCrawler.isActive(Curr.plus(Point.NORTH_WEST), RoomSquaresActive) && !dungeon_crawler_DungeonCrawler.isActive(Curr.plus(Point.NORTH_WEST), ActiveFoundThisTurn))\n                        ActiveFoundThisTurn.push(Curr.plus(Point.NORTH_WEST));\n                    if (this.isOpen(Curr.plus(Point.SOUTH_EAST)) && !dungeon_crawler_DungeonCrawler.isCheckedList(Curr.plus(Point.SOUTH_EAST), RoomSquaresChecked) &&\n                        !dungeon_crawler_DungeonCrawler.isActive(Curr.plus(Point.SOUTH_EAST), RoomSquaresActive) && !dungeon_crawler_DungeonCrawler.isActive(Curr.plus(Point.SOUTH_EAST), ActiveFoundThisTurn))\n                        ActiveFoundThisTurn.push(Curr.plus(Point.SOUTH_EAST));\n                    if (this.isOpen(Curr.plus(Point.SOUTH_WEST)) && !dungeon_crawler_DungeonCrawler.isCheckedList(Curr.plus(Point.SOUTH_WEST), RoomSquaresChecked) &&\n                        !dungeon_crawler_DungeonCrawler.isActive(Curr.plus(Point.SOUTH_WEST), RoomSquaresActive) && !dungeon_crawler_DungeonCrawler.isActive(Curr.plus(Point.SOUTH_WEST), ActiveFoundThisTurn))\n                        ActiveFoundThisTurn.push(Curr.plus(Point.SOUTH_WEST));\n                    if (!dungeon_crawler_DungeonCrawler.isCheckedList(Curr, RoomSquaresChecked)) {\n                        RoomSquaresChecked.push(Curr);\n                        this.setChecked(Curr);\n                    }\n                    RoomSquaresActive.splice(actIt, 1);\n                    actIt++;\n                }\n                else if (numberFound === 2) {\n                    let found = 0;\n                    if (this.isOpen(Curr.plus(Point.NORTH)) && !dungeon_crawler_DungeonCrawler.isCheckedList(Curr.plus(Point.NORTH), RoomSquaresChecked) &&\n                        !dungeon_crawler_DungeonCrawler.isActive(Curr.plus(Point.NORTH), RoomSquaresActive) && !dungeon_crawler_DungeonCrawler.isActive(Curr.plus(Point.NORTH), ActiveFoundThisTurn)) {\n                        ActiveFoundThisTurn.push(Curr.plus(Point.NORTH));\n                        found++;\n                    }\n                    if (this.isOpen(Curr.plus(Point.SOUTH)) && !dungeon_crawler_DungeonCrawler.isCheckedList(Curr.plus(Point.SOUTH), RoomSquaresChecked) &&\n                        !dungeon_crawler_DungeonCrawler.isActive(Curr.plus(Point.SOUTH), RoomSquaresActive) && !dungeon_crawler_DungeonCrawler.isActive(Curr.plus(Point.SOUTH), ActiveFoundThisTurn)) {\n                        ActiveFoundThisTurn.push(Curr.plus(Point.SOUTH));\n                        found++;\n                    }\n                    if (this.isOpen(Curr.plus(Point.EAST)) && !dungeon_crawler_DungeonCrawler.isCheckedList(Curr.plus(Point.EAST), RoomSquaresChecked) &&\n                        !dungeon_crawler_DungeonCrawler.isActive(Curr.plus(Point.EAST), RoomSquaresActive) && !dungeon_crawler_DungeonCrawler.isActive(Curr.plus(Point.EAST), ActiveFoundThisTurn)) {\n                        ActiveFoundThisTurn.push(Curr.plus(Point.EAST));\n                        found++;\n                    }\n                    if (this.isOpen(Curr.plus(Point.WEST)) && !dungeon_crawler_DungeonCrawler.isCheckedList(Curr.plus(Point.WEST), RoomSquaresChecked) &&\n                        !dungeon_crawler_DungeonCrawler.isActive(Curr.plus(Point.WEST), RoomSquaresActive) && !dungeon_crawler_DungeonCrawler.isActive(Curr.plus(Point.WEST), ActiveFoundThisTurn)) {\n                        ActiveFoundThisTurn.push(Curr.plus(Point.WEST));\n                        found++;\n                    }\n                    if (found === 1) {\n                        actIt++;\n                        continue;\n                    }\n                    if (this.isOpen(Curr.plus(Point.NORTH_EAST)) && !dungeon_crawler_DungeonCrawler.isCheckedList(Curr.plus(Point.NORTH_EAST), RoomSquaresChecked) &&\n                        !dungeon_crawler_DungeonCrawler.isActive(Curr.plus(Point.NORTH_EAST), RoomSquaresActive) && !dungeon_crawler_DungeonCrawler.isActive(Curr.plus(Point.NORTH_EAST), ActiveFoundThisTurn))\n                        ActiveFoundThisTurn.push(Curr.plus(Point.NORTH_EAST));\n                    if (this.isOpen(Curr.plus(Point.NORTH_WEST)) && !dungeon_crawler_DungeonCrawler.isCheckedList(Curr.plus(Point.NORTH_WEST), RoomSquaresChecked) &&\n                        !dungeon_crawler_DungeonCrawler.isActive(Curr.plus(Point.NORTH_WEST), RoomSquaresActive) && !dungeon_crawler_DungeonCrawler.isActive(Curr.plus(Point.NORTH_WEST), ActiveFoundThisTurn))\n                        ActiveFoundThisTurn.push(Curr.plus(Point.NORTH_WEST));\n                    if (this.isOpen(Curr.plus(Point.SOUTH_EAST)) && !dungeon_crawler_DungeonCrawler.isCheckedList(Curr.plus(Point.SOUTH_EAST), RoomSquaresChecked) &&\n                        !dungeon_crawler_DungeonCrawler.isActive(Curr.plus(Point.SOUTH_EAST), RoomSquaresActive) && !dungeon_crawler_DungeonCrawler.isActive(Curr.plus(Point.SOUTH_EAST), ActiveFoundThisTurn))\n                        ActiveFoundThisTurn.push(Curr.plus(Point.SOUTH_EAST));\n                    if (this.isOpen(Curr.plus(Point.SOUTH_WEST)) && !dungeon_crawler_DungeonCrawler.isCheckedList(Curr.plus(Point.SOUTH_WEST), RoomSquaresChecked) &&\n                        !dungeon_crawler_DungeonCrawler.isActive(Curr.plus(Point.SOUTH_WEST), RoomSquaresActive) && !dungeon_crawler_DungeonCrawler.isActive(Curr.plus(Point.SOUTH_WEST), ActiveFoundThisTurn))\n                        ActiveFoundThisTurn.push(Curr.plus(Point.SOUTH_WEST));\n                    if (!dungeon_crawler_DungeonCrawler.isCheckedList(Curr, RoomSquaresChecked)) {\n                        RoomSquaresChecked.push(Curr);\n                        this.setChecked(Curr);\n                    }\n                    RoomSquaresActive.splice(actIt, 1);\n                    actIt++;\n                }\n                else if (numberFound ==\n                    1) {\n                    actIt++;\n                }\n                else {\n                    console.assert(numberFound === 0);\n                    if (!dungeon_crawler_DungeonCrawler.isCheckedList(Curr, RoomSquaresChecked)) {\n                        RoomSquaresChecked.push(Curr);\n                        this.setChecked(Curr);\n                    }\n                    RoomSquaresActive.splice(actIt, 1);\n                    actIt++;\n                }\n                if (RoomSquaresChecked.length > maxRS)\n                    return false;\n            }\n            for (let Curr of ActiveFoundThisTurn) {\n                if ((this.getMap(Curr) === TunnelerCellType.GUARANTEED_OPEN) || (this.getMap(Curr) === TunnelerCellType.NON_JOIN_GUARANTEED_OPEN))\n                    return false;\n                if (!dungeon_crawler_DungeonCrawler.isCheckedList(Curr, RoomSquaresChecked) && !dungeon_crawler_DungeonCrawler.isActive(Curr, RoomSquaresActive))\n                    RoomSquaresActive.push(Curr);\n            }\n            ActiveFoundThisTurn.splice(0, ActiveFoundThisTurn.length);\n        }\n        let proceeding = true;\n        let squaresFindingMultiples = 0;\n        let curr = Point.ZERO;\n        while (proceeding) {\n            squaresFindingMultiples = 0;\n            proceeding = false;\n            for (let actIt = 0; actIt < RoomSquaresActive.length;) {\n                curr = RoomSquaresActive[actIt];\n                numberFound = 0;\n                if (this.isOpen(curr.plus(Point.NORTH)) && !dungeon_crawler_DungeonCrawler.isCheckedList(curr.plus(Point.NORTH), RoomSquaresChecked) &&\n                    !dungeon_crawler_DungeonCrawler.isActive(curr.plus(Point.NORTH), RoomSquaresActive) && !dungeon_crawler_DungeonCrawler.isActive(curr.plus(Point.NORTH), ActiveFoundThisTurn))\n                    numberFound++;\n                if (this.isOpen(curr.plus(Point.SOUTH)) && !dungeon_crawler_DungeonCrawler.isCheckedList(curr.plus(Point.SOUTH), RoomSquaresChecked) &&\n                    !dungeon_crawler_DungeonCrawler.isActive(curr.plus(Point.SOUTH), RoomSquaresActive) && !dungeon_crawler_DungeonCrawler.isActive(curr.plus(Point.SOUTH), ActiveFoundThisTurn))\n                    numberFound++;\n                if (this.isOpen(curr.plus(Point.EAST)) && !dungeon_crawler_DungeonCrawler.isCheckedList(curr.plus(Point.EAST), RoomSquaresChecked) &&\n                    !dungeon_crawler_DungeonCrawler.isActive(curr.plus(Point.EAST), RoomSquaresActive) && !dungeon_crawler_DungeonCrawler.isActive(curr.plus(Point.EAST), ActiveFoundThisTurn))\n                    numberFound++;\n                if (this.isOpen(curr.plus(Point.WEST)) && !dungeon_crawler_DungeonCrawler.isCheckedList(curr.plus(Point.WEST), RoomSquaresChecked) &&\n                    !dungeon_crawler_DungeonCrawler.isActive(curr.plus(Point.WEST), RoomSquaresActive) && !dungeon_crawler_DungeonCrawler.isActive(curr.plus(Point.WEST), ActiveFoundThisTurn))\n                    numberFound++;\n                if (this.isOpen(curr.plus(Point.NORTH_EAST)) && !dungeon_crawler_DungeonCrawler.isCheckedList(curr.plus(Point.NORTH_EAST), RoomSquaresChecked) &&\n                    !dungeon_crawler_DungeonCrawler.isActive(curr.plus(Point.NORTH_EAST), RoomSquaresActive) && !dungeon_crawler_DungeonCrawler.isActive(curr.plus(Point.NORTH_EAST), ActiveFoundThisTurn))\n                    numberFound++;\n                if (this.isOpen(curr.plus(Point.NORTH_WEST)) && !dungeon_crawler_DungeonCrawler.isCheckedList(curr.plus(Point.NORTH_WEST), RoomSquaresChecked) &&\n                    !dungeon_crawler_DungeonCrawler.isActive(curr.plus(Point.NORTH_WEST), RoomSquaresActive) && !dungeon_crawler_DungeonCrawler.isActive(curr.plus(Point.NORTH_WEST), ActiveFoundThisTurn))\n                    numberFound++;\n                if (this.isOpen(curr.plus(Point.SOUTH_EAST)) && !dungeon_crawler_DungeonCrawler.isCheckedList(curr.plus(Point.SOUTH_EAST), RoomSquaresChecked) &&\n                    !dungeon_crawler_DungeonCrawler.isActive(curr.plus(Point.SOUTH_EAST), RoomSquaresActive) && !dungeon_crawler_DungeonCrawler.isActive(curr.plus(Point.SOUTH_EAST), ActiveFoundThisTurn))\n                    numberFound++;\n                if (this.isOpen(curr.plus(Point.SOUTH_WEST)) && !dungeon_crawler_DungeonCrawler.isCheckedList(curr.plus(Point.SOUTH_WEST), RoomSquaresChecked) &&\n                    !dungeon_crawler_DungeonCrawler.isActive(curr.plus(Point.SOUTH_WEST), RoomSquaresActive) && !dungeon_crawler_DungeonCrawler.isActive(curr.plus(Point.SOUTH_WEST), ActiveFoundThisTurn))\n                    numberFound++;\n                if (numberFound > 1) {\n                    squaresFindingMultiples++;\n                    actIt++;\n                }\n                else if (numberFound === 1) {\n                    proceeding = true;\n                    if (this.isOpen(curr.plus(Point.NORTH)) && !dungeon_crawler_DungeonCrawler.isCheckedList(curr.plus(Point.NORTH), RoomSquaresChecked) &&\n                        !dungeon_crawler_DungeonCrawler.isActive(curr.plus(Point.NORTH), RoomSquaresActive) && !dungeon_crawler_DungeonCrawler.isActive(curr.plus(Point.NORTH), ActiveFoundThisTurn))\n                        ActiveFoundThisTurn.push(curr.plus(Point.NORTH));\n                    if (this.isOpen(curr.plus(Point.SOUTH)) && !dungeon_crawler_DungeonCrawler.isCheckedList(curr.plus(Point.SOUTH), RoomSquaresChecked) &&\n                        !dungeon_crawler_DungeonCrawler.isActive(curr.plus(Point.SOUTH), RoomSquaresActive) && !dungeon_crawler_DungeonCrawler.isActive(curr.plus(Point.SOUTH), ActiveFoundThisTurn))\n                        ActiveFoundThisTurn.push(curr.plus(Point.SOUTH));\n                    if (this.isOpen(curr.plus(Point.EAST)) && !dungeon_crawler_DungeonCrawler.isCheckedList(curr.plus(Point.EAST), RoomSquaresChecked) &&\n                        !dungeon_crawler_DungeonCrawler.isActive(curr.plus(Point.EAST), RoomSquaresActive) && !dungeon_crawler_DungeonCrawler.isActive(curr.plus(Point.EAST), ActiveFoundThisTurn))\n                        ActiveFoundThisTurn.push(curr.plus(Point.EAST));\n                    if (this.isOpen(curr.plus(Point.WEST)) && !dungeon_crawler_DungeonCrawler.isCheckedList(curr.plus(Point.WEST), RoomSquaresChecked) &&\n                        !dungeon_crawler_DungeonCrawler.isActive(curr.plus(Point.WEST), RoomSquaresActive) && !dungeon_crawler_DungeonCrawler.isActive(curr.plus(Point.WEST), ActiveFoundThisTurn))\n                        ActiveFoundThisTurn.push(curr.plus(Point.WEST));\n                    if (this.isOpen(curr.plus(Point.NORTH_EAST)) && !dungeon_crawler_DungeonCrawler.isCheckedList(curr.plus(Point.NORTH_EAST), RoomSquaresChecked) &&\n                        !dungeon_crawler_DungeonCrawler.isActive(curr.plus(Point.NORTH_EAST), RoomSquaresActive) && !dungeon_crawler_DungeonCrawler.isActive(curr.plus(Point.NORTH_EAST), ActiveFoundThisTurn))\n                        ActiveFoundThisTurn.push(curr.plus(Point.NORTH_EAST));\n                    if (this.isOpen(curr.plus(Point.NORTH_WEST)) && !dungeon_crawler_DungeonCrawler.isCheckedList(curr.plus(Point.NORTH_WEST), RoomSquaresChecked) &&\n                        !dungeon_crawler_DungeonCrawler.isActive(curr.plus(Point.NORTH_WEST), RoomSquaresActive) && !dungeon_crawler_DungeonCrawler.isActive(curr.plus(Point.NORTH_WEST), ActiveFoundThisTurn))\n                        ActiveFoundThisTurn.push(curr.plus(Point.NORTH_WEST));\n                    if (this.isOpen(curr.plus(Point.SOUTH_EAST)) && !dungeon_crawler_DungeonCrawler.isCheckedList(curr.plus(Point.SOUTH_EAST), RoomSquaresChecked) &&\n                        !dungeon_crawler_DungeonCrawler.isActive(curr.plus(Point.SOUTH_EAST), RoomSquaresActive) && !dungeon_crawler_DungeonCrawler.isActive(curr.plus(Point.SOUTH_EAST), ActiveFoundThisTurn))\n                        ActiveFoundThisTurn.push(curr.plus(Point.SOUTH_EAST));\n                    if (this.isOpen(curr.plus(Point.SOUTH_WEST)) && !dungeon_crawler_DungeonCrawler.isCheckedList(curr.plus(Point.SOUTH_WEST), RoomSquaresChecked) &&\n                        !dungeon_crawler_DungeonCrawler.isActive(curr.plus(Point.SOUTH_WEST), RoomSquaresActive) && !dungeon_crawler_DungeonCrawler.isActive(curr.plus(Point.SOUTH_WEST), ActiveFoundThisTurn))\n                        ActiveFoundThisTurn.push(curr.plus(Point.SOUTH_WEST));\n                    if (!dungeon_crawler_DungeonCrawler.isCheckedList(curr, RoomSquaresChecked)) {\n                        RoomSquaresChecked.push(curr);\n                        this.setChecked(curr);\n                    }\n                    RoomSquaresActive.splice(actIt, 1);\n                }\n                else {\n                    console.assert(numberFound === 0);\n                    if (!dungeon_crawler_DungeonCrawler.isCheckedList(curr, RoomSquaresChecked)) {\n                        RoomSquaresChecked.push(curr);\n                        this.setChecked(curr);\n                    }\n                    RoomSquaresActive.splice(actIt, 1);\n                }\n            }\n            for (curr of ActiveFoundThisTurn) {\n                if ((this.getMap(curr) === TunnelerCellType.GUARANTEED_OPEN) || (this.getMap(curr) === TunnelerCellType.NON_JOIN_GUARANTEED_OPEN))\n                    return false;\n                if (!dungeon_crawler_DungeonCrawler.isCheckedList(curr, RoomSquaresChecked) && !dungeon_crawler_DungeonCrawler.isActive(curr, RoomSquaresActive))\n                    RoomSquaresActive.push(curr);\n            }\n            ActiveFoundThisTurn.splice(0, ActiveFoundThisTurn.length);\n        }\n        if (squaresFindingMultiples > 1)\n            return false;\n        else if (squaresFindingMultiples === 0) {\n            console.assert(RoomSquaresChecked.length > 0);\n            console.log(\"FILLING CLOSED ROOM\");\n            for (let i = 0; i !== RoomSquaresChecked.length; i++) {\n                console.assert((this.getMap(RoomSquaresChecked[i]) === TunnelerCellType.OPEN) || (this.getMap(RoomSquaresChecked[i]) === TunnelerCellType.NON_JOIN_OPEN) ||\n                    (this.getMap(RoomSquaresChecked[i]) === TunnelerCellType.INSIDE_TUNNEL_OPEN) || (this.getMap(RoomSquaresChecked[i]) === TunnelerCellType.INSIDE_ANTEROOM_OPEN));\n                this.setMap(RoomSquaresChecked[i], TunnelerCellType.CLOSED);\n            }\n        }\n        else {\n            console.assert(squaresFindingMultiples === 1);\n            if (RoomSquaresChecked.length < this.config.minRoomSize)\n                return false;\n            let diffX = false;\n            let diffY = false;\n            for (let i = 0; i !== RoomSquaresChecked.length; i++) {\n                if (RoomSquaresChecked[i].x !== RoomSquaresChecked[0].x)\n                    diffX = true;\n                if (RoomSquaresChecked[i].y !== RoomSquaresChecked[0].y)\n                    diffY = true;\n            }\n            if (!diffX || !diffY)\n                return false;\n            if (this.getMap(curr.plus(Point.WEST)) === TunnelerCellType.V_DOOR || this.getMap(curr.plus(Point.EAST)) === TunnelerCellType.V_DOOR ||\n                this.getMap(curr.plus(Point.WEST)) === TunnelerCellType.H_DOOR || this.getMap(curr.plus(Point.EAST)) === TunnelerCellType.H_DOOR ||\n                this.getMap(curr.plus(Point.NORTH)) === TunnelerCellType.V_DOOR || this.getMap(curr.plus(Point.SOUTH)) === TunnelerCellType.V_DOOR ||\n                this.getMap(curr.plus(Point.NORTH)) === TunnelerCellType.H_DOOR || this.getMap(curr.plus(Point.SOUTH)) === TunnelerCellType.H_DOOR)\n                return false;\n            if (RoomSquaresChecked.length < this.config.mediumRoomSize)\n                if (!this.isMoreRoomsLabyrinth(RoomSize.SMALL))\n                    return false;\n                else\n                    this.currSmallRoomsLabyrinth++;\n            else if (RoomSquaresChecked.length < this.config.largeRoomSize)\n                if (!this.isMoreRoomsLabyrinth(RoomSize.MEDIUM))\n                    return false;\n                else\n                    this.currMediumRoomsLabyrinth++;\n            else if (RoomSquaresChecked.length < this.config.maxRoomSize)\n                if (!this.isMoreRoomsLabyrinth(RoomSize.LARGE))\n                    return false;\n                else\n                    this.currLargeRoomsLabyrinth++;\n            else\n                return false;\n            console.assert(RoomSquaresActive.length === 1);\n            curr = RoomSquaresActive[0];\n            if (this.isOpen(curr.plus(Point.NORTH))) {\n                console.assert(this.isOpen(curr.plus(Point.SOUTH)));\n                this.setMap(curr, TunnelerCellType.H_DOOR);\n            }\n            else if (this.isOpen(curr.plus(Point.WEST))) {\n                console.assert(this.isOpen(curr.plus(Point.EAST)));\n                this.setMap(curr, TunnelerCellType.V_DOOR);\n            }\n            let newRoom = new Room();\n            for (let i = 0; i !== RoomSquaresChecked.length; i++) {\n                console.assert((this.getMap(RoomSquaresChecked[i]) === TunnelerCellType.OPEN) || (this.getMap(RoomSquaresChecked[i]) === TunnelerCellType.NON_JOIN_OPEN) ||\n                    (this.getMap(RoomSquaresChecked[i]) === TunnelerCellType.INSIDE_TUNNEL_OPEN) || (this.getMap(RoomSquaresChecked[i]) === TunnelerCellType.INSIDE_ANTEROOM_OPEN));\n                this.setMap(RoomSquaresChecked[i], TunnelerCellType.INSIDE_ROOM_OPEN);\n                newRoom.inside.push(RoomSquaresChecked[i]);\n            }\n            newRoom.inDungeon = false;\n            this.rooms.push(newRoom);\n        }\n        return true;\n    }\n    generate() {\n        while (true) {\n            if (this.activeGeneration === this.config.tunnelCrawlerGeneration)\n                this.createSeedCrawlersInTunnels();\n            while (this.makeIteration()) {\n            }\n            if (!this.advanceGeneration())\n                break;\n        }\n        if ((this.config.tunnelCrawlerGeneration < 0) || (this.activeGeneration < this.config.tunnelCrawlerGeneration)) {\n            this.createSeedCrawlersInTunnels();\n            while (true) {\n                while (this.makeIteration()) {\n                }\n                if (!this.advanceGeneration())\n                    break;\n            }\n        }\n        let counter = 0;\n        let number = 0;\n        if (this.config.background === TunnelerCellType.OPEN) {\n            let rect = new FillRect(0, 0, this.config.width, this.config.height, this.config.background);\n            counter = 0;\n            number = this.config.width * this.config.height;\n            while (this.isMoreRoomsLabyrinth()) {\n                if (this.createRoom(rect)) {\n                }\n                else\n                    counter++;\n                if (counter > number)\n                    break;\n            }\n        }\n        for (let rect of this.config.design) {\n            if (rect.type !== TunnelerCellType.OPEN)\n                continue;\n            counter = 0;\n            number = (rect.endX - rect.startX) * (rect.endY - rect.startY);\n            while (this.isMoreRoomsLabyrinth()) {\n                if (this.createRoom(rect)) {\n                }\n                else\n                    counter++;\n                if (counter > number)\n                    break;\n            }\n        }\n    }\n}\n\n// CONCATENATED MODULE: ./src/wfc/even.simple.tiled.ts\nvar even_simple_tiled_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try {\n            step(generator.next(value));\n        }\n        catch (e) {\n            reject(e);\n        } }\n        function rejected(value) { try {\n            step(generator[\"throw\"](value));\n        }\n        catch (e) {\n            reject(e);\n        } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\n\n\n\n\nvar even_simple_tiled_Direction;\n(function (Direction) {\n    Direction[Direction[\"RIGHT\"] = 2] = \"RIGHT\";\n    Direction[Direction[\"DOWN\"] = 1] = \"DOWN\";\n})(even_simple_tiled_Direction || (even_simple_tiled_Direction = {}));\nvar CellType;\n(function (CellType) {\n    CellType[CellType[\"EMPTY\"] = 0] = \"EMPTY\";\n    CellType[CellType[\"FLOOR\"] = 1] = \"FLOOR\";\n    CellType[CellType[\"FLOOR_WALL_TOP\"] = 2] = \"FLOOR_WALL_TOP\";\n    CellType[CellType[\"WALL_MID\"] = 3] = \"WALL_MID\";\n    CellType[CellType[\"WALL_TOP\"] = 4] = \"WALL_TOP\";\n    CellType[CellType[\"WALL_SIDE\"] = 5] = \"WALL_SIDE\";\n})(CellType || (CellType = {}));\nclass even_simple_tiled_TilesetRulesBuilder {\n    constructor() {\n        this.tilesIndex = Indexer.identity();\n        this.cellsIndex = Indexer.array();\n        this.rightIndex = Indexer.array();\n        this.downIndex = Indexer.array();\n    }\n    addCell(floor, wall, type) {\n        const floorId = floor ? this.tilesIndex.index(floor) : -1;\n        const wallId = wall ? this.tilesIndex.index(wall) : -1;\n        return this.cellsIndex.index([floorId, wallId, type]);\n    }\n    addRuleRight(first, next) {\n        this.rightIndex.index([first, next]);\n    }\n    addRuleDown(first, next) {\n        this.downIndex.index([first, next]);\n    }\n    build() {\n        return {\n            size: 16,\n            tiles: this.tilesIndex.values,\n            cells: this.cellsIndex.values,\n            right: this.rightIndex.values,\n            down: this.downIndex.values,\n        };\n    }\n}\nclass even_simple_tiled_EvenSimpleTiledModel extends model_Model {\n    constructor(resources, tileset, rng, width, height, constraints) {\n        super(rng, width, height);\n        this.app = null;\n        this.resources = resources;\n        this.weights = [];\n        this.tileset = tileset;\n        this.constraints = constraints;\n        this.T = tileset.cells.length;\n        for (let i = 0; i < this.T; i++) {\n            this.weights[i] = 1;\n        }\n        const tmpPropagator = [];\n        for (let direction = 0; direction < 4; direction++) {\n            tmpPropagator[direction] = [];\n            for (let cell1 = 0; cell1 < this.T; cell1++) {\n                tmpPropagator[direction][cell1] = [];\n                for (let cell2 = 0; cell2 < this.T; cell2++) {\n                    tmpPropagator[direction][cell1][cell2] = false;\n                }\n            }\n        }\n        for (let [first, next] of tileset.right) {\n            const opposite = model_Model.opposite[even_simple_tiled_Direction.RIGHT];\n            tmpPropagator[even_simple_tiled_Direction.RIGHT][first][next] = true;\n            tmpPropagator[opposite][next][first] = true;\n        }\n        for (let [first, next] of tileset.down) {\n            const opposite = model_Model.opposite[even_simple_tiled_Direction.DOWN];\n            tmpPropagator[even_simple_tiled_Direction.DOWN][first][next] = true;\n            tmpPropagator[opposite][next][first] = true;\n        }\n        this.propagator = [];\n        for (let direction = 0; direction < 4; direction++) {\n            this.propagator[direction] = [];\n            for (let cell1 = 0; cell1 < this.T; cell1++) {\n                this.propagator[direction][cell1] = [];\n                for (let cell2 = 0; cell2 < this.T; cell2++) {\n                    if (tmpPropagator[direction][cell1][cell2]) {\n                        this.propagator[direction][cell1].push(cell2);\n                    }\n                }\n            }\n        }\n    }\n    onBoundary(x, y) {\n        return !this.periodic && (x < 0 || y < 0 || x >= this.FMX || y >= this.FMY);\n    }\n    clear() {\n        super.clear();\n        for (let constraint of this.constraints) {\n            constraint.onClear();\n            this.propagate();\n        }\n    }\n    backtrackConstraint(index, pattern) {\n        for (let constraint of this.constraints) {\n            constraint.onBacktrack(index, pattern);\n        }\n    }\n    banConstraint(index, pattern) {\n        for (let constraint of this.constraints) {\n            constraint.onBan(index, pattern);\n        }\n    }\n    initConstraint() {\n        for (let constraint of this.constraints) {\n            constraint.init(this);\n            if (this.status != Resolution.Undecided) {\n                if (this.debug)\n                    console.warn(\"failed init constraint\", this.status);\n                return;\n            }\n        }\n    }\n    stepConstraint() {\n        for (let constraint of this.constraints) {\n            constraint.check();\n            if (this.status != Resolution.Undecided) {\n                if (this.debug)\n                    console.warn(\"failed step constraint check\");\n                return;\n            }\n            this.propagate();\n            if (this.status != Resolution.Undecided) {\n                if (this.debug)\n                    console.warn(\"failed step constraint propagate\");\n                return;\n            }\n        }\n        this.deferredConstraintsStep = false;\n    }\n    testObserved(i) {\n        let x = i % this.FMX, y = Math.floor(i / this.FMX);\n        if (!this.onBoundary(x, y)) {\n            const patterns = this.wave[i].filter(v => v).length;\n            console.assert(patterns === 1, `wave ${i} pattern count ${patterns}`);\n        }\n    }\n    graphics(markup) {\n        const scale = 1;\n        const tilesize = this.tileset.size;\n        console.log(\"tilesize\", tilesize, this.tileset, this.tileset.size);\n        if (this.app == null) {\n            this.app = new external_PIXI_[\"Application\"]({\n                width: this.FMX * tilesize * scale,\n                height: this.FMY * tilesize * scale,\n                resolution: 1,\n                antialias: false,\n                autoStart: false,\n                sharedTicker: false,\n                sharedLoader: false\n            });\n            document.body.appendChild(this.app.view);\n        }\n        const app = this.app;\n        this.app.stage.removeChildren();\n        const container = new external_PIXI_[\"Container\"]();\n        container.scale.set(scale, scale);\n        app.stage.addChild(container);\n        if (this.observed != null) {\n            for (let x = 0; x < this.FMX; x++) {\n                for (let y = 0; y < this.FMY; y++) {\n                    let [floor, wall] = this.tileset.cells[this.observed[x + y * this.FMX]];\n                    if (floor >= 0) {\n                        const sprite = this.resources.sprite(this.tileset.tiles[floor]);\n                        sprite.position.set(x * tilesize, y * tilesize);\n                        sprite.zIndex = 1;\n                        container.addChild(sprite);\n                    }\n                    if (wall >= 0) {\n                        const sprite = this.resources.sprite(this.tileset.tiles[wall]);\n                        sprite.position.set(x * tilesize, y * tilesize);\n                        sprite.zIndex = 2;\n                        container.addChild(sprite);\n                    }\n                }\n            }\n        }\n        else {\n            for (let x = 0; x < this.FMX; x++) {\n                for (let y = 0; y < this.FMY; y++) {\n                    let a = this.wave[x + y * this.FMX];\n                    let weights_sum = 0;\n                    for (let t = 0; t < this.T; t++) {\n                        if (a[t]) {\n                            weights_sum += this.weights[t];\n                        }\n                    }\n                    const alpha = 1 / weights_sum;\n                    for (let t = 0; t < this.T; t++) {\n                        if (a[t]) {\n                            const [floor, wall] = this.tileset.cells[t];\n                            const tiles = (floor >= 0 ? 1 : 0) + (wall >= 0 ? 1 : 0);\n                            if (floor >= 0) {\n                                const sprite = this.resources.sprite(this.tileset.tiles[floor]);\n                                sprite.position.set(x * tilesize, y * tilesize);\n                                sprite.zIndex = 1;\n                                sprite.alpha = alpha * (1 / tiles) * this.weights[t];\n                                container.addChild(sprite);\n                            }\n                            if (wall >= 0) {\n                                const sprite = this.resources.sprite(this.tileset.tiles[wall]);\n                                sprite.position.set(x * tilesize, y * tilesize);\n                                sprite.zIndex = 2;\n                                sprite.alpha = alpha * (1 / tiles) * this.weights[t];\n                                container.addChild(sprite);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        const graphics = new external_PIXI_[\"Graphics\"]();\n        container.addChild(graphics);\n        graphics.lineStyle(1, 0xFF0000);\n        for (let i of markup) {\n            let x = i % this.FMX, y = Math.floor(i / this.FMX);\n            graphics.drawRect(x * tilesize, y * tilesize, tilesize, tilesize);\n        }\n        app.render();\n        const canvas = app.view;\n        console.log('%c ', `\n      font-size: 1px;\n      padding: ${canvas.height / 2}px ${canvas.width / 2}px;\n      background: no-repeat url(${canvas.toDataURL('image/png')});\n      background-size: ${canvas.width}px ${canvas.height}px;\n    `);\n    }\n}\nclass BorderConstraint {\n    constructor(isBorderCell) {\n        this.model = null;\n        this.isBorderCell = isBorderCell;\n    }\n    init(model) {\n        this.model = model;\n    }\n    onClear() {\n        console.log(\"on clear\");\n        const model = this.model;\n        const indices = model.FMX * model.FMY;\n        for (let i = 0; i < indices; i++) {\n            let x = i % model.FMX, y = Math.floor(i / model.FMX);\n            if (x === 0 || x === model.FMX - 1 || y === 0 || y === model.FMY - 1) {\n                for (let t = 0; t < model.T; t++) {\n                    if (model.wave[i][t] && !this.isBorderCell[t]) {\n                        model.ban(i, t);\n                    }\n                }\n            }\n        }\n    }\n    onBan(_index, _pattern) {\n    }\n    onBacktrack(_index, _pattern) {\n    }\n    check() {\n        return true;\n    }\n}\nclass even_simple_tiled_PathConstraint {\n    constructor(isPathCell) {\n        this.model = null;\n        this.graph = null;\n        this.couldBePath = [];\n        this.mustBePath = [];\n        this.refresh = [];\n        this.refreshQueue = [];\n        this.isPathCell = isPathCell;\n    }\n    init(model) {\n        this.model = model;\n        const indices = model.FMX * model.FMY;\n        this.couldBePath = model_buffer(indices, false);\n        this.mustBePath = model_buffer(indices, false);\n        this.refresh = model_buffer(indices, true);\n        this.refreshQueue = [];\n    }\n    onClear() {\n        let indices = this.model.FMX * this.model.FMY;\n        this.couldBePath = model_buffer(indices, false);\n        this.mustBePath = model_buffer(indices, false);\n        this.refresh = model_buffer(indices, true);\n        this.refreshQueue = [];\n        for (let i = 0; i < indices; i++) {\n            this.refreshQueue.push(i);\n        }\n        this.refreshAll();\n        this.graph = this.createGraph();\n    }\n    onBacktrack(index, _pattern) {\n        this.addRefresh(index);\n    }\n    onBan(index, _pattern) {\n        this.addRefresh(index);\n    }\n    addRefresh(index) {\n        if (!this.refresh[index]) {\n            const FMX = this.model.FMX;\n            const FMY = this.model.FMY;\n            let x = index % FMX, y = Math.floor(index / FMX);\n            this.refresh[index] = true;\n            this.refreshQueue.push(index);\n            for (let direction = 0; direction < 4; direction++) {\n                let dx = model_Model.DX[direction], dy = model_Model.DY[direction];\n                let sx = x + dx, sy = y + dy;\n                if (this.model.onBoundary(sx, sy)) {\n                    continue;\n                }\n                if (sx < 0)\n                    sx += FMX;\n                else if (sx >= FMX)\n                    sx -= FMX;\n                if (sy < 0)\n                    sy += FMY;\n                else if (sy >= FMY)\n                    sy -= FMY;\n                let s = sx + sy * FMX;\n                if (!this.refresh[s]) {\n                    this.refresh[s] = true;\n                    this.refreshQueue.push(s);\n                }\n            }\n        }\n    }\n    refreshAll() {\n        const model = this.model;\n        const T = model.T;\n        while (this.refreshQueue.length > 0) {\n            const i = this.refreshQueue.pop();\n            this.refresh[i] = false;\n            let pathCount = 0;\n            let totalCount = 0;\n            for (let t = 0; t < T; t++) {\n                if (model.wave[i][t]) {\n                    totalCount++;\n                    if (this.isPathCell[t]) {\n                        pathCount++;\n                    }\n                }\n            }\n            this.couldBePath[i] = pathCount > 0;\n            this.mustBePath[i] = pathCount > 0 && totalCount === pathCount;\n        }\n    }\n    check() {\n        while (true) {\n            this.refreshAll();\n            let isArticulation = this.getArticulationPoints();\n            if (isArticulation == null) {\n                if (this.model.debug)\n                    console.error(\"no articulation\");\n                this.model.status = Resolution.Contradiction;\n                return;\n            }\n            if (this.applyArticulationPoints(isArticulation)) {\n                if (this.model.debug) {\n                    console.log(\"articulation\");\n                    let markup = isArticulation\n                        .map((v, i) => [v, i])\n                        .filter(a => a[0])\n                        .map(a => a[1]);\n                    this.model.graphics(markup);\n                    console.log(\"continue articulation loop\");\n                }\n            }\n            else {\n                break;\n            }\n        }\n    }\n    applyArticulationPoints(isArticulation) {\n        const model = this.model;\n        const FMX = model.FMX;\n        const FMY = model.FMY;\n        let indices = FMX * FMY;\n        let changed = false;\n        for (let i = 0; i < indices; i++) {\n            if (isArticulation[i] && !this.mustBePath[i]) {\n                if (model.debug)\n                    console.log(\"articulation\", i);\n                let x = i % model.FMX, y = Math.floor(i / model.FMX);\n                if (model.debug)\n                    console.log(\"x, y, i\", x, y, i);\n                for (let t = 0; t < model.T; t++) {\n                    if (model.wave[i][t]) {\n                        if (this.isPathCell[t]) {\n                            if (model.debug)\n                                console.log(\"ban not path\", i, t);\n                            model.ban(i, t);\n                            changed = true;\n                        }\n                    }\n                }\n            }\n        }\n        return changed;\n    }\n    getArticulationPoints() {\n        const walkable = this.couldBePath;\n        const relevant = this.mustBePath;\n        const model = this.model;\n        const graph = this.graph;\n        const indices = walkable.length;\n        const low = model_buffer(indices, 0);\n        let num = 1;\n        const dfsNum = model_buffer(indices, 0);\n        const markup = [];\n        const isArticulation = model_buffer(indices, false);\n        function cutVertex(initialU) {\n            const stack = [];\n            stack.push(new CutVertexFrame(initialU));\n            let childRelevantSubtree = false;\n            let childCount = 0;\n            while (true) {\n                const frameIndex = stack.length - 1;\n                const frame = stack[frameIndex];\n                const u = frame.u;\n                let switchState = frame.state;\n                let loop;\n                do {\n                    loop = false;\n                    switch (switchState) {\n                        case 0: {\n                            let isRelevant = relevant != null && relevant[u];\n                            if (isRelevant) {\n                                isArticulation[u] = true;\n                            }\n                            frame.isRelevantSubtree = isRelevant;\n                            low[u] = dfsNum[u] = num++;\n                            markup.push(u);\n                            switchState = 1;\n                            loop = true;\n                            break;\n                        }\n                        case 1: {\n                            let neighbours = graph.neighbours[u];\n                            let neighbourIndex = frame.neighbourIndex;\n                            if (neighbourIndex >= neighbours.length) {\n                                switchState = 3;\n                                loop = true;\n                                break;\n                            }\n                            let v = neighbours[neighbourIndex];\n                            if (!walkable[v]) {\n                                frame.neighbourIndex = neighbourIndex + 1;\n                                switchState = 1;\n                                loop = true;\n                                break;\n                            }\n                            let unvisited = dfsNum[v] === 0;\n                            if (unvisited) {\n                                stack.push(new CutVertexFrame(v));\n                                frame.state = 2;\n                                switchState = 2;\n                                stack[frameIndex] = frame;\n                                break;\n                            }\n                            else {\n                                low[u] = Math.min(low[u], dfsNum[v]);\n                            }\n                            frame.neighbourIndex = neighbourIndex + 1;\n                            switchState = 1;\n                            loop = true;\n                            break;\n                        }\n                        case 2: {\n                            let neighbours = graph.neighbours[u];\n                            let neighbourIndex = frame.neighbourIndex;\n                            let v = neighbours[neighbourIndex];\n                            if (frameIndex == 0) {\n                                childCount++;\n                            }\n                            if (childRelevantSubtree) {\n                                frame.isRelevantSubtree = true;\n                            }\n                            if (low[v] >= dfsNum[u]) {\n                                if (relevant == null || childRelevantSubtree) {\n                                    isArticulation[u] = true;\n                                }\n                            }\n                            low[u] = Math.min(low[u], low[v]);\n                            frame.neighbourIndex = neighbourIndex + 1;\n                            switchState = 1;\n                            loop = true;\n                            break;\n                        }\n                        case 3: {\n                            if (frameIndex == 0) {\n                                return childCount;\n                            }\n                            else {\n                                childRelevantSubtree = frame.isRelevantSubtree;\n                                stack.splice(frameIndex, 1);\n                                break;\n                            }\n                        }\n                    }\n                } while (loop);\n            }\n        }\n        for (let i = 0; i < indices; i++) {\n            if (!walkable[i])\n                continue;\n            if (!relevant[i])\n                continue;\n            if (dfsNum[i] != 0)\n                continue;\n            cutVertex(i);\n            break;\n        }\n        for (let i = 0; i < indices; i++) {\n            if (relevant[i] && dfsNum[i] == 0) {\n                if (model.debug) {\n                    console.warn(\"walkable:\");\n                    let markupW = walkable\n                        .map((v, i) => [v, i])\n                        .filter(a => a[0])\n                        .map(a => a[1]);\n                    model.graphics(markupW);\n                    console.warn(\"visited\");\n                    model.graphics(markup);\n                    const w = model.FMX;\n                    let x = i % w, y = Math.floor(i / w);\n                    console.error(`not visited relevant point i=${i} x=${x} y=${y}`);\n                    console.warn('graph neighbours', graph.neighbours[i]);\n                    model.graphics([i]);\n                }\n                return null;\n            }\n        }\n        for (let i = 0; i < indices; i++) {\n            if (!walkable[i])\n                continue;\n            if (relevant[i])\n                continue;\n            if (dfsNum[i] != 0)\n                continue;\n            if (isArticulation[i])\n                continue;\n            let childCount = cutVertex(i);\n            isArticulation[i] = childCount > 1;\n        }\n        return isArticulation;\n    }\n    createGraph() {\n        const model = this.model;\n        let nodeCount = model.FMX * model.FMY;\n        let neighbours = [];\n        for (let i = 0; i < nodeCount; i++) {\n            neighbours[i] = [];\n            let x = i % model.FMX, y = Math.floor(i / model.FMX);\n            for (let direction = 0; direction < 4; direction++) {\n                let dx = model_Model.DX[direction], dy = model_Model.DY[direction];\n                let sx = x + dx, sy = y + dy;\n                if (!model.periodic && (sx >= model.FMX || sy >= model.FMY || sx < 0 || sy < 0)) {\n                    continue;\n                }\n                if (sx < 0)\n                    sx += model.FMX;\n                else if (sx >= model.FMX)\n                    sx -= model.FMX;\n                if (sy < 0)\n                    sy += model.FMY;\n                else if (sy >= model.FMY)\n                    sy -= model.FMY;\n                let s = sx + sy * model.FMX;\n                neighbours[i].push(s);\n            }\n        }\n        return {\n            nodeCount: nodeCount,\n            neighbours: neighbours,\n        };\n    }\n}\nclass CutVertexFrame {\n    constructor(u) {\n        this.state = 0;\n        this.neighbourIndex = 0;\n        this.isRelevantSubtree = false;\n        this.u = u;\n    }\n}\nclass even_simple_tiled_RoomConstraint {\n    constructor(isRoomCell, denyOther, tunneling) {\n        this.isRoomCell = [];\n        this.model = null;\n        this.isRoomCell = isRoomCell;\n        this.denyOther = denyOther;\n        this.tunnelingOptions = tunneling;\n    }\n    init(model) {\n        this.model = model;\n    }\n    onClear() {\n        const model = this.model;\n        const tunneling = new tunneling_TunnelingAlgorithm(model.rng, model.FMX, model.FMY, this.tunnelingOptions);\n        tunneling.generate();\n        const isRoom = model_buffer(model.FMX * model.FMY, false);\n        for (const room of tunneling.rooms) {\n            for (let y = room.y; y < room.y + room.h; y++) {\n                for (let x = room.x; x < room.x + room.w; x++) {\n                    isRoom[x + y * model.FMX] = true;\n                }\n            }\n        }\n        for (let i = 0; i < isRoom.length; i++) {\n            for (let t = 0; t < model.T; t++) {\n                if (isRoom[i]) {\n                    if (!this.isRoomCell[t]) {\n                        model.ban(i, t);\n                    }\n                }\n                else if (this.denyOther) {\n                    if (this.isRoomCell[t]) {\n                        model.ban(i, t);\n                    }\n                }\n            }\n        }\n    }\n    check() {\n    }\n    onBacktrack(_index, _pattern) {\n    }\n    onBan(_index, _pattern) {\n    }\n}\nclass even_simple_tiled_DungeonCrawlerConstraint {\n    constructor(config) {\n        this.model = null;\n        this.config = config;\n    }\n    init(model) {\n        this.model = model;\n    }\n    onClear() {\n        const model = this.model;\n        console.time(\"crawler\");\n        const crawler = new dungeon_crawler_DungeonCrawler(this.config, model.rng);\n        crawler.generate();\n        console.timeEnd(\"crawler\");\n        console.time(\"crawler constraint\");\n        const isOpen = model_buffer(model.FMX * model.FMY, false);\n        for (let y = 0; y < crawler.config.height; y++) {\n            for (let x = 0; x < crawler.config.width; x++) {\n                const i = x + y * model.FMX;\n                isOpen[i] = crawler.isMapOpen({ x: x, y: y });\n            }\n        }\n        function onlyFloorAround(i) {\n            let x = i % model.FMX, y = Math.floor(i / model.FMX);\n            for (let dy = 0; dy <= 1; dy++) {\n                for (let dx = -1; dx <= 1; dx++) {\n                    if (dx !== 0 || dy !== 0) {\n                        let sx = x + dx;\n                        let sy = y + dy;\n                        if (model.onBoundary(sx, sy))\n                            continue;\n                        if (!isOpen[sx + sy * model.FMX]) {\n                            return false;\n                        }\n                    }\n                }\n            }\n            return true;\n        }\n        function hasFloorAround(i, h = 2) {\n            let x = i % model.FMX, y = Math.floor(i / model.FMX);\n            for (let dy = -1; dy <= h; dy++) {\n                for (let dx = -1; dx <= 1; dx++) {\n                    if (dx !== 0 || dy !== 0) {\n                        let sx = x + dx;\n                        let sy = y + dy;\n                        if (model.onBoundary(sx, sy))\n                            continue;\n                        if (isOpen[sx + sy * model.FMX]) {\n                            return true;\n                        }\n                    }\n                }\n            }\n            return false;\n        }\n        function checkOpen(i, dx, dy) {\n            let x = i % model.FMX, y = Math.floor(i / model.FMX);\n            let sx = x + dx;\n            let sy = y + dy;\n            if (model.onBoundary(sx, sy))\n                return null;\n            return isOpen[sx + sy * model.FMX];\n        }\n        for (let i = 0; i < isOpen.length; i++) {\n            const possibleTypes = model_buffer(6, false);\n            const bottom = checkOpen(i, 0, 1);\n            if (isOpen[i]) {\n                possibleTypes[CellType.EMPTY] = false;\n                possibleTypes[CellType.FLOOR] = true;\n                if (!onlyFloorAround(i)) {\n                    possibleTypes[CellType.FLOOR_WALL_TOP] = true;\n                }\n            }\n            else {\n                if (hasFloorAround(i)) {\n                    const top = checkOpen(i, 0, -1);\n                    possibleTypes[CellType.EMPTY] = !(top === true || bottom === true);\n                    possibleTypes[CellType.WALL_MID] = top === true || bottom === true;\n                    possibleTypes[CellType.WALL_TOP] = true;\n                    possibleTypes[CellType.WALL_SIDE] = true;\n                }\n                else {\n                    possibleTypes[CellType.EMPTY] = true;\n                }\n            }\n            for (let t = 0; t < model.T; t++) {\n                const type = model.tileset.cells[t][2];\n                if (!possibleTypes[type]) {\n                    model.ban(i, t);\n                }\n            }\n        }\n        console.timeEnd(\"crawler constraint\");\n    }\n    check() {\n    }\n    onBacktrack(_index, _pattern) {\n    }\n    onBan(_index, _pattern) {\n    }\n}\nclass even_simple_tiled_EvenSimpleTiledModelTest {\n    static test(resources) {\n        return even_simple_tiled_awaiter(this, void 0, void 0, function* () {\n            const loader = new external_PIXI_[\"Loader\"]();\n            loader.add(\"village.rules.json\");\n            yield new Promise((resolve) => loader.load(() => resolve()));\n            const tileset = loader.resources[\"village.rules.json\"].data;\n            console.log(\"tileset\", tileset);\n            const filter = (regex) => {\n                const tiles = tileset.tiles.map(t => !!t.match(regex));\n                return tileset.cells.map(cell => {\n                    const [f, w] = cell;\n                    return f >= 0 && tiles[f] && w === -1;\n                });\n            };\n            const borderCells = filter(/^grass_\\d+\\.png$/);\n            const pathCells = filter(/^road_\\d+\\.png$/);\n            const roomCells = filter(/^wood_floor_\\d+\\.png$/);\n            console.log(\"borderCells\", borderCells);\n            console.log(\"pathCells\", pathCells);\n            console.log(\"roomCells\", roomCells);\n            const model = new even_simple_tiled_EvenSimpleTiledModel(resources, tileset, new RNG(), 50, 50, [\n                new BorderConstraint(borderCells),\n                new even_simple_tiled_RoomConstraint(roomCells, true, {\n                    room_max_w: 7,\n                    room_max_h: 5,\n                    max_corr_dist: 20,\n                    min_corr_dist_x: 5,\n                    min_corr_dist_y: 10,\n                }),\n                new even_simple_tiled_PathConstraint(pathCells),\n            ]);\n            console.time(\"model loop run\");\n            let state;\n            while (true) {\n                console.time(\"model run\");\n                state = yield model.run(10000);\n                console.timeEnd(\"model run\");\n                if (state !== Resolution.Decided) {\n                    console.error(\"failed run model\");\n                }\n                else {\n                    console.log(\"success run model\");\n                    break;\n                }\n            }\n            console.timeEnd(\"model loop run\");\n            console.log(\"model\", model);\n            model.graphics([]);\n        });\n    }\n}\n\n// CONCATENATED MODULE: ./src/wfc/dungeon.generator.ts\nvar dungeon_generator_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try {\n            step(generator.next(value));\n        }\n        catch (e) {\n            reject(e);\n        } }\n        function rejected(value) { try {\n            step(generator[\"throw\"](value));\n        }\n        catch (e) {\n            reject(e);\n        } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n\n\n\n\nclass dungeon_generator_HybridDungeonGenerator extends dungeon_generator_BaseDungeonGenerator {\n    constructor(controller) {\n        super(controller);\n        this.model = null;\n    }\n    get percent() {\n        var _a;\n        return ((_a = this.model) === null || _a === void 0 ? void 0 : _a.percent) || 0;\n    }\n    generate(options) {\n        return dungeon_generator_awaiter(this, void 0, void 0, function* () {\n            const tileset = this.controller.app.loader.resources['dungeon.rules.4.json'].data;\n            const config = this.controller.app.loader.resources['dungeon.design.json'].data;\n            const hero = options.hero;\n            let seed;\n            if (hero.dungeonSeeds.has(options.level)) {\n                seed = hero.dungeonSeeds.get(options.level);\n                console.log(`dungeon level ${options.level} exists seed: ${seed}`);\n            }\n            else {\n                seed = this.controller.rng.nextInt();\n                console.log(`dungeon level ${options.level} new seed: ${seed}`);\n                hero.dungeonSeeds.set(options.level, seed);\n            }\n            const rng = new RNG(seed);\n            yield yields(10);\n            const crawler = new even_simple_tiled_DungeonCrawlerConstraint(config);\n            this.model = new even_simple_tiled_EvenSimpleTiledModel(this.resources, tileset, rng, config.width, config.height, [crawler]);\n            console.time(\"model loop run\");\n            let state;\n            while (true) {\n                console.time(\"model run\");\n                state = yield this.model.run(10000);\n                console.timeEnd(\"model run\");\n                if (state !== Resolution.Decided) {\n                    console.error(\"failed run model\");\n                }\n                else {\n                    console.log(\"success run model\");\n                    break;\n                }\n                yield yields();\n            }\n            console.timeEnd(\"model loop run\");\n            const dungeon = this.createDungeon(rng, seed, options.level, this.model.FMX, this.model.FMY);\n            const observed = this.model.observed;\n            for (let y = 0; y < this.model.FMY; y++) {\n                for (let x = 0; x < this.model.FMX; x++) {\n                    const i = x + y * this.model.FMX;\n                    const [floor, wall] = tileset.cells[observed[i]];\n                    if (floor >= 0) {\n                        dungeon.cell(x, y).floorName = tileset.tiles[floor];\n                    }\n                    if (wall >= 0) {\n                        dungeon.cell(x, y).wallName = tileset.tiles[wall];\n                    }\n                }\n            }\n            yield yields();\n            this.replaceFloorRandomly(rng, dungeon);\n            yield yields();\n            this.replaceWallRandomly(rng, dungeon);\n            const heroAI = this.placeHero(rng, dungeon, options.hero);\n            yield yields();\n            this.placeLadder(rng, dungeon, heroAI);\n            yield yields();\n            const is_bonfire = options.level % 5 === 1;\n            if (is_bonfire) {\n                this.placeBonfire(rng, dungeon, heroAI);\n                yield yields();\n            }\n            this.placeNpc(rng, dungeon, heroAI);\n            yield yields();\n            this.placeMonsters(rng, dungeon, heroAI);\n            yield yields();\n            const is_boss = options.level % 5 === 0;\n            if (is_boss) {\n                this.placeBoss(rng, dungeon, heroAI);\n                yield yields();\n            }\n            this.placeDrop(rng, dungeon);\n            yield yields();\n            dungeon.light.loadMap();\n            yield yields();\n            return dungeon;\n        });\n    }\n}\n\n// CONCATENATED MODULE: ./src/generate.scene.ts\n\n\n\nclass generate_scene_GenerateDungeonScene {\n    constructor(controller, options) {\n        this.title = null;\n        this.controller = controller;\n        this.generator = new dungeon_generator_HybridDungeonGenerator(this.controller);\n        this.promise = this.generator.generate(options);\n        this.promise.then((dungeon) => this.controller.dungeon(options.hero, dungeon));\n        this.progressBar = new external_PIXI_[\"Graphics\"]();\n    }\n    init() {\n        this.renderTitle();\n        this.renderProgressBar();\n        this.controller.app.ticker.add(this.update, this);\n    }\n    destroy() {\n        var _a, _b;\n        this.controller.app.ticker.remove(this.update, this);\n        (_a = this.title) === null || _a === void 0 ? void 0 : _a.destroy();\n        (_b = this.progressBar) === null || _b === void 0 ? void 0 : _b.destroy();\n    }\n    pause() {\n    }\n    resume() {\n    }\n    renderTitle() {\n        this.title = new external_PIXI_[\"BitmapText\"](\"ROGUELIKE DUNGEON\", { font: { name: 'alagard', size: 64 } });\n        this.title.anchor = new external_PIXI_[\"Point\"](0.5, 0);\n        this.title.position.set(this.controller.app.screen.width >> 1, 64);\n        this.controller.stage.addChild(this.title);\n    }\n    renderProgressBar() {\n        this.progressBar = new external_PIXI_[\"Graphics\"]();\n        this.controller.stage.addChild(this.progressBar);\n    }\n    update() {\n        const c_w = this.controller.app.screen.width;\n        const c_h = this.controller.app.screen.height;\n        const margin = 40;\n        const h = 60;\n        const border = 4;\n        const w = c_w - margin - margin;\n        const w_p = Math.floor((w - border - border) * this.generator.percent / 100);\n        this.progressBar.clear();\n        this.progressBar.beginFill(ui[\"Colors\"].uiBackground, 0.3);\n        this.progressBar.drawRect(margin, c_h - margin - h - border - border, w, h);\n        this.progressBar.endFill();\n        this.progressBar.beginFill(ui[\"Colors\"].uiSelected, 0.3);\n        this.progressBar.drawRect(margin + border, c_h - margin - h - border, w_p, h - border - border);\n        this.progressBar.endFill();\n    }\n}\n\n// CONCATENATED MODULE: ./src/dungeon.scene.ts\n\n\n\nclass dungeon_scene_DungeonScene {\n    constructor(controller, hero, dungeon) {\n        this.controller = controller;\n        this.dungeon = dungeon;\n        this.titleView = new dungeon_map_DungeonTitle();\n        this.inventoryView = new inventory[\"BeltInventoryView\"](hero.inventory.belt);\n        this.healthView = new hero_HeroStateView(hero, { fixedHPSize: false });\n    }\n    init() {\n        const c_w = this.controller.app.screen.width;\n        const c_h = this.controller.app.screen.height;\n        this.titleView.position.set(c_w >> 1, 16);\n        this.titleView.zIndex = 10;\n        this.controller.stage.addChild(this.titleView);\n        const i_w = this.inventoryView.width;\n        this.inventoryView.position.set((c_w >> 1) - (i_w >> 1), c_h - (32 + 4 + 16));\n        this.inventoryView.zIndex = 11;\n        this.controller.stage.addChild(this.inventoryView);\n        this.healthView.position.set(16, 16);\n        this.healthView.zIndex = 12;\n        this.controller.stage.addChild(this.healthView);\n        this.titleView.level = this.dungeon.level;\n        this.dungeon.container.zIndex = 0;\n        this.controller.stage.addChild(this.dungeon.container);\n        this.dungeon.light.layer.zIndex = 1;\n        this.controller.stage.addChild(this.dungeon.light.layer);\n        this.dungeon.lighting.zIndex = 2;\n        this.dungeon.lighting.alpha = 0.8;\n        this.controller.stage.addChild(this.dungeon.lighting);\n        this.controller.stage.sortChildren();\n        this.dungeon.ticker.start();\n    }\n    destroy() {\n        this.titleView.destroy();\n        this.healthView.destroy();\n        this.inventoryView.destroy();\n        this.dungeon.destroy();\n        this.controller.stage.removeChildren();\n    }\n    pause() {\n        this.dungeon.ticker.stop();\n    }\n    resume() {\n        this.dungeon.ticker.start();\n    }\n}\n\n// CONCATENATED MODULE: ./src/keybind.scene.ts\n\nclass keybind_scene_KeyBindScene {\n    constructor(controller) {\n        this.controller = controller;\n    }\n    init() {\n        this.renderTitle();\n        this.renderHelp();\n        this.controller.app.ticker.add(this.handleInput, this);\n    }\n    destroy() {\n        this.controller.app.ticker.remove(this.handleInput, this);\n        this.controller.stage.removeChildren();\n    }\n    pause() {\n    }\n    resume() {\n    }\n    renderTitle() {\n        let title = new external_PIXI_[\"BitmapText\"](\"ROGUELIKE DUNGEON\", { font: { name: 'alagard', size: 64 } });\n        title.anchor = new external_PIXI_[\"Point\"](0.5, 0);\n        title.position.set(this.controller.app.screen.width >> 1, 64);\n        this.controller.stage.addChild(title);\n    }\n    renderHelp() {\n        const bindings = [\n            \"WASD - top, left, bottom, right\",\n            \"F - action\",\n            \"Q - drop weapon\",\n            \"I - inventory\",\n            \"1 ... 0 - belt\",\n            \"\",\n            \"PRESS F TO CONTINUE\",\n        ];\n        for (let i = 0; i < bindings.length; i++) {\n            const text = bindings[i];\n            if (text.length > 0) {\n                const line = new external_PIXI_[\"BitmapText\"](text, { font: { name: 'alagard', size: 32 } });\n                line.position.set(40, 200 + i * 30);\n                this.controller.stage.addChild(line);\n            }\n        }\n    }\n    handleInput() {\n        if (this.controller.joystick.hit.once()) {\n            this.controller.selectHero();\n        }\n    }\n}\n\n// CONCATENATED MODULE: ./src/select.hero.scene.ts\n\n\n\n\nconst select_hero_scene_margin = 40;\nconst title_h = 32;\nconst tile_w = 16;\nconst tile_h = 28;\nclass select_hero_scene_SelectHeroScene {\n    constructor(controller) {\n        this.heroes = [];\n        this.controller = controller;\n        this.selectable = new ui[\"SelectableGrid\"](controller.joystick);\n    }\n    init() {\n        this.renderTitle();\n        this.renderHeroes();\n        this.controller.app.ticker.add(this.selectable.handleInput, this.selectable);\n    }\n    destroy() {\n        this.controller.app.ticker.remove(this.selectable.handleInput, this.selectable);\n        this.heroes.forEach(h => h.destroy());\n        this.controller.stage.removeChildren();\n    }\n    pause() {\n    }\n    resume() {\n    }\n    renderTitle() {\n        let title = new external_PIXI_[\"BitmapText\"](\"ROGUELIKE DUNGEON\", { font: { name: 'alagard', size: 64 } });\n        title.anchor = new external_PIXI_[\"Point\"](0.5, 0);\n        title.position.set(this.controller.app.screen.width >> 1, 64);\n        this.controller.stage.addChild(title);\n    }\n    renderHeroes() {\n        const c_w = this.controller.app.screen.width;\n        const c_h = this.controller.app.screen.height;\n        const total = heroCharacterNames.length;\n        const rect_w = Math.floor((c_w - select_hero_scene_margin * (total + 1)) / total);\n        const sprite_w = rect_w - (select_hero_scene_margin << 1);\n        const scale = sprite_w / tile_w;\n        const sprite_h = Math.floor(tile_h * scale);\n        const rect_h = sprite_h + title_h + select_hero_scene_margin * 3;\n        for (let i = 0; i < total; i++) {\n            const heroName = heroCharacterNames[i];\n            const d_x = select_hero_scene_margin * (i + 1) + rect_w * i;\n            const d_y = (c_h >> 1) - (rect_h >> 1);\n            const view = new select_hero_scene_SelectHeroView(rect_w, rect_h, heroName, this.controller.resources);\n            view.position.set(d_x, d_y);\n            this.heroes.push(view);\n            this.controller.stage.addChild(view);\n            this.selectable.set(i, 0, view, () => this.select(heroName));\n        }\n        this.selectable.reset();\n    }\n    select(name) {\n        const hero = hero_Hero.load(name, this.controller.persistent);\n        const weapon = new src_drop[\"Weapon\"](this.controller.resources, src_drop[\"weapons\"].knife);\n        hero.inventory.equipment.weapon.set(weapon);\n        this.controller.generateDungeon({\n            level: 1,\n            hero: hero\n        });\n    }\n}\nclass select_hero_scene_SelectHeroView extends external_PIXI_[\"Container\"] {\n    constructor(width, height, heroName, resources) {\n        super();\n        this.isSelected = false;\n        this.selectedBg = new external_PIXI_[\"Graphics\"]()\n            .beginFill(ui[\"Colors\"].uiSelected)\n            .drawRect(0, 0, width, height)\n            .endFill();\n        this.notSelectedBg = new external_PIXI_[\"Graphics\"]()\n            .beginFill(ui[\"Colors\"].uiNotSelected)\n            .drawRect(0, 0, width, height)\n            .endFill();\n        this.title = new external_PIXI_[\"BitmapText\"](heroName, { font: { name: 'alagard', size: title_h } });\n        this.title.anchor = 0.5;\n        this.title.position.set(width >> 1, select_hero_scene_margin);\n        const sprite_w = width - (select_hero_scene_margin << 1);\n        const scale = sprite_w / tile_w;\n        const sprite_h = Math.floor(tile_h * scale);\n        this.sprite = resources.animated(heroName + \"_idle\");\n        this.sprite.animationSpeed = 0.2;\n        this.sprite.width = sprite_w;\n        this.sprite.height = sprite_h;\n        this.sprite.position.set(select_hero_scene_margin, select_hero_scene_margin + select_hero_scene_margin + title_h);\n        this.addChild(this.selectedBg, this.notSelectedBg, this.title, this.sprite);\n        this.selected = false;\n    }\n    get selected() {\n        return this.isSelected;\n    }\n    set selected(selected) {\n        this.isSelected = selected;\n        if (selected) {\n            this.selectedBg.visible = true;\n            this.notSelectedBg.visible = false;\n            this.title.visible = true;\n            this.sprite.gotoAndPlay(0);\n        }\n        else {\n            this.selectedBg.visible = false;\n            this.notSelectedBg.visible = true;\n            this.title.visible = false;\n            this.sprite.gotoAndStop(0);\n        }\n    }\n    destroy() {\n        super.destroy();\n        this.selectedBg.destroy();\n        this.notSelectedBg.destroy();\n        this.title.destroy();\n        this.sprite.destroy();\n    }\n}\n\n// CONCATENATED MODULE: ./src/update.hero.scene.ts\n\n\n\n\nclass update_hero_scene_UpdateHeroScene {\n    constructor(controller, options) {\n        this.title = null;\n        this.sprite = null;\n        this.spriteBg = null;\n        this.state = null;\n        this.inventory = null;\n        this.buttons = [];\n        this.controller = controller;\n        this.hero = options.hero;\n        this.options = options;\n        this.selectable = new ui[\"SelectableGrid\"](controller.joystick);\n    }\n    init() {\n        const layout = new ui[\"Layout\"]();\n        this.renderTitle(layout);\n        this.renderState(layout);\n        this.renderIcon(layout);\n        this.renderContinue(layout);\n        layout.reset();\n        layout.offset(256 + ui[\"Sizes\"].uiMargin, 0);\n        layout.commit();\n        this.renderIncreaseHealth(layout);\n        layout.reset();\n        layout.offset(24 + ui[\"Sizes\"].uiMargin * 2, 0);\n        layout.commit();\n        this.renderInventory(layout);\n        this.selectable.reset();\n        this.controller.app.ticker.add(this.handleInput, this);\n    }\n    destroy() {\n        var _a, _b, _c, _d, _e;\n        this.controller.app.ticker.remove(this.handleInput, this);\n        (_a = this.title) === null || _a === void 0 ? void 0 : _a.destroy();\n        (_b = this.sprite) === null || _b === void 0 ? void 0 : _b.destroy();\n        (_c = this.spriteBg) === null || _c === void 0 ? void 0 : _c.destroy();\n        (_d = this.state) === null || _d === void 0 ? void 0 : _d.destroy();\n        (_e = this.inventory) === null || _e === void 0 ? void 0 : _e.destroy();\n        for (let button of this.buttons) {\n            button.destroy();\n        }\n        this.sprite = null;\n        this.spriteBg = null;\n        this.title = null;\n        this.state = null;\n        this.inventory = null;\n        this.buttons.splice(0, 1000);\n    }\n    pause() {\n    }\n    resume() {\n    }\n    renderTitle(layout) {\n        this.title = new external_PIXI_[\"BitmapText\"](\"ROGUELIKE DUNGEON\", { font: { name: 'alagard', size: 64 } });\n        this.title.anchor = new external_PIXI_[\"Point\"](0.5, 0);\n        this.title.position.set(this.controller.app.screen.width >> 1, 64);\n        this.controller.stage.addChild(this.title);\n        layout.offset(0, 128 + ui[\"Sizes\"].uiMargin);\n        layout.commit();\n    }\n    renderState(layout) {\n        layout.offset(ui[\"Sizes\"].uiMargin, 0);\n        layout.commit();\n        this.state = new hero_HeroStateView(this.hero, { fixedHPSize: true });\n        this.state.position.set(layout.x, layout.y);\n        this.controller.stage.addChild(this.state);\n        layout.offset(0, this.state.getBounds().height);\n    }\n    renderIcon(layout) {\n        this.sprite = this.controller.resources.animated(this.hero.name + \"_idle\");\n        this.sprite.play();\n        this.sprite.animationSpeed = 0.2;\n        const w = this.sprite.width;\n        const h = this.sprite.height;\n        this.sprite.width = 256 - (ui[\"Sizes\"].uiMargin << 1);\n        const scale = this.sprite.width / w;\n        this.sprite.height = Math.floor(scale * h);\n        const trimmed_h = Math.floor(scale * this.sprite.texture.trim.height);\n        const offset_y = this.sprite.height - trimmed_h;\n        layout.offset(0, ui[\"Sizes\"].uiMargin);\n        this.sprite.position.set(layout.x + ui[\"Sizes\"].uiMargin, layout.y + ui[\"Sizes\"].uiMargin - offset_y);\n        this.spriteBg = new external_PIXI_[\"Graphics\"]()\n            .beginFill(ui[\"Colors\"].uiBackground)\n            .drawRect(0, 0, 256, trimmed_h + (ui[\"Sizes\"].uiMargin << 1))\n            .endFill();\n        this.spriteBg.position.set(layout.x, layout.y);\n        this.controller.stage.addChild(this.spriteBg, this.sprite);\n        layout.offset(0, trimmed_h + (ui[\"Sizes\"].uiMargin << 1));\n    }\n    renderIncreaseHealth(layout) {\n        const button = new ui[\"Button\"]({\n            label: \"+\",\n            width: 24,\n            height: 24\n        });\n        button.position.set(layout.x, layout.y);\n        this.selectable.set(1, 0, button, () => this.hero.increaseHealth());\n        this.selectable.merge(1, 0, 1, 12);\n        this.buttons.push(button);\n        this.controller.stage.addChild(button);\n        layout.offset(0, 24);\n    }\n    renderContinue(layout) {\n        layout.offset(0, ui[\"Sizes\"].uiMargin);\n        const button = new ui[\"Button\"]({\n            label: \"Continue ...\",\n            width: 256,\n            height: 32,\n        });\n        button.position.set(layout.x, layout.y);\n        this.selectable.set(0, 0, button, () => this.controller.generateDungeon(this.options));\n        this.selectable.merge(0, 0, 1, 12);\n        this.buttons.push(button);\n        this.controller.stage.addChild(button);\n        layout.offset(0, 32);\n    }\n    renderInventory(layout) {\n        const controller = new inventory[\"DefaultInventoryActionsController\"](this.hero.inventory);\n        this.inventory = new inventory[\"InventoryView\"](this.hero.inventory, controller, this.selectable, 2);\n        this.inventory.position.set(layout.x, layout.y);\n        this.controller.stage.addChild(this.inventory);\n    }\n    handleInput() {\n        this.selectable.handleInput();\n    }\n}\n\n// EXTERNAL MODULE: ./src/inventory.modal.ts\nvar inventory_modal = __webpack_require__(\"./src/inventory.modal.ts\");\n\n// CONCATENATED MODULE: ./src/persistent.state.ts\nclass StoragePersistentStore {\n    constructor(storage, prefix) {\n        this.transaction = new Map();\n        this.storage = storage;\n        this.prefix = prefix;\n    }\n    clear() {\n        for (let key of Object.keys(this.storage)) {\n            if (key.startsWith(this.prefix)) {\n                this.storage.removeItem(key);\n            }\n        }\n        this.transaction.clear();\n    }\n    load(key) {\n        const value = this.storage.getItem(this.key(key));\n        if (value !== null) {\n            return JSON.parse(value);\n        }\n        else {\n            return null;\n        }\n    }\n    save(key, value) {\n        this.transaction.set(key, value);\n        this.storage.setItem(this.key(key), JSON.stringify(value));\n    }\n    commit() {\n        for (let [key, value] of this.transaction) {\n            this.storage.setItem(this.key(key), JSON.stringify(value));\n        }\n        this.transaction.clear();\n    }\n    key(key) {\n        return [this.prefix, key].join();\n    }\n}\nfunction isLocalhost() {\n    return location.hostname === \"localhost\" ||\n        location.hostname === \"0.0.0.0\" ||\n        location.hostname === \"127.0.0.1\";\n}\nclass SessionPersistentState {\n    constructor() {\n        const storage = isLocalhost() ? sessionStorage : localStorage;\n        this.global = new StoragePersistentStore(storage, \"global.\");\n        this.session = new StoragePersistentStore(storage, \"session.\");\n    }\n}\n\n// CONCATENATED MODULE: ./src/expression.ts\nvar TokenizerStates;\n(function (TokenizerStates) {\n    TokenizerStates[TokenizerStates[\"Started\"] = 1] = \"Started\";\n    TokenizerStates[TokenizerStates[\"ParsingNumber\"] = 2] = \"ParsingNumber\";\n    TokenizerStates[TokenizerStates[\"ParsingStringStarted\"] = 3] = \"ParsingStringStarted\";\n    TokenizerStates[TokenizerStates[\"ParsingString\"] = 4] = \"ParsingString\";\n    TokenizerStates[TokenizerStates[\"ParsingStringFinished\"] = 5] = \"ParsingStringFinished\";\n    TokenizerStates[TokenizerStates[\"ParsingFunction\"] = 6] = \"ParsingFunction\";\n    TokenizerStates[TokenizerStates[\"Finished\"] = 7] = \"Finished\";\n    TokenizerStates[TokenizerStates[\"ParsingContext\"] = 8] = \"ParsingContext\";\n    TokenizerStates[TokenizerStates[\"ParsingBracket\"] = 9] = \"ParsingBracket\";\n    TokenizerStates[TokenizerStates[\"Error\"] = 10] = \"Error\";\n})(TokenizerStates || (TokenizerStates = {}));\nvar KnownStringComponents;\n(function (KnownStringComponents) {\n    KnownStringComponents[KnownStringComponents[\"Delimiter\"] = 1] = \"Delimiter\";\n    KnownStringComponents[KnownStringComponents[\"Digit\"] = 2] = \"Digit\";\n    KnownStringComponents[KnownStringComponents[\"Bracket\"] = 3] = \"Bracket\";\n    KnownStringComponents[KnownStringComponents[\"Other\"] = 4] = \"Other\";\n    KnownStringComponents[KnownStringComponents[\"ContextBracket\"] = 5] = \"ContextBracket\";\n    KnownStringComponents[KnownStringComponents[\"Quote\"] = 6] = \"Quote\";\n})(KnownStringComponents || (KnownStringComponents = {}));\nconst tokenStateMachine = {\n    [TokenizerStates.Started]: {\n        [KnownStringComponents.Delimiter]: TokenizerStates.Started,\n        [KnownStringComponents.Digit]: TokenizerStates.ParsingNumber,\n        [KnownStringComponents.Bracket]: TokenizerStates.ParsingBracket,\n        [KnownStringComponents.Other]: TokenizerStates.ParsingFunction,\n        [KnownStringComponents.ContextBracket]: TokenizerStates.ParsingContext,\n        [KnownStringComponents.Quote]: TokenizerStates.ParsingStringStarted\n    },\n    [TokenizerStates.ParsingNumber]: {\n        [KnownStringComponents.Delimiter]: TokenizerStates.Finished,\n        [KnownStringComponents.Digit]: TokenizerStates.ParsingNumber,\n        [KnownStringComponents.Bracket]: TokenizerStates.Finished,\n        [KnownStringComponents.Other]: TokenizerStates.Finished,\n        [KnownStringComponents.ContextBracket]: TokenizerStates.Error,\n        [KnownStringComponents.Quote]: TokenizerStates.Error\n    },\n    [TokenizerStates.ParsingFunction]: {\n        [KnownStringComponents.Delimiter]: TokenizerStates.Finished,\n        [KnownStringComponents.Digit]: TokenizerStates.ParsingFunction,\n        [KnownStringComponents.Bracket]: TokenizerStates.Finished,\n        [KnownStringComponents.Other]: TokenizerStates.ParsingFunction,\n        [KnownStringComponents.ContextBracket]: TokenizerStates.Error,\n        [KnownStringComponents.Quote]: TokenizerStates.Error\n    },\n    [TokenizerStates.ParsingContext]: {\n        [KnownStringComponents.Delimiter]: TokenizerStates.Finished,\n        [KnownStringComponents.Digit]: TokenizerStates.ParsingContext,\n        [KnownStringComponents.Bracket]: TokenizerStates.Finished,\n        [KnownStringComponents.Other]: TokenizerStates.ParsingContext,\n        [KnownStringComponents.ContextBracket]: TokenizerStates.ParsingContext,\n        [KnownStringComponents.Quote]: TokenizerStates.Error\n    },\n    [TokenizerStates.ParsingBracket]: {\n        [KnownStringComponents.Delimiter]: TokenizerStates.Finished,\n        [KnownStringComponents.Digit]: TokenizerStates.Finished,\n        [KnownStringComponents.Bracket]: TokenizerStates.Finished,\n        [KnownStringComponents.Other]: TokenizerStates.Finished,\n        [KnownStringComponents.ContextBracket]: TokenizerStates.Finished,\n        [KnownStringComponents.Quote]: TokenizerStates.Finished\n    },\n    [TokenizerStates.ParsingStringStarted]: {\n        [KnownStringComponents.Delimiter]: TokenizerStates.ParsingString,\n        [KnownStringComponents.Digit]: TokenizerStates.ParsingString,\n        [KnownStringComponents.Bracket]: TokenizerStates.ParsingString,\n        [KnownStringComponents.Other]: TokenizerStates.ParsingString,\n        [KnownStringComponents.ContextBracket]: TokenizerStates.ParsingString,\n        [KnownStringComponents.Quote]: TokenizerStates.Finished\n    },\n    [TokenizerStates.ParsingString]: {\n        [KnownStringComponents.Delimiter]: TokenizerStates.ParsingString,\n        [KnownStringComponents.Digit]: TokenizerStates.ParsingString,\n        [KnownStringComponents.Bracket]: TokenizerStates.ParsingString,\n        [KnownStringComponents.Other]: TokenizerStates.ParsingString,\n        [KnownStringComponents.ContextBracket]: TokenizerStates.ParsingString,\n        [KnownStringComponents.Quote]: TokenizerStates.ParsingStringFinished\n    },\n    [TokenizerStates.ParsingStringFinished]: {\n        [KnownStringComponents.Delimiter]: TokenizerStates.Finished,\n        [KnownStringComponents.Digit]: TokenizerStates.Finished,\n        [KnownStringComponents.Bracket]: TokenizerStates.Finished,\n        [KnownStringComponents.Other]: TokenizerStates.Finished,\n        [KnownStringComponents.ContextBracket]: TokenizerStates.Finished,\n        [KnownStringComponents.Quote]: TokenizerStates.Finished\n    }\n};\nclass Expression {\n    constructor() {\n        this.operations = {\n            \"+\": {\n                priority: 0,\n                variable: false,\n                apply: (a, b) => a + b\n            },\n            \"-\": {\n                priority: 0,\n                variable: false,\n                apply: (a, b) => a - b\n            },\n            \"*\": {\n                priority: 1,\n                variable: false,\n                apply: (a, b) => a * b\n            },\n            \"/\": {\n                priority: 1,\n                variable: false,\n                apply: (a, b) => a / b\n            },\n            \"%\": {\n                priority: 1,\n                variable: false,\n                apply: (a, b) => a % b\n            },\n            or: {\n                priority: 0,\n                variable: false,\n                apply: (a, b) => a || b\n            },\n            and: {\n                priority: 1,\n                variable: false,\n                apply: (a, b) => a && b\n            },\n            \"!\": {\n                priority: 2,\n                variable: false,\n                apply: (a) => !a\n            },\n            true: {\n                priority: 100,\n                variable: false,\n                apply: () => true\n            },\n            false: {\n                priority: 100,\n                variable: false,\n                apply: () => false\n            },\n            $$getContextValue: {\n                priority: 100,\n                variable: false,\n                apply: (contextPropertyName, context) => {\n                    let propertyName = contextPropertyName.substring(1, contextPropertyName.length - 1);\n                    return context[propertyName];\n                }\n            }\n        };\n        this.context = {};\n    }\n    static classifySymbol(symbol) {\n        if (Expression.delimiters.indexOf(symbol) !== -1) {\n            return KnownStringComponents.Delimiter;\n        }\n        else if (Expression.brackets.indexOf(symbol) !== -1) {\n            return KnownStringComponents.Bracket;\n        }\n        else if (Expression.digits.indexOf(symbol) !== -1) {\n            return KnownStringComponents.Digit;\n        }\n        else if (Expression.contextBrackets.indexOf(symbol) !== -1) {\n            return KnownStringComponents.ContextBracket;\n        }\n        else if (Expression.quotes.indexOf(symbol) !== -1) {\n            return KnownStringComponents.Quote;\n        }\n        else {\n            return KnownStringComponents.Other;\n        }\n    }\n    isOfMoreOrEqualPriority(currentOp, otherOp) {\n        return (this.operations[currentOp].priority <= this.operations[otherOp].priority);\n    }\n    scanToken(str, start) {\n        let state = TokenizerStates.Started;\n        let workingState = TokenizerStates.Error;\n        let tokenString = \"\";\n        let i = start;\n        while (i < str.length &&\n            (state !== TokenizerStates.Finished && state !== TokenizerStates.Error)) {\n            let symbolClass = Expression.classifySymbol(str[i]);\n            state = tokenStateMachine[state][symbolClass];\n            if (state === TokenizerStates.ParsingFunction &&\n                this.operations[tokenString] !== undefined) {\n                state = TokenizerStates.Finished;\n            }\n            if (state === TokenizerStates.ParsingFunction ||\n                state === TokenizerStates.ParsingNumber ||\n                state === TokenizerStates.ParsingBracket ||\n                state === TokenizerStates.ParsingContext ||\n                state === TokenizerStates.ParsingString) {\n                workingState = state;\n                tokenString += str[i++];\n            }\n            else if (state === TokenizerStates.Started ||\n                state === TokenizerStates.ParsingStringStarted ||\n                state === TokenizerStates.ParsingStringFinished) {\n                i++;\n            }\n        }\n        if (tokenString === \"\") {\n            workingState = TokenizerStates.Error;\n        }\n        return {\n            workingState,\n            tokenString,\n            pos: i\n        };\n    }\n    convertToRPN(tokens) {\n        let stack = [];\n        let rpn = [];\n        let currToken;\n        let j = 0;\n        for (let i = 0; i < tokens.length; i++) {\n            if (tokens[i].type === \"n\") {\n                rpn[j++] = tokens[i];\n                continue;\n            }\n            if (tokens[i].type === \"(\") {\n                stack.push(tokens[i]);\n                continue;\n            }\n            if (tokens[i].type === \")\") {\n                do {\n                    currToken = stack.pop();\n                    rpn[j++] = currToken;\n                } while (rpn[j - 1].type !== \"(\");\n                j--;\n                continue;\n            }\n            if (Object.keys(this.operations).indexOf(tokens[i].type) !== -1) {\n                if (stack.length > 0) {\n                    do {\n                        currToken = stack.pop();\n                        rpn[j++] = currToken;\n                    } while (stack.length > 0 &&\n                        Expression.brackets.indexOf(rpn[j - 1].type) === -1 &&\n                        this.isOfMoreOrEqualPriority(tokens[i].type, rpn[j - 1].type));\n                    if (Expression.brackets.indexOf(rpn[j - 1].type) !== -1 ||\n                        !this.isOfMoreOrEqualPriority(tokens[i].type, rpn[j - 1].type)) {\n                        stack.push(currToken);\n                        j--;\n                    }\n                }\n                stack.push(tokens[i]);\n            }\n        }\n        while (stack.length > 0) {\n            currToken = stack.pop();\n            rpn[j++] = currToken;\n        }\n        return rpn;\n    }\n    calculateRPN(rpn) {\n        var _a;\n        let operands = [];\n        if (rpn.length === 0) {\n            return null;\n        }\n        for (let i = 0; i < rpn.length; i++) {\n            if (rpn[i].type === \"n\") {\n                operands.push(rpn[i]);\n            }\n            else {\n                let op = this.operations[rpn[i].type];\n                let func = op.apply;\n                let len = op.variable ? operands.length : func.length;\n                let args = operands.splice(operands.length - len).map(op => op.value);\n                let result = func.apply(null, args);\n                operands.push({ type: \"n\", value: result });\n            }\n        }\n        return ((_a = operands.shift()) === null || _a === void 0 ? void 0 : _a.value) || null;\n    }\n    tokenize(expression) {\n        const tokens = [];\n        for (let i = 0; i < expression.length;) {\n            let tokenCandidate = this.scanToken(expression, i);\n            if (tokenCandidate.workingState !== TokenizerStates.Error) {\n                if (tokenCandidate.workingState === TokenizerStates.ParsingNumber) {\n                    tokens.push({\n                        type: \"n\",\n                        value: tokenCandidate.tokenString.indexOf(\".\") !== -1\n                            ? parseFloat(tokenCandidate.tokenString)\n                            : parseInt(tokenCandidate.tokenString)\n                    });\n                }\n                else if (tokenCandidate.workingState === TokenizerStates.ParsingContext) {\n                    tokens.push({\n                        type: \"$$getContextValue\",\n                        value: null\n                    });\n                    tokens.push({\n                        type: \"n\",\n                        value: tokenCandidate.tokenString\n                    });\n                    tokens.push({\n                        type: \"n\",\n                        value: this.context\n                    });\n                }\n                else if (tokenCandidate.workingState === TokenizerStates.ParsingString) {\n                    tokens.push({\n                        type: \"n\",\n                        value: tokenCandidate.tokenString\n                    });\n                }\n                else {\n                    tokens.push({\n                        type: tokenCandidate.tokenString,\n                        value: null\n                    });\n                }\n            }\n            i = tokenCandidate.pos;\n        }\n        return tokens;\n    }\n    register(name, priority, variable, apply) {\n        this.operations[name] = { priority: priority, variable: variable, apply: apply };\n    }\n    evaluate(expression, context = {}) {\n        this.context = context;\n        const tokens = this.tokenize(expression);\n        const rpn = this.convertToRPN(tokens);\n        return this.calculateRPN(rpn);\n    }\n}\nExpression.digits = \"0123456789.\";\nExpression.brackets = \"()\";\nExpression.contextBrackets = \"{}\";\nExpression.delimiters = \" ,\\r\\r\\n\";\nExpression.quotes = \"\\'\\\"\";\n\n// CONCATENATED MODULE: ./src/template.ts\nclass Template {\n    constructor() {\n        this.context = {};\n    }\n    add(key, value) {\n        this.context[key] = value;\n    }\n    render(template) {\n        return template.replace(/{{([^}]+)}}/g, (_match, token) => {\n            let sub = token.split('.');\n            if (sub.length >= 1) {\n                let value = this.context;\n                while (sub.length > 0) {\n                    const [next] = sub.splice(0, 1);\n                    value = value[next];\n                }\n                return value || null;\n            }\n            return token;\n        });\n    }\n}\n\n// CONCATENATED MODULE: ./src/dialog.ts\n\n\n\n\n\nclass DialogManager {\n    constructor(controller) {\n        this.controller = controller;\n        this.config = controller.app.loader.resources['dialogs.json'].data;\n    }\n    dialog(hero, npc) {\n        const config = this.config[npc.name] || this.config[\"default\"];\n        return new dialog_Dialog(this.controller, hero, npc, config);\n    }\n}\nclass dialog_Dialog {\n    constructor(controller, hero, npc, config) {\n        this._question = new observable[\"EventPublisher\"]();\n        this.controller = controller;\n        this.hero = hero;\n        this.npc = npc;\n        this._config = config;\n        this._expression = new Expression();\n        this._expression.register(\"goto\", 100, true, this.goto.bind(this));\n        this._expression.register(\"exit\", 100, false, this.exit.bind(this));\n        this._expression.register(\"context\", 100, false, this.context.bind(this));\n        this._expression.register(\"hasSkill\", 100, false, this.hasSkill.bind(this));\n        this._expression.register(\"skill\", 100, false, this.skill.bind(this));\n        this._template = new Template();\n        this._template.add(\"hero\", this.hero);\n        this._template.add(\"npc\", this.npc);\n    }\n    get question() {\n        return this._question;\n    }\n    start() {\n        this.goto(...this._config.start);\n    }\n    hasSkill(id) {\n        return this.npc.hasSkill(id);\n    }\n    skill(id) {\n        var _a;\n        (_a = this.npc.getSkill(id)) === null || _a === void 0 ? void 0 : _a.use(this.hero);\n    }\n    exit() {\n        this.controller.closeModal();\n    }\n    context(key, value) {\n        if (value === undefined) {\n            return this.npc.getContext(key);\n        }\n        else {\n            this.npc.setContext(key, value);\n            return null;\n        }\n    }\n    goto(...ids) {\n        for (let id of ids) {\n            const config = this._config.questions[id];\n            if (this.check(config.conditions || [])) {\n                const text = this._template.render(config.text);\n                const question = new DialogQuestion(this, text);\n                for (let answer of config.answers) {\n                    if (this.check(answer.conditions)) {\n                        const text = this._template.render(answer.text);\n                        question.add(text, answer.commands);\n                    }\n                }\n                this._question.send(question);\n                return;\n            }\n        }\n    }\n    check(conditions) {\n        if (conditions) {\n            for (let rule of conditions) {\n                if (!this.evaluate(rule)) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    evaluate(command) {\n        return this._expression.evaluate(command);\n    }\n}\nclass DialogQuestion {\n    constructor(dialog, text) {\n        this.answers = [];\n        this.dialog = dialog;\n        this.text = text;\n    }\n    add(text, commands) {\n        this.answers.push(new DialogAnswer(this.dialog, text, commands));\n    }\n}\nclass DialogAnswer {\n    constructor(dialog, text, commands) {\n        this.dialog = dialog;\n        this.text = text;\n        this.commands = commands;\n    }\n    action() {\n        for (let command of this.commands) {\n            this.dialog.evaluate(command);\n        }\n    }\n}\nclass dialog_DialogModalScene {\n    constructor(controller, dialog) {\n        this.container = null;\n        this.background = null;\n        this.selectable = null;\n        this._width = 0;\n        this._layout = new ui[\"Layout\"]();\n        this._question = null;\n        this._answers = [];\n        this.controller = controller;\n        this.dialog = dialog;\n    }\n    init() {\n        this.background = new external_PIXI_[\"Graphics\"]();\n        this.selectable = new ui[\"SelectableGrid\"](this.controller.joystick);\n        const width = 600;\n        const height = 400;\n        this.background.beginFill(0x000000).drawRect(0, 0, width, height).endFill();\n        this.background.zIndex = 0;\n        this.container = new external_PIXI_[\"Container\"]();\n        this.container.addChild(this.background);\n        this.container.sortChildren();\n        this.container.position.set((this.controller.app.screen.width >> 1) - (width >> 1), (this.controller.app.screen.height >> 1) - (height >> 1));\n        const layout = this._layout;\n        layout.offset(ui[\"Sizes\"].uiMargin, ui[\"Sizes\"].uiMargin);\n        const icon = this.controller.resources.animated(this.dialog.npc.name + \"_idle\");\n        icon.animationSpeed = 0.2;\n        icon.play();\n        icon.width = icon.width * 4;\n        icon.height = icon.height * 4;\n        icon.position.set(layout.x + ui[\"Sizes\"].uiBorder, layout.y + ui[\"Sizes\"].uiBorder);\n        const iconBg = new external_PIXI_[\"Graphics\"]();\n        iconBg.beginFill(ui[\"Colors\"].uiBackground)\n            .drawRect(layout.x, layout.y, icon.width + ui[\"Sizes\"].uiBorder * 2, icon.height + ui[\"Sizes\"].uiBorder * 2)\n            .endFill();\n        layout.reset();\n        layout.offset(icon.width, 0);\n        layout.offset(ui[\"Sizes\"].uiMargin, 0);\n        layout.offset(ui[\"Sizes\"].uiBorder * 2, 0);\n        layout.commit();\n        this._width = width - layout.x;\n        this.container.addChild(iconBg, icon);\n        this.controller.stage.addChild(this.container);\n        this.controller.app.ticker.add(this.handleInput, this);\n        this.dialog.question.subscribe(this.onQuestion, this);\n        this.dialog.start();\n    }\n    destroy() {\n        var _a, _b;\n        this.dialog.question.unsubscribe(this.onQuestion, this);\n        this.controller.app.ticker.remove(this.handleInput, this);\n        (_a = this.container) === null || _a === void 0 ? void 0 : _a.destroy();\n        this.container = null;\n        (_b = this.background) === null || _b === void 0 ? void 0 : _b.destroy();\n        this.background = null;\n        this.selectable = null;\n    }\n    onQuestion(question) {\n        var _a;\n        (_a = this._question) === null || _a === void 0 ? void 0 : _a.destroy();\n        for (let i = 0; i < this._answers.length; i++) {\n            let answer = this._answers[i];\n            answer.destroy();\n            this.selectable.remove(0, i);\n        }\n        this.selectable.reset();\n        this._answers = [];\n        const width = this._width - ui[\"Sizes\"].uiMargin * 2;\n        const layout = this._layout;\n        layout.reset();\n        layout.offset(ui[\"Sizes\"].uiMargin, ui[\"Sizes\"].uiMargin);\n        this._question = new dialog_DialogQuestionView(question, width);\n        this._question.position.set(layout.x, layout.y);\n        this.container.addChild(this._question);\n        layout.offset(0, this._question.height);\n        layout.offset(0, ui[\"Sizes\"].uiMargin);\n        for (let i = 0; i < question.answers.length; i++) {\n            let answer = question.answers[i];\n            const view = new dialog_DialogAnswerView(answer, width);\n            this.selectable.set(0, i, view, answer.action.bind(answer));\n            view.position.set(layout.x, layout.y);\n            layout.offset(0, view.height);\n            layout.offset(0, ui[\"Sizes\"].uiMargin);\n            this._answers.push(view);\n            this.container.addChild(view);\n        }\n        this.selectable.reset();\n    }\n    handleInput() {\n        var _a;\n        (_a = this.selectable) === null || _a === void 0 ? void 0 : _a.handleInput();\n    }\n}\nclass dialog_DialogQuestionView extends external_PIXI_[\"Container\"] {\n    constructor(question, width) {\n        super();\n        this._text = new external_PIXI_[\"BitmapText\"](question.text, { font: { name: \"alagard\", size: 16 } });\n        this._text.maxWidth = width - ui[\"Sizes\"].uiBorder * 2;\n        this._text.calculateBounds();\n        this._text.position.set(ui[\"Sizes\"].uiBorder, ui[\"Sizes\"].uiBorder);\n        const height = this._text.height + ui[\"Sizes\"].uiBorder * 2;\n        this._background = new external_PIXI_[\"Graphics\"]();\n        this._background\n            .clear()\n            .beginFill(ui[\"Colors\"].uiBackground, 0.3)\n            .drawRect(0, 0, width, height)\n            .endFill();\n        this.addChild(this._background, this._text);\n    }\n}\nclass dialog_DialogAnswerView extends external_PIXI_[\"Container\"] {\n    constructor(answer, width) {\n        super();\n        this._selected = false;\n        this._background = new external_PIXI_[\"Graphics\"]();\n        this._text = new external_PIXI_[\"BitmapText\"](answer.text, { font: { name: \"alagard\", size: 16 } });\n        this._text.maxWidth = width - ui[\"Sizes\"].uiBorder * 2;\n        this._text.calculateBounds();\n        this._text.position.set(ui[\"Sizes\"].uiBorder, ui[\"Sizes\"].uiBorder);\n        this._width = width;\n        this._height = this._text.height + ui[\"Sizes\"].uiBorder * 2;\n        this.selected = false;\n        this.addChild(this._background, this._text);\n    }\n    get selected() {\n        return this._selected;\n    }\n    set selected(selected) {\n        this._selected = selected;\n        this._background\n            .clear()\n            .beginFill(selected ? ui[\"Colors\"].uiSelected : ui[\"Colors\"].uiNotSelected)\n            .drawRect(0, 0, this._width, this._height)\n            .endFill();\n    }\n}\n\n// CONCATENATED MODULE: ./src/scene.ts\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass scene_SceneController {\n    constructor(resources, app, stage) {\n        this.mainScene = null;\n        this.modalScene = null;\n        this.persistent = new SessionPersistentState();\n        this.rng = new RNG();\n        this.joystick = new Joystick();\n        this.resources = resources;\n        this.app = app;\n        this.stage = stage;\n        this.dialogs = new DialogManager(this);\n        this.app.ticker.add(this.persistent.global.commit, this.persistent.global, external_PIXI_[\"UPDATE_PRIORITY\"].LOW);\n        this.app.ticker.add(this.persistent.session.commit, this.persistent.session, external_PIXI_[\"UPDATE_PRIORITY\"].LOW);\n    }\n    set scene(scene) {\n        var _a;\n        (_a = this.mainScene) === null || _a === void 0 ? void 0 : _a.destroy();\n        this.joystick.reset();\n        this.mainScene = scene;\n        this.mainScene.init();\n    }\n    keyBind() {\n        this.scene = new keybind_scene_KeyBindScene(this);\n    }\n    selectHero() {\n        this.scene = new select_hero_scene_SelectHeroScene(this);\n    }\n    updateHero(hero, level) {\n        this.scene = new update_hero_scene_UpdateHeroScene(this, {\n            level: level,\n            hero: hero\n        });\n    }\n    dead() {\n        this.scene = new dead_scene_YouDeadScene(this);\n    }\n    generateDungeon(options) {\n        this.scene = new generate_scene_GenerateDungeonScene(this, options);\n    }\n    dungeon(hero, dungeon) {\n        this.scene = new dungeon_scene_DungeonScene(this, hero, dungeon);\n    }\n    modal(scene) {\n        var _a;\n        external_PIXI_[\"sound\"].play('text');\n        (_a = this.mainScene) === null || _a === void 0 ? void 0 : _a.pause();\n        this.joystick.reset();\n        this.modalScene = scene;\n        this.modalScene.init();\n    }\n    closeModal() {\n        var _a, _b;\n        (_a = this.modalScene) === null || _a === void 0 ? void 0 : _a.destroy();\n        this.joystick.reset();\n        (_b = this.mainScene) === null || _b === void 0 ? void 0 : _b.resume();\n    }\n    showInventory(hero, npc) {\n        this.modal(new inventory_modal[\"InventoryModalScene\"](this, hero, npc || null));\n    }\n    showDialog(hero, npc) {\n        const dialog = this.dialogs.dialog(hero, npc);\n        this.modal(new dialog_DialogModalScene(this, dialog));\n    }\n    showBonfire(hero) {\n        this.modal(new dungeon_bonfire_DungeonBonfireDialogModal(this, hero));\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/scene.ts\n");

/***/ }),

/***/ "./src/ui.ts":
/*!*******************!*\
  !*** ./src/ui.ts ***!
  \*******************/
/*! exports provided: Colors, Sizes, Button, Layout, SelectableGrid */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Colors\", function() { return Colors; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Sizes\", function() { return Sizes; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Button\", function() { return Button; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Layout\", function() { return Layout; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SelectableGrid\", function() { return SelectableGrid; });\n/* harmony import */ var pixi_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! pixi.js */ \"pixi.js\");\n/* harmony import */ var pixi_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(pixi_js__WEBPACK_IMPORTED_MODULE_0__);\n\nconst Colors = {\n    background: 0x202020,\n    uiBackground: 0x505050,\n    uiSelected: 0x909090,\n    uiNotSelected: 0x505050,\n    uiRed: 0xFF0000,\n    uiYellow: 0xFFD300,\n};\nconst Sizes = {\n    uiBorder: 4,\n    uiMargin: 16,\n};\nclass Button extends pixi_js__WEBPACK_IMPORTED_MODULE_0__[\"Container\"] {\n    constructor(options) {\n        super();\n        this._selected = false;\n        this._width = options.width || 200;\n        this._height = options.height || 24;\n        this._textSize = options.textSize || 16;\n        this._bg = new pixi_js__WEBPACK_IMPORTED_MODULE_0__[\"Graphics\"]();\n        this._text = new pixi_js__WEBPACK_IMPORTED_MODULE_0__[\"BitmapText\"](options.label, { font: { name: \"alagard\", size: this._textSize } });\n        this._text.anchor = new pixi_js__WEBPACK_IMPORTED_MODULE_0__[\"Point\"](0.5, 0.5);\n        this._text.position.set(this._width >> 1, this._height >> 1);\n        this.selected = options.selected || false;\n        super.addChild(this._bg, this._text);\n    }\n    get selected() {\n        return this._selected;\n    }\n    set selected(selected) {\n        this._selected = selected;\n        this._bg\n            .clear()\n            .beginFill(selected ? Colors.uiSelected : Colors.uiNotSelected)\n            .drawRect(0, 0, this._width, this._height)\n            .endFill();\n    }\n}\nclass Layout {\n    constructor() {\n        this.commitX = 0;\n        this.commitY = 0;\n        this.offsetX = 0;\n        this.offsetY = 0;\n    }\n    commit() {\n        this.commitX = this.offsetX;\n        this.commitY = this.offsetY;\n    }\n    reset() {\n        this.offsetX = this.commitX;\n        this.offsetY = this.commitY;\n    }\n    offset(x, y) {\n        this.offsetX += x;\n        this.offsetY += y;\n    }\n    get x() {\n        return this.offsetX;\n    }\n    get y() {\n        return this.offsetY;\n    }\n}\nfunction nextNonEmptyCount(counts, from) {\n    for (let i = from + 1; i < counts.length; i++) {\n        if (counts[i] > 0) {\n            return i;\n        }\n    }\n    return null;\n}\nfunction prevNonEmptyCount(counts, from) {\n    for (let i = from - 1; i >= 0; i--) {\n        if (counts[i] > 0) {\n            return i;\n        }\n    }\n    return null;\n}\nfunction nonEmptyCount(counts, curr) {\n    const i = curr || 0;\n    if (counts[i] > 0)\n        return i;\n    const p = prevNonEmptyCount(counts, i);\n    if (p !== null)\n        return p;\n    const n = nextNonEmptyCount(counts, i);\n    if (n !== null)\n        return n;\n    return null;\n}\nclass SelectableGrid {\n    constructor(joystick) {\n        this.cells = [];\n        this.counts_x = [];\n        this.counts_y = [];\n        this.limit_x = -1;\n        this.limit_y = -1;\n        this.selected_x = null;\n        this.selected_y = null;\n        this.joystick = joystick;\n    }\n    reset() {\n        this.unmark();\n        this.selected_x = nonEmptyCount(this.counts_x, this.selected_x);\n        this.selected_y = nonEmptyCount(this.counts_y, this.selected_y);\n        if (this.selected_x === null || this.selected_y === null) {\n            this.selected_x = null;\n            this.selected_y = null;\n        }\n        else {\n            if (!this.cell(this.selected_x, this.selected_y).isSelectable) {\n                const y = this.selected_y;\n                const prev = (from) => {\n                    for (let x = from - 1; x >= 0; x--) {\n                        if (this.cell(x, y).isSelectable) {\n                            return x;\n                        }\n                    }\n                    return null;\n                };\n                const p = prev(this.selected_x);\n                if (p !== null) {\n                    this.selected_x = p;\n                }\n                else {\n                    const next = (from) => {\n                        for (let x = from + 1; x <= this.limit_x; x++) {\n                            if (this.cell(x, y).isSelectable) {\n                                return x;\n                            }\n                        }\n                        return null;\n                    };\n                    const n = next(this.selected_x);\n                    if (n !== null) {\n                        this.selected_x = n;\n                    }\n                    else {\n                        throw \"illegal state\";\n                    }\n                }\n            }\n        }\n        this.mark();\n    }\n    moveLeft() {\n        var _a;\n        this.unmark();\n        if (this.selected_x !== null && this.selected_y !== null) {\n            const y = this.selected_y;\n            if (this.counts_y[y] === 0)\n                throw `illegal state: empty column ${y}`;\n            const merged = (_a = this.selectedCell) === null || _a === void 0 ? void 0 : _a.merged;\n            const start_x = this.selected_x;\n            const prev = (x) => x > 0 ? x - 1 : this.limit_x;\n            for (let x = prev(start_x); x != start_x; x = prev(x)) {\n                if (merged === null || merged === void 0 ? void 0 : merged.contains(x, y))\n                    continue;\n                if (this.cell(x, y).isSelectable) {\n                    this.selected_x = x;\n                    break;\n                }\n            }\n        }\n        this.mark();\n    }\n    moveRight() {\n        var _a;\n        this.unmark();\n        if (this.selected_x !== null && this.selected_y !== null) {\n            const y = this.selected_y;\n            if (this.counts_y[y] === 0)\n                throw `illegal state: empty column ${y}`;\n            const merged = (_a = this.selectedCell) === null || _a === void 0 ? void 0 : _a.merged;\n            const start_x = this.selected_x;\n            const next = (x) => (x + 1) % (this.limit_x + 1);\n            for (let x = next(start_x); x != start_x; x = next(x)) {\n                if (merged === null || merged === void 0 ? void 0 : merged.contains(x, y))\n                    continue;\n                if (this.cell(x, y).isSelectable) {\n                    this.selected_x = x;\n                    break;\n                }\n            }\n        }\n        this.mark();\n    }\n    moveUp() {\n        var _a;\n        this.unmark();\n        if (this.selected_x !== null && this.selected_y !== null) {\n            const x = this.selected_x;\n            if (this.counts_x[x] === 0)\n                throw `illegal state: empty row ${x}`;\n            const merged = (_a = this.selectedCell) === null || _a === void 0 ? void 0 : _a.merged;\n            const start_y = this.selected_y;\n            const prev = (y) => y > 0 ? y - 1 : this.limit_y;\n            for (let y = prev(start_y); y != start_y; y = prev(y)) {\n                if (merged === null || merged === void 0 ? void 0 : merged.contains(x, y))\n                    continue;\n                if (this.cell(x, y).isSelectable) {\n                    this.selected_y = y;\n                    break;\n                }\n            }\n        }\n        this.mark();\n    }\n    moveDown() {\n        var _a;\n        this.unmark();\n        if (this.selected_x !== null && this.selected_y !== null) {\n            const x = this.selected_x;\n            if (this.counts_x[x] === 0)\n                throw `illegal state: empty row ${x}`;\n            const merged = (_a = this.selectedCell) === null || _a === void 0 ? void 0 : _a.merged;\n            const start_y = this.selected_y;\n            const next = (y) => (y + 1) % (this.limit_y + 1);\n            for (let y = next(start_y); y != start_y; y = next(y)) {\n                if (merged === null || merged === void 0 ? void 0 : merged.contains(x, y))\n                    continue;\n                if (this.cell(x, y).isSelectable) {\n                    this.selected_y = y;\n                    break;\n                }\n            }\n        }\n        this.mark();\n    }\n    unmark() {\n        var _a;\n        (_a = this.selectedCell) === null || _a === void 0 ? void 0 : _a.unmark();\n    }\n    mark() {\n        var _a;\n        (_a = this.selectedCell) === null || _a === void 0 ? void 0 : _a.mark();\n    }\n    get selected() {\n        var _a;\n        return ((_a = this.selectedCell) === null || _a === void 0 ? void 0 : _a.value) || null;\n    }\n    get selectedCell() {\n        if (this.selected_x !== null && this.selected_y !== null) {\n            const cell = this.cell(this.selected_x, this.selected_y);\n            if (cell.merged && cell.isRef) {\n                return this.cell(cell.merged.from_x, cell.merged.from_y);\n            }\n            else {\n                return cell;\n            }\n        }\n        return null;\n    }\n    set(x, y, selectable, action) {\n        if (x < 0 || y < 0)\n            throw `illegal coordinate: ${x}:${y}`;\n        const cell = this.cell(x, y);\n        if (cell.isRef)\n            throw `cell is ref: ${x}:${y}`;\n        const has_prev = cell.value !== null;\n        cell.value = [selectable, action];\n        if (!has_prev) {\n            if (cell.merged) {\n                const merged = cell.merged;\n                for (let sx = merged.from_x; sx <= merged.to_x; sx++) {\n                    for (let sy = merged.from_y; sy <= merged.to_y; sy++) {\n                        this.counts_x[sx]++;\n                        this.counts_y[sy]++;\n                    }\n                }\n            }\n            else {\n                this.counts_x[x]++;\n                this.counts_y[y]++;\n            }\n        }\n        this.reset();\n    }\n    merge(x, y, width, height) {\n        if (x < 0 || y < 0)\n            throw `illegal coordinate: ${x}:${y}`;\n        if (width < 1 || height < 1)\n            throw `illegal size: ${width}:${height}`;\n        const merged = new MergedRegion(x, y, x + width - 1, y + height - 1);\n        const origin = this.cell(x, y);\n        if (origin.isRef)\n            throw `cell is ref: ${x}:${y}`;\n        if (origin.merged)\n            throw `cell is merged: ${JSON.stringify(origin.merged)}`;\n        origin.merged = merged;\n        const has_value = origin.value !== null;\n        for (let sx = merged.from_x; sx <= merged.to_x; sx++) {\n            for (let sy = merged.from_y; sy <= merged.to_y; sy++) {\n                if (!(sx === x && sy === y)) {\n                    const cell = this.cell(sx, sy);\n                    if (cell.value)\n                        throw `merging cell already has value: ${sx}:${sy}`;\n                    if (cell.isRef)\n                        throw `merging cell is ref: ${sx}:${sy}`;\n                    cell.merged = merged;\n                    if (has_value) {\n                        this.counts_x[sx]++;\n                        this.counts_y[sy]++;\n                    }\n                }\n            }\n        }\n    }\n    remove(x, y) {\n        if (x < 0 || y < 0)\n            throw `illegal coordinate: ${x}:${y}`;\n        const cell = this.cell(x, y);\n        if (cell.isRef)\n            throw `cell is ref: ${x}:${y}`;\n        if (cell.value) {\n            cell.value = null;\n            if (cell.merged) {\n                const merged = cell.merged;\n                for (let sx = merged.from_x; sx <= merged.to_x; sx++) {\n                    for (let sy = merged.from_y; sy <= merged.to_y; sy++) {\n                        this.counts_x[sx]--;\n                        this.counts_y[sy]--;\n                    }\n                }\n            }\n            else {\n                this.counts_x[x]--;\n                this.counts_y[y]--;\n            }\n        }\n    }\n    unmerge(x, y) {\n        if (x < 0 || y < 0)\n            throw `illegal coordinate: ${x}:${y}`;\n        const origin = this.cell(x, y);\n        if (origin.isRef)\n            throw `cell is ref: ${x}:${y}`;\n        if (origin.merged) {\n            const has_value = origin.value !== null;\n            const merged = origin.merged;\n            origin.merged = null;\n            for (let sx = merged.from_x; sx <= merged.to_x; sx++) {\n                for (let sy = merged.from_y; sy <= merged.to_y; sy++) {\n                    if (!(sx === x && sy === y)) {\n                        this.cell(sx, sy).merged = null;\n                        if (has_value) {\n                            this.counts_x[sx]--;\n                            this.counts_y[sy]--;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    cell(x, y) {\n        if (x < 0 || y < 0)\n            throw \"illegal coordinate\";\n        this.expand(x, y);\n        return this.cells[y][x];\n    }\n    expand(to_x, to_y) {\n        while (this.limit_y < to_y) {\n            this.limit_y++;\n            this.counts_y[this.limit_y] = 0;\n            this.cells[this.limit_y] = [];\n            for (let x = 0; x <= this.limit_x; x++) {\n                this.cells[this.limit_y][x] = new SelectableCell(x, this.limit_y);\n            }\n        }\n        while (this.limit_x < to_x) {\n            this.limit_x++;\n            this.counts_x[this.limit_x] = 0;\n            for (let y = 0; y <= this.limit_y; y++) {\n                this.cells[y][this.limit_x] = new SelectableCell(this.limit_x, y);\n            }\n        }\n    }\n    handleInput() {\n        const joystick = this.joystick;\n        if (joystick.moveUp.once()) {\n            this.moveUp();\n        }\n        if (joystick.moveDown.once()) {\n            this.moveDown();\n        }\n        if (joystick.moveLeft.once()) {\n            this.moveLeft();\n        }\n        if (joystick.moveRight.once()) {\n            this.moveRight();\n        }\n        if (joystick.hit.once()) {\n            const selected = this.selected;\n            if (selected) {\n                let [, callback] = selected;\n                pixi_js__WEBPACK_IMPORTED_MODULE_0__[\"sound\"].play('confirm');\n                callback();\n            }\n            else {\n                pixi_js__WEBPACK_IMPORTED_MODULE_0__[\"sound\"].play('cancel');\n                console.warn(\"selected not found\");\n            }\n        }\n    }\n}\nclass SelectableCell {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n        this.merged = null;\n        this.value = null;\n    }\n    unmark() {\n        if (this.value) {\n            this.value[0].selected = false;\n        }\n    }\n    mark() {\n        if (this.value) {\n            this.value[0].selected = true;\n        }\n    }\n    get isRef() {\n        return this.merged !== null && !(this.merged.from_x === this.x && this.merged.from_y === this.y);\n    }\n    get isSelectable() {\n        return this.value !== null || this.isRef;\n    }\n}\nclass MergedRegion {\n    constructor(from_x, from_y, to_x, to_y) {\n        this.from_x = from_x;\n        this.from_y = from_y;\n        this.to_x = to_x;\n        this.to_y = to_y;\n    }\n    contains(x, y) {\n        return x >= this.from_x && x <= this.to_x && y >= this.from_y && y <= this.to_y;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/ui.ts\n");

/***/ }),

/***/ "pixi-layers":
/*!******************************!*\
  !*** external "PIXI.layers" ***!
  \******************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */
/***/ (function(module, exports) {

module.exports = PIXI.layers;

/***/ }),

/***/ "pixi-sound":
/*!*****************************!*\
  !*** external "PIXI.sound" ***!
  \*****************************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */
/***/ (function(module, exports) {

module.exports = PIXI.sound;

/***/ }),

/***/ "pixi.js":
/*!***********************!*\
  !*** external "PIXI" ***!
  \***********************/
/*! no static exports found */
/*! ModuleConcatenation bailout: Module is not an ECMAScript module */
/***/ (function(module, exports) {

module.exports = PIXI;

/***/ })

/******/ });